{
    "version": "https://jsonfeed.org/version/1",
    "title": "zjxdiu~blog site • All posts by \"开发\" tag",
    "description": "Shadow in front implying sun behind",
    "home_page_url": "https://zjxdiu.github.io",
    "items": [
        {
            "id": "https://zjxdiu.github.io/blog/IMPORTANT_NOTE/",
            "url": "https://zjxdiu.github.io/blog/IMPORTANT_NOTE/",
            "title": "网站重要通知 !",
            "date_published": "2023-12-10T12:02:00.000Z",
            "content_html": "<h2 id=\"重要通知\"><a class=\"markdownIt-Anchor\" href=\"#重要通知\">#</a> 重要通知</h2>\n<p>目前博客站点存在较多未完成的文章，加上我本身对这个主题也不是很满意，此博客会在 2024 年进行大幅重整，大部分内容将搬运到新博客网站上，这个网站将作为正式内容和工作博客，也可能会下线。</p>\n<p>由于临近毕业，事务繁多，评论可能几个月都看不到，如果期望快速回复可以直接发送邮件，邮箱地址在关于页面。提前预祝各位学生考研、考公、就业顺利！</p>\n",
            "tags": [
                "开发"
            ]
        },
        {
            "id": "https://zjxdiu.github.io/blog/%E9%9A%8F%E8%AE%B020230501/",
            "url": "https://zjxdiu.github.io/blog/%E9%9A%8F%E8%AE%B020230501/",
            "title": "Hexo批处理脚本更新，通过zerotier实现免费简易内网穿透",
            "date_published": "2023-05-01T03:01:00.000Z",
            "content_html": "<h3 id=\"因为不知道写啥就更新一些以前的东西吧\"><a class=\"markdownIt-Anchor\" href=\"#因为不知道写啥就更新一些以前的东西吧\">#</a> 因为不知道写啥，就更新一些以前的东西吧</h3>\n<ul>\n<li>Hexo 批处理脚本<br>\n原文：<a href=\"https://zjxdiu.github.io/blog/%E6%89%B9%E5%A4%84%E7%90%86%E4%BC%98%E5%8C%96Hexo%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/\">使用批处理和 Joplin 执行并优化 Hexo 博客工作流程</a><br>\n更新脚本内容：</li>\n</ul>\n<pre><code class=\"hljs bat\">@<span class=\"hljs-built_in\">echo</span> off\n<span class=\"hljs-built_in\">setlocal</span> EnableDelayedExpansion\n<span class=\"hljs-keyword\">goto</span> <span class=\"hljs-built_in\">start</span>\n:ac\n<span class=\"hljs-comment\">rem 请设置%targetlable%变量，以确保正常跳转至目标位置</span>\n<span class=\"hljs-built_in\">cls</span>\n<span class=\"hljs-built_in\">color</span> <span class=\"hljs-number\">0</span>F\n<span class=\"hljs-keyword\">goto</span> <span class=\"hljs-variable\">%targetlabel%</span>\n:<span class=\"hljs-built_in\">start</span>\n<span class=\"hljs-keyword\">if</span> &quot;<span class=\"hljs-variable\">%targetlabel%</span>&quot;==&quot;&quot; (<span class=\"hljs-built_in\">set</span> &quot;targetlabel=<span class=\"hljs-built_in\">start</span>&quot;&amp;&amp;<span class=\"hljs-keyword\">goto</span> ac)\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">echo</span>  <span class=\"hljs-number\">1</span>.【完整】执行完整的检查和推送blog流程\n<span class=\"hljs-built_in\">echo</span>  <span class=\"hljs-number\">2</span>.【快速】快速上载blog\n<span class=\"hljs-built_in\">echo</span>  <span class=\"hljs-number\">3</span>.【预览】本地预览\n<span class=\"hljs-built_in\">echo</span>  <span class=\"hljs-number\">4</span>.单独执行指令\n<span class=\"hljs-built_in\">echo</span>  <span class=\"hljs-number\">5</span>.【标准】执行快速标准推送\n<span class=\"hljs-built_in\">echo</span>  <span class=\"hljs-number\">6</span>.【本地部署】执行标准推送，但部署到本地而非GitHub\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">echo</span>.\nchoice /c <span class=\"hljs-number\">123456</span>\n<span class=\"hljs-keyword\">if</span> &quot;<span class=\"hljs-variable\">%errorlevel%</span>&quot;==&quot;<span class=\"hljs-number\">6</span>&quot; <span class=\"hljs-keyword\">goto</span> ldeploy\n<span class=\"hljs-keyword\">if</span> &quot;<span class=\"hljs-variable\">%errorlevel%</span>&quot;==&quot;<span class=\"hljs-number\">5</span>&quot; <span class=\"hljs-keyword\">goto</span> std\n<span class=\"hljs-keyword\">if</span> &quot;<span class=\"hljs-variable\">%errorlevel%</span>&quot;==&quot;<span class=\"hljs-number\">4</span>&quot; <span class=\"hljs-keyword\">goto</span> new\n<span class=\"hljs-keyword\">if</span> &quot;<span class=\"hljs-variable\">%errorlevel%</span>&quot;==&quot;<span class=\"hljs-number\">3</span>&quot; (<span class=\"hljs-built_in\">set</span> &quot;targetlabel=local&quot;&amp;&amp;<span class=\"hljs-keyword\">goto</span> ac)\n<span class=\"hljs-keyword\">if</span> &quot;<span class=\"hljs-variable\">%errorlevel%</span>&quot;==&quot;<span class=\"hljs-number\">2</span>&quot; (<span class=\"hljs-built_in\">set</span> &quot;targetlabel=fast&quot;&amp;&amp;<span class=\"hljs-keyword\">goto</span> ac)\n<span class=\"hljs-keyword\">if</span> &quot;<span class=\"hljs-variable\">%errorlevel%</span>&quot;==&quot;<span class=\"hljs-number\">1</span>&quot; (<span class=\"hljs-built_in\">set</span> &quot;targetlabel=full&quot;&amp;&amp;<span class=\"hljs-keyword\">goto</span> ac)\n<span class=\"hljs-built_in\">pause</span>&amp;<span class=\"hljs-keyword\">exit</span>\n:ldeploy\n<span class=\"hljs-comment\">REM 这一段是部署在本地，也就是复制一遍；可以根据情况改成复制到共享文件夹中</span>\n<span class=\"hljs-built_in\">echo</span>.\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">echo</span> 清理缓存...\n<span class=\"hljs-built_in\">cmd</span> /c &quot;hexo clean&quot; &gt;<span class=\"hljs-built_in\">nul</span>\n<span class=\"hljs-built_in\">echo</span> 生成页面...\n<span class=\"hljs-built_in\">cmd</span> /c &quot;hexo g&quot; &gt;<span class=\"hljs-built_in\">nul</span>\n<span class=\"hljs-built_in\">echo</span> 复制必要资源...\n<span class=\"hljs-built_in\">cmd</span> /c &quot;<span class=\"hljs-built_in\">xcopy</span> D:\\blog\\source\\_posts\\_resources D:\\blog\\public\\blog\\_resources\\ /e /s /y&quot; &gt;<span class=\"hljs-built_in\">nul</span>\n<span class=\"hljs-built_in\">echo</span> 部署到本地服务器路径...\n<span class=\"hljs-built_in\">cmd</span> /c &quot;<span class=\"hljs-built_in\">xcopy</span> D:\\blog\\public\\ D:\\server\\blog1\\ /e /s /y&quot; &gt;<span class=\"hljs-built_in\">nul</span>\n<span class=\"hljs-built_in\">echo</span> 上传结束，打开网页中...\n<span class=\"hljs-built_in\">cmd</span> /c &quot;<span class=\"hljs-built_in\">start</span> C:\\Users\\zjxdiu\\Downloads\\实时工具\\hfs.exe&quot;\n<span class=\"hljs-built_in\">start</span> http://<span class=\"hljs-number\">127</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">1</span>/\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">echo</span> 完成，按任意键退出...\n<span class=\"hljs-built_in\">pause</span>\n<span class=\"hljs-keyword\">exit</span>\n:std\n<span class=\"hljs-built_in\">echo</span>.\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">echo</span> 启动本地预览...\n<span class=\"hljs-built_in\">cmd</span> /c &quot;hexo clean &amp; hexo g &amp; <span class=\"hljs-built_in\">xcopy</span> D:\\blog\\source\\_posts\\_resources D:\\blog\\public\\blog\\_resources\\ /e /s /y &amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-number\">2</span>&gt;D:\\blog\\.deploy_git\\.nojekyll &amp; <span class=\"hljs-built_in\">start</span> http://localhost:<span class=\"hljs-number\">4000</span>/ &amp; hexo s&quot;\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">echo</span> 上载到远程服务器...\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">cmd</span> /c &quot;hexo d&quot;\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">echo</span> 完成，按任意键退出...\n<span class=\"hljs-built_in\">pause</span>\n<span class=\"hljs-keyword\">exit</span>\n:new\n<span class=\"hljs-built_in\">echo</span> 正在创建新的<span class=\"hljs-built_in\">cmd</span>实例...\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">echo</span> 命令提示：\n<span class=\"hljs-built_in\">echo</span> hexo clean\n<span class=\"hljs-built_in\">echo</span> hexo g\n<span class=\"hljs-built_in\">echo</span> hexo s\n<span class=\"hljs-built_in\">echo</span> hexo d\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">start</span> <span class=\"hljs-built_in\">cmd</span>\n<span class=\"hljs-built_in\">echo</span> 按任意键返回菜单...\n<span class=\"hljs-built_in\">pause</span> &gt;<span class=\"hljs-built_in\">nul</span>\n<span class=\"hljs-built_in\">set</span> &quot;targetlabel=<span class=\"hljs-built_in\">start</span>&quot;&amp;&amp;<span class=\"hljs-keyword\">goto</span> ac\n:local\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">echo</span>                  本地预览模式\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">echo</span> 启动预览...\n<span class=\"hljs-built_in\">cmd</span> /c &quot;hexo clean &amp; hexo g &amp; <span class=\"hljs-built_in\">xcopy</span> D:\\blog\\source\\_posts\\_resources D:\\blog\\public\\blog\\_resources\\ /e /s /y &amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-number\">2</span>&gt;D:\\blog\\.deploy_git\\.nojekyll &amp; <span class=\"hljs-built_in\">start</span> http://localhost:<span class=\"hljs-number\">4000</span>/ &amp; hexo s&quot;\n<span class=\"hljs-built_in\">echo</span> 按任意键返回菜单...\n<span class=\"hljs-built_in\">pause</span> &gt;<span class=\"hljs-built_in\">nul</span>\n<span class=\"hljs-built_in\">set</span> &quot;targetlabel=<span class=\"hljs-built_in\">start</span>&quot;&amp;&amp;<span class=\"hljs-keyword\">goto</span> ac\n:fast\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">echo</span>                  快速上载blog\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">cmd</span> /c &quot;hexo clean &amp; hexo g &amp; <span class=\"hljs-built_in\">xcopy</span> D:\\blog\\source\\_posts\\_resources D:\\blog\\public\\blog\\_resources\\ /e /s /y &amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-number\">2</span>&gt;D:\\blog\\.deploy_git\\.nojekyll &amp; hexo d&quot;\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">echo</span> 完成，<span class=\"hljs-number\">2</span>秒后退出...\n<span class=\"hljs-built_in\">ping</span> localhost -n <span class=\"hljs-number\">3</span> &gt;<span class=\"hljs-built_in\">nul</span>\n<span class=\"hljs-keyword\">exit</span>\n:full\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">echo</span>                  完整流程向导\n<span class=\"hljs-built_in\">echo</span>              按<span class=\"hljs-number\">0</span>为确定，按<span class=\"hljs-number\">1</span>为跳过\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-keyword\">goto</span> clean\n:clean\n<span class=\"hljs-built_in\">echo</span> 第一步：清理缓存\nchoice /c <span class=\"hljs-number\">01</span>\n<span class=\"hljs-keyword\">if</span> &quot;<span class=\"hljs-variable\">%errorlevel%</span>&quot;==&quot;<span class=\"hljs-number\">2</span>&quot; <span class=\"hljs-keyword\">goto</span> generate\n<span class=\"hljs-built_in\">cmd</span> /c &quot;hexo clean&quot;\n<span class=\"hljs-keyword\">goto</span> generate\n:generate\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">echo</span> 第二步：生成页面\nchoice /c <span class=\"hljs-number\">01</span>\n<span class=\"hljs-keyword\">if</span> &quot;<span class=\"hljs-variable\">%errorlevel%</span>&quot;==&quot;<span class=\"hljs-number\">2</span>&quot; <span class=\"hljs-keyword\">goto</span> check\n<span class=\"hljs-built_in\">cmd</span> /c &quot;<span class=\"hljs-built_in\">xcopy</span> D:\\blog\\source\\_posts\\_resources D:\\blog\\public\\blog\\_resources\\ /e /s /y &amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-number\">2</span>&gt;D:\\blog\\.deploy_git\\.nojekyll &amp; hexo g&quot;\n<span class=\"hljs-keyword\">goto</span> check\n:check\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">echo</span> 第三步：本地预览\nchoice /c <span class=\"hljs-number\">01</span>\n<span class=\"hljs-keyword\">if</span> &quot;<span class=\"hljs-variable\">%errorlevel%</span>&quot;==&quot;<span class=\"hljs-number\">2</span>&quot; <span class=\"hljs-keyword\">goto</span> deploy\n<span class=\"hljs-built_in\">start</span> http://localhost:<span class=\"hljs-number\">4000</span>/\n<span class=\"hljs-built_in\">cmd</span> /c &quot;hexo s&quot;\n<span class=\"hljs-keyword\">goto</span> deploy\n:deploy\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">echo</span> 第四步：上传到远程服务器\nchoice /c <span class=\"hljs-number\">01</span>\n<span class=\"hljs-keyword\">if</span> &quot;<span class=\"hljs-variable\">%errorlevel%</span>&quot;==&quot;<span class=\"hljs-number\">2</span>&quot; <span class=\"hljs-keyword\">goto</span> done\n<span class=\"hljs-built_in\">cmd</span> /c &quot;hexo d&quot;\n<span class=\"hljs-keyword\">goto</span> done\n:done\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">echo</span> 流程已完成，按任意键返回菜单...\n<span class=\"hljs-built_in\">pause</span> &gt;<span class=\"hljs-built_in\">nul</span>\n<span class=\"hljs-built_in\">set</span> &quot;targetlabel=<span class=\"hljs-built_in\">start</span>&quot;&amp;&amp;<span class=\"hljs-keyword\">goto</span> ac</code></pre>\n<hr>\n<ul>\n<li>Zerotier 内网穿透<br>\n网上有一些教程，但是不够简洁易懂，所以写一个。</li>\n</ul>\n<ol>\n<li>进入<a href=\"https://my.zerotier.com/\">官网控制台</a>注册一个账号，可以不用现场注册，直接微软账号登录即可。</li>\n<li>选择 Create A Network</li>\n<li>点击刚创建的网络，进入配置界面\n<ul>\n<li>Name 随便写一个方便你记的名字</li>\n<li>Description 是介绍，可以写详细信息，如果以后忘了网络是干啥的可以看这个回顾</li>\n<li>Access Control 建议选 Private，这样你就拥有完全的管理权限</li>\n<li>下面的 IP 直接自动即可，或者手动选一个跟你目前局域网 IP 不冲突的地址段</li>\n<li>IPv6 Auto-Assign 根据情况选择，如果你们的网络成员都具有广域网 ipv6 连接则勾选第一项，否则不管</li>\n<li>最后复制 Network ID，就是一串数字和字母组成的字符串，发给你的成员<br>\n【以上步骤只需要网络管理员进行，成员不需要】<br>\n【以下内容每个人都要执行】</li>\n</ul>\n</li>\n<li>下载 Zerotier：<a href=\"https://www.zerotier.com/download/\">下载链接</a></li>\n<li>安装并从开始菜单里启动</li>\n<li>等任务栏出现程序图标，右键，选择 Join New Network</li>\n<li>输入刚才的 Network ID，确定\n<ul>\n<li>如果弹出询问弹窗，例如防火墙、是否启用网络发现等，均允许</li>\n</ul>\n</li>\n<li>等待几分钟，进入系统设置检查 IP 是否获取成功\n<ul>\n<li>分配成功说明连接成功，否则继续等待</li>\n</ul>\n</li>\n<li>【重要】任意成员加入网络时，需要进入<a href=\"https://my.zerotier.com/\">官网控制台</a>给成员左侧的 Auth 打勾，只有打勾的成员才能获取到 IP 并加入网络，否则无法连接</li>\n<li>在控制台页面可以看到每个人的虚拟局域网 IP，这个地址一旦分配就不会自动更改，因此你甚至可以做个 DNS 记录方便大家记（）</li>\n<li>ping 一下成员的 IP，确定连接通顺</li>\n<li>完成！现在你们已经相当于在一个局域网里了，只不过游戏房间和服务器可能不会自动查找到，手动输入地址即可。</li>\n</ol>\n<hr>\n<h3 id=\"查询精神状态\"><a class=\"markdownIt-Anchor\" href=\"#查询精神状态\">#</a> 查询精神状态</h3>\n<p>最近玩 LLM 有点上瘾，推荐一个 chatGLM 项目<a href=\"https://github.com/THUDM/ChatGLM-6B\"> Github 地址</a>，可以部署在本地运行的对话机器人，这个 62 亿参数的模型只需要 6G 显存就能运行（当然，是 N 卡），可以说非常好玩了（）</p>\n<p>还想换个主题，或者再开一个功能更全面一些的，这个极简博客就当正式文章和简历发布地点。<br>\n就这样吧，最近作业很多但是都写完了，没有压力就没有折腾的欲望和动力 (T_T)</p>\n",
            "tags": [
                "日常",
                "开发"
            ]
        },
        {
            "id": "https://zjxdiu.github.io/blog/%E5%94%A4%E5%A2%83%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/",
            "url": "https://zjxdiu.github.io/blog/%E5%94%A4%E5%A2%83%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/",
            "title": "【计划长期更新】记录自己的编程思路与想法，实现成功后更新",
            "date_published": "2022-12-14T14:32:00.000Z",
            "content_html": "<p>前言：<br>\n由于大学事务繁重，很多时候想到了一些功能的实现思路也没有时间及时验证，所以计划开一个帖子存放这些想法。</p>\n<hr>\n<p>1. 音游主体玩法逻辑<br>\n音符数据点存放：xml 文件<br>\n存储内容：</p>\n<ul>\n<li>音符时间：音符应被打击时，距离音乐开始时的毫秒数</li>\n<li>音符类型（单点、长按）（暂时不考虑）</li>\n<li>轨道编号</li>\n</ul>\n<p>实现逻辑：</p>\n<ul>\n<li>场景开始时，生成音符；若数量过多，可以考虑分节生成。音符带实例变量，存储其音符时间。</li>\n<li>音乐预加载、延迟播放；开始播放同帧启动计时器（高精度计时方法详见<a href=\"https://bbs.evkworld.cn/topic/2590/\"> https://bbs.evkworld.cn/topic/2590/</a>）</li>\n<li>按下按键时（上升沿触发）：\n<ul>\n<li>记录按键时间（可用数组处理）</li>\n<li>检查该轨道上最近的音符，获取其音符时间，计算差值。\n<ul>\n<li>若差距过大，打击无效；</li>\n<li>若差距较大，判断为 miss；</li>\n<li>根据差值判断等级（Perfect、good、OK）</li>\n<li>一旦判断成功，销毁该音符</li>\n<li>若差值为负，则打击时间比音符时间晚；\n<ul>\n<li>计算差值、判断等级</li>\n<li>miss 阈值应低于正差值。</li>\n<li>（可以避免两个紧挨着的音符总是被判断到后面的那个）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>越线过久未打击：\n<ul>\n<li>采用屏幕外的</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "开发",
                "游戏引擎"
            ]
        },
        {
            "id": "https://zjxdiu.github.io/blog/%E8%A1%A5%E6%A1%A31/",
            "url": "https://zjxdiu.github.io/blog/%E8%A1%A5%E6%A1%A31/",
            "title": "【补档】唤境游戏如何显示帧率？详解性能相关内容",
            "date_published": "2022-12-05T14:11:00.000Z",
            "content_html": "<p>因群里有成员对这方面存在疑问，所以写一篇文章详细解释下游戏内性能相关。<br>\n需要注意的是，本人对于唤境中这些内容的最具体理解未必到位，因此可能出现一些技术细节上的错误，希望大佬能指出错误，感激不尽！<br>\n为了保证一般开发者也能看得懂，文章会尽量避免非常专业和硬核的描述，相应地就会降低严谨性。如果有兴趣深究，请查找更专业的资料。<br>\n此外，本文并非是针对唤境游戏的性能优化而写的，如果您的引擎或者制作的游戏出现卡顿，请前往 b 站查看小嗦大佬的教程。<br>\n传送门：<a href=\"https://www.bilibili.com/video/BV1wg411E7oF\">https://www.bilibili.com/video/BV1wg411E7oF</a></p>\n<hr>\n<h2 id=\"一-性能相关概念基础内容\"><a class=\"markdownIt-Anchor\" href=\"#一-性能相关概念基础内容\">#</a> 一、性能相关概念（基础内容）</h2>\n<p>通常情况下，我们会通过几个方面来评估一个游戏运行的性能表现，分别是帧率、帧生成时间、CPU 占用、GPU 占用、内存占用、显存占用等。</p>\n<h3 id=\"1-帧率-fps\"><a class=\"markdownIt-Anchor\" href=\"#1-帧率-fps\">#</a> 1. 帧率 / FPS</h3>\n<p>游戏之所以能呈现动态的画面，是因为它会以一个很快的速度生成画面，每秒几十张甚至上百张，其中每个画面就被称为一 “帧” 。因此，帧是游戏画面在时间上的最小单位。<br>\n于是，我们有了帧率的概念。帧率，就是每秒钟游戏生成的帧数量。很明显的，帧率越高，我们肉眼感觉到的画面就越流畅，反之则越卡顿。当帧率为 0 时，游戏就停止在一张静态的图片上。<br>\n一般而言，当帧率达到 60 时，人眼观察到的画面就可以称为 “比较流畅” 了。</p>\n<h3 id=\"2帧生成时间或帧间隔-frametime\"><a class=\"markdownIt-Anchor\" href=\"#2帧生成时间或帧间隔-frametime\">#</a> 2. 帧生成时间（或帧间隔）/ FRAMETIME</h3>\n<p>有了帧率的概念，我们就可以引入帧生成时间的概念了。<br>\n游戏引擎每生成一帧画面，都需要消耗一定的时间，这个时间就称为帧生成时间。<br>\n帧生成时间波动是造成瞬间卡顿的原因之一。设想一个极端情况，在运行的某一秒里，游戏花了 0.9 秒来渲染第一帧，然后在剩下 0.1 秒里渲染了剩下的 59 帧。这时候的平均帧率还是 60，但是你在玩的时候就会明显感觉到游戏发生了一次剧烈的卡顿，因为这 0.9 秒的时间内游戏处于静止状态。<br>\n帧生成时间和间隔的定义，严格来说并不是完全一致的，但本文并不是进行画面技术研究，所以暂且认为它们是同一个概念。</p>\n<h3 id=\"3cpu占用-cpu\"><a class=\"markdownIt-Anchor\" href=\"#3cpu占用-cpu\">#</a> 3.CPU 占用 / CPU</h3>\n<p>在计算机中，CPU 负责通用计算，也就是任何计算理论上都可以由 CPU 完成。在游戏中，控制游戏系统运行、通过公式计算数据、运行函数等都是由 CPU 完成的。最开始的时候，游戏画面的渲染也是由 CPU 完成的，但后来人们发现 CPU 难以胜任这一要求，于是将这个工作交由 GPU 完成。有关这一段历史的发展，详见 https://www.bilibili.com/video/BV1Hb41177JB<br>\n 对于现代电脑和手机来说，它们的 CPU 性能都相当强大，可以完成非常密集的运算需求。但它们的性能也不是无限的，而且在手机、笔记本电脑上，CPU 是耗电量非常大的元件。所以，CPU 会直接影响游戏的性能表现，降低 CPU 的占用率也可以有效提高游戏运行的效率，以及在低端设备上成功运行的可能性。</p>\n<h3 id=\"4gpu占用-gpu\"><a class=\"markdownIt-Anchor\" href=\"#4gpu占用-gpu\">#</a> 4.GPU 占用 / GPU</h3>\n<p>前面提到了，GPU 是用来替代 CPU 来完成画面渲染工作的硬件。所以，GPU 是离游戏实际画面最近的硬件，因为游戏画面就是由它生成的。<br>\nGPU 负责的内容就是渲染画面，例如显示图片、文字等。<br>\n对于唤境来说，由于唤境只是 2D 游戏引擎，因此对于现代 GPU 来说压力比较低，但还是存在运行效率过低的情况。<br>\n有关 GPU 运行解析的内容请见官方教程<a href=\"https://evkworld.cn/wiki/58\"> https://evkworld.cn/wiki/58</a></p>\n<h3 id=\"5显存占用-vram-video-memory-image-memory等\"><a class=\"markdownIt-Anchor\" href=\"#5显存占用-vram-video-memory-image-memory等\">#</a> 5. 显存占用 / (VRAM、VIDEO MEMORY、IMAGE MEMORY 等)</h3>\n<p>显存，又称显示内存、显卡内存、图形内存、视频内存等，是显卡用来储存图像信息的临时空间。<br>\n对于集成显卡（例如手机）而言，显存就是从内存中分出来的部分；对于独立显卡（例如高性能电脑）而言，显存是单独集成在显卡中的一个存储器。所以，当游戏在手机上运行的时候，游戏会同时消耗两份内存空间，一部分用于程序运行，另一部分充当显存。因此，如果您的游戏在电脑上运行很正常，而在低端手机上就无法运行或者特别卡顿，则有可能是因为游戏消耗了较多的显存和内存。</p>\n<hr>\n<h2 id=\"二-唤境中跟性能有关的表达式\"><a class=\"markdownIt-Anchor\" href=\"#二-唤境中跟性能有关的表达式\">#</a> 二、唤境中跟性能有关的表达式</h2>\n<p>唤境引擎并没有提供性能监控相关的组件和能力，但可以通过表达式获取到性能数据。<br>\n所有相关表达式都在系统部分中。</p>\n<h3 id=\"1帧率\"><a class=\"markdownIt-Anchor\" href=\"#1帧率\">#</a> 1. 帧率</h3>\n<p>表达式：fps<br>\n 刷新频率：每秒 1 次<br>\n返回值类型：整数<br>\n建议使用方法：直接通过表达式获取帧率即可。<br>\n<img src=\"../_resources/ba2e311e9e59cfd649509ccc2fa99a0b.png\" alt=\"ba2e311e9e59cfd649509ccc2fa99a0b.png\"></p>\n<h3 id=\"2帧生成时间帧间隔\"><a class=\"markdownIt-Anchor\" href=\"#2帧生成时间帧间隔\">#</a> 2. 帧生成时间（帧间隔）</h3>\n<p>表达式：dt<br>\n 刷新频率：每帧 1 次<br>\n返回值类型：单精度浮点数，即 6 位小数<br>\n（当测量单帧间隔时会返回 10 位小数）<br>\n其它：引擎内描述为 “时间间隔”<br>\n 建议使用方法：先将数据乘以 1000，然后使用 roundto () 将其化简到 1-3 位小数，最后加上单位 “ms”（毫秒），即可得到友好的数字展示。<br>\n<img src=\"../_resources/fb34db0b029a4d27e4ad593e8cc363ac.png\" alt=\"fb34db0b029a4d27e4ad593e8cc363ac.png\"></p>\n<h3 id=\"3cpu占用cpu时间\"><a class=\"markdownIt-Anchor\" href=\"#3cpu占用cpu时间\">#</a> 3.CPU 占用（CPU 时间）</h3>\n<p>表达式：cpuutilisation<br>\n 刷新频率：每秒 1 次<br>\n其它：引擎内描述为 “CPU 在游戏中消耗的时间”<br>\n 返回值类型：双精度浮点数，即 18 位小数。<br>\n建议使用方法：先将数据乘以 100，然后使用 roundto () 将其简化到 1-2 位小数，最后加上百分比符号 “%”，即可得到友好的数字展示。<br>\n<img src=\"../_resources/68f1e9a186fe3b6660d1936f792cefe6.png\" alt=\"68f1e9a186fe3b6660d1936f792cefe6.png\"></p>\n<h3 id=\"4gpu占用渲染消耗时间\"><a class=\"markdownIt-Anchor\" href=\"#4gpu占用渲染消耗时间\">#</a> 4.GPU 占用（渲染消耗时间）</h3>\n<p>表达式：gpuutilisation<br>\n 刷新频率：每秒 1 次<br>\n其它：引擎内描述为 “GPU 在游戏中消耗的时间”<br>\n 返回值类型：9 位小数。<br>\n建议使用方法：与 CPU 占用相同。<br>\n<img src=\"../_resources/596e4d2898ce7eb638dca60f52193e12.png\" alt=\"596e4d2898ce7eb638dca60f52193e12.png\"></p>\n<h3 id=\"5显存占用\"><a class=\"markdownIt-Anchor\" href=\"#5显存占用\">#</a> 5. 显存占用</h3>\n<p>表达式：imagememoryusage<br>\n 刷新频率：每帧 1 次<br>\n返回值类型：9 位小数。<br>\n建议使用方法：直接通过表达式获取即可。<br>\n<img src=\"../_resources/4b1452908420640a6ac75af4bb2b156e.png\" alt=\"4b1452908420640a6ac75af4bb2b156e.png\"></p>\n<hr>\n<h2 id=\"三-制作性能监控窗口\"><a class=\"markdownIt-Anchor\" href=\"#三-制作性能监控窗口\">#</a> 三、制作性能监控窗口</h2>\n<p>光了解了上面所有的信息，但如果不会用，那就都是白搭。接下来，我会一步步解释如何制作游戏内的性能监控悬浮窗。</p>\n<p>1. 打开游戏项目，新建对象：一个文本、一个精灵和一个按钮，精灵的贴图替换成一张长方形图片即可<br>\n<img src=\"../_resources/799e625f09a212d9e980f8cff86b3a2e.png\" alt=\"799e625f09a212d9e980f8cff86b3a2e.png\"></p>\n<p><img src=\"../_resources/c6d47b1f64216db3965c811b0afdb06e.png\" alt=\"c6d47b1f64216db3965c811b0afdb06e.png\"></p>\n<p>2. 新建几个全局变量，“启用测量”、“悬浮窗 x”、“悬浮窗 y”。其中，第一个是布尔类型变量，是必需的；后两个是数值类型变量，不是必需的。<br>\n后两个的初始值不建议设为 0，应该根据你选择的默认位置来设置。<br>\n<img src=\"../_resources/a974999ff46bbac77137dbfc7e819c24.png\" alt=\"a974999ff46bbac77137dbfc7e819c24.png\"></p>\n<p>3. 新建一个图层组 “悬浮窗”，设置为全局图层组，然后将精灵、文本和按钮拖入该图层组中，调整文本和精灵的大小及属性，文本选择左对齐、上下居中对齐，大小跟精灵差不多一样大就行<br>\n<img src=\"../_resources/7cf2b2e120c5da549d4cc1c5b5008a36.png\" alt=\"7cf2b2e120c5da549d4cc1c5b5008a36.png\"><br>\n<img src=\"../_resources/2b26784c58f0c77a067d4447edbd42b4.png\" alt=\"2b26784c58f0c77a067d4447edbd42b4.png\"></p>\n<p>4. 为文本添加拖拽和定时器能力，为精灵添加绑定能力<br>\n<img src=\"../_resources/f2cc5d66755ee2eb24d199e7c453ae46.png\" alt=\"f2cc5d66755ee2eb24d199e7c453ae46.png\"><br>\n<img src=\"../_resources/1751f48b11198c44c52e8e9cf67c033d.png\" alt=\"1751f48b11198c44c52e8e9cf67c033d.png\"></p>\n<p>5. 新建一条全局事件表，名称为 “性能监控窗口”，或者任何你喜欢的名字。<br>\n<img src=\"../_resources/3f181abb7a3ad49aaf2f1b81b178906a.png\" alt=\"3f181abb7a3ad49aaf2f1b81b178906a.png\"></p>\n<p>6. 开始写事件。可以参考我下面的这种设计方案。<br>\n核心思路：<br>\n（1）当 “启用测量” 变量为 “真” 时，显示文本和精灵，否则隐藏；注意，不要重复触发，可以加入一个触发器（例如 “仅触发一次”）来解决；<br>\n（2）制作好看的文本排版；<br>\n（3）避免每帧检测和每帧改变文本；<br>\n（4）（可选）实现悬浮窗的拖动，以及位置记忆。<br>\n<img src=\"../_resources/7b2602a886c2529d6189504f42ae5ff3.png\" alt=\"7b2602a886c2529d6189504f42ae5ff3.png\"><br>\n 文本内容供参考：<br>\n“帧率：” &amp; fps &amp; newline &amp; “CPU：” &amp; roundto (cpuutilisation*100,1) &amp; “%” &amp; newline &amp; “显存：” &amp; imagememoryusage &amp; “mb”</p>\n<p>7. 在每个你希望有监控悬浮窗的场景下都新建一个叫做 “悬浮窗” 的图层组，不需要放入任何内容，因为你之前已经选中了全局事件表。<br>\n然后将刚才写的全局事件表应用于每个你希望有悬浮窗的场景。<br>\n<img src=\"../_resources/9de754a5f74cef3b19451317d1597aa9.png\" alt=\"9de754a5f74cef3b19451317d1597aa9.png\"><br>\n<img src=\"../_resources/c383bbc3f3d2d8ddb921774cdc2be8c1.png\" alt=\"c383bbc3f3d2d8ddb921774cdc2be8c1.png\"></p>\n<p>8. 检查效果<br>\n<img src=\"../_resources/50611b15f85e9e7e7164bff667699f0d.png\" alt=\"50611b15f85e9e7e7164bff667699f0d.png\"></p>\n<p>9. 可额外优化的内容</p>\n<p>拖拽能力没有进行区域限制，可以直接把悬浮窗拖到屏幕外，如何解决？<br>\n・提示：只需要使用一个能力即可解决。</p>\n<p>事件表里还有可以进一步优化的内容？<br>\n・提示：绑定能力。</p>\n<h2 id=\"四-总结\"><a class=\"markdownIt-Anchor\" href=\"#四-总结\">#</a> 四、总结</h2>\n<p>通过这一篇文章的解析和教学，你应该对唤境游戏的性能及其监控方法有了一定的了解。<br>\n在多数情况下，唤境游戏其实并不需要这么多高级的技术细节，但这类功能可以给你的游戏添砖加瓦，起到锦上添花的作用。<br>\n文章撰写仓促，部分内容做不到非常细致和详尽，也可能有错误，欢迎大佬前来指正！</p>\n<p>额外优化内容：<br>\n（1）给文本和精灵分别添加 “边界限制” 能力即可；<br>\n（2）在启用测量为假的时候，给精灵添加一条动作：“取消绑定”</p>\n",
            "tags": [
                "开发",
                "游戏引擎"
            ]
        },
        {
            "id": "https://zjxdiu.github.io/blog/%E9%9D%92%E7%BE%BD_blog%E5%BB%BA%E7%AB%8B%E5%AE%8C%E6%88%90%EF%BC%81/",
            "url": "https://zjxdiu.github.io/blog/%E9%9D%92%E7%BE%BD_blog%E5%BB%BA%E7%AB%8B%E5%AE%8C%E6%88%90%EF%BC%81/",
            "title": "博客成功建立！",
            "date_published": "2022-11-24T13:27:00.000Z",
            "content_html": "<h2 id=\"关于博客\"><a class=\"markdownIt-Anchor\" href=\"#关于博客\">#</a> 关于博客</h2>\n<p>这里已经改造为我的专属网络空间，欢迎访问！<br>\n不定时发布各种博客文章，包括各类学习、爱好、生活和灌水内容等等。</p>\n<hr>\n<h2 id=\"个人资料\"><a class=\"markdownIt-Anchor\" href=\"#个人资料\">#</a> 个人资料</h2>\n<p>就读于长沙理工大学，今年大三。<br>\n什么领域都想涉及，软件、硬件、网络工程、音乐制作、音频处理、视频剪辑、游戏开发、平面设计… 但实际上并没有哪个是学得很好的。<br>\n外表是糙汉，内心世界却很单纯。不愿猜测叵测的人心，却总是被迫卷入一次次的纷争。</p>\n<hr>\n<h2 id=\"关于zjxdiu\"><a class=\"markdownIt-Anchor\" href=\"#关于zjxdiu\">#</a> 关于 zjxdiu</h2>\n<p>这是我的网络常用 id，一些平台里搜索这个 id 找到的大概都是我。<br>\n它的来源其实有点蠢（dumb）<br>\n这个 id 分成两部分，前面是 zjx，也就是我的名字首字母拼一起；后面是 diu，它是源于粤语里的一句脏话，然后初中的时候班上同学天天把 diu 挂在嘴边。<br>\n这还不是全部，当我辗转于各大 mc 服务器时，我意外地发现，diu 这个 id 被占用的概率很低，于是那段时间我的 minecraft 用户名一直叫 diu。<br>\n再长大一点，我觉得只叫 diu 也很容易听出一些低俗感，所以我把两部分拼起来，变成了 zjxdiu。<br>\n虽然还是很难通过英语来阅读这个词，但它确实是伴随着我到大学，一路走过来的 id。</p>\n<hr>\n<h2 id=\"联系方式等\"><a class=\"markdownIt-Anchor\" href=\"#联系方式等\">#</a> 联系方式等</h2>\n<p>可以通过以下方式联系我：<br>\n常用平台 id：zjxdiu<br>\nQQ：2987631086</p>\n<ul>\n<li>请在添加好友时说明你是从哪里找到我号码的，否则可能不会同意申请<br>\n E-mail：zjxdiu@qq.com</li>\n<li>可以用于提交各种东西，向我提问，等等</li>\n</ul>\n<hr>\n<p>友情链接功能还没调试好，暂时不开放…</p>\n",
            "tags": [
                "日常",
                "开发",
                "测试"
            ]
        }
    ]
}