{
    "version": "https://jsonfeed.org/version/1",
    "title": "zjxdiu~blog site • All posts by \"网络\" tag",
    "description": "Shadow in front implying sun behind",
    "home_page_url": "https://zjxdiu.github.io",
    "items": [
        {
            "id": "https://zjxdiu.github.io/blog/dynv6_notes/",
            "url": "https://zjxdiu.github.io/blog/dynv6_notes/",
            "title": "dynv6使用技巧（如何添加多个地址 子域名 等）",
            "date_published": "2023-03-03T09:00:00.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>因为 ipv6 普及度日益增加，在自己的环境里搭建简易服务器的想法就逐渐发芽；无论是用于博客网站、NAS 或私有云的搭建，还是用来开游戏服务器，都能够简单易行地实现（因为有公网 ipv6）。<br>\n不过，很多时候家庭环境下 ipv6 地址也会发生变化，尤其是电脑重启、宽带重拨的时候，那么如何在没有固定 ipv6 的情况下让别人能更容易找到我们的地址呢？很简单，当然是用 DDNS 了。<br>\nDDNS，也就是动态 DNS，将一个变化的 IP 绑定到域名上，通过脚本定时检测和更新地址，这样即使地址变化，域名解析出来的地址也会跟着变化，仍然可以使用同一个域名定位到同一个地址。</p>\n<h2 id=\"使用dynv6\"><a class=\"markdownIt-Anchor\" href=\"#使用dynv6\">#</a> 使用 dynv6</h2>\n<p>官网：<a href=\"https://dynv6.com/\">https://dynv6.com/</a><br>\n 首先用邮箱注册一个账号，接着进入 My Zones，点击 Create New Zone，在 Name 里输入你想要的网址名称和后缀类型，下面的地址可以先点击 Set current address，这样网页就会填入你的外网 IP 地址（应注意检查，ipv4 基本不会是跟电脑一致，但 ipv6 需要一致）。<br>\n<img src=\"../_resources/8007661dd2ee4a33be77ca500ec41a76.png\" alt=\"8007661dd2ee4a33be77ca500ec41a76.png\"></p>\n<p>点击创建后，若网址没有冲突，则创建成功；直接点击这个域名，上面有两个选项是可以自己修改的：status 和 records。</p>\n<h2 id=\"创建dns记录\"><a class=\"markdownIt-Anchor\" href=\"#创建dns记录\">#</a> 创建 DNS 记录</h2>\n<p>在 Status 里，点击 Edit Zone，将 ipv6 地址再次设为你的公网 ipv6 并保存，这样主域名就会直接解析到你的电脑上；<br>\n在 Records 里，可以编辑或删除现有的 AAAA 记录，也可以新增其他 DNS 记录。</p>\n<h3 id=\"创建子域名\"><a class=\"markdownIt-Anchor\" href=\"#创建子域名\">#</a> 创建子域名</h3>\n<p>点击 Add Record，选择 AAAA 类型（A 是 ipv4，AAAA 是 ipv6，CNAME 是网站别名一般用不到），前面的 name 里填写子域名前缀（<a href=\"http://xn--web-th2ek25abiifsffvwu74d.domainname.dynv6.net\">比如我要创建 web.domainname.dynv6.net</a>，那就在这里写 web），后面的地址里填写目标 ipv6 即可。</p>\n<hr>\n<h2 id=\"设置ddns自动更新\"><a class=\"markdownIt-Anchor\" href=\"#设置ddns自动更新\">#</a> 设置 DDNS 自动更新</h2>\n<p>提示：建议将此脚本部署于 Windows 服务器上，而非自己的电脑</p>\n<h3 id=\"下载wget和grep\"><a class=\"markdownIt-Anchor\" href=\"#下载wget和grep\">#</a> 下载 wget 和 grep</h3>\n<p>网上很多教程，这里列两个：<br>\n<a href=\"https://www.cnblogs.com/shenxiaolin/p/16662793.html\">windows 下 grep 的安装与使用</a><br>\n<a href=\"https://www.jianshu.com/p/a8dfc762ba3b\"> win10 安装 wget</a><br>\n 记得检查好环境变量，确定 cmd 下运行这两个命令有输出。</p>\n<h3 id=\"下载instsrvexe和srvanyexe\"><a class=\"markdownIt-Anchor\" href=\"#下载instsrvexe和srvanyexe\">#</a> 下载 instsrv.exe 和 srvany.exe</h3>\n<p><a href=\"https://www.cnblogs.com/zhaiqianfeng/p/4622561.html\">利用 instsrv 和 srvany 来手动安装服务</a></p>\n<h3 id=\"编写脚本\"><a class=\"markdownIt-Anchor\" href=\"#编写脚本\">#</a> 编写脚本</h3>\n<ol>\n<li>在特定路径下创建文件夹，将上述 instsrv.exe、srvany.exe 以及后续脚本均放在此处；</li>\n<li>创建 install_server.bat 文件：</li>\n</ol>\n<pre><code class=\"hljs bat\">@<span class=\"hljs-built_in\">echo</span> off\n<span class=\"hljs-built_in\">set</span> curexe=%~dp0\n<span class=\"hljs-built_in\">cd</span> /d <span class=\"hljs-variable\">%curexe%</span>\n&quot;<span class=\"hljs-variable\">%curexe%</span>instsrv.exe&quot; ddns_dynv6 &quot;<span class=\"hljs-variable\">%curexe%</span>srvany.exe&quot;\n@<span class=\"hljs-built_in\">echo</span> ddns_dynv6 服务添加完成\n\n@<span class=\"hljs-built_in\">echo</span> 修改服务路径\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\">REM 添加注册表语法: reg add 注册表路径 /v 项名称 /t 值类型 /d 数据 /f 表示强行修改不提示</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\">REM 名称 Application 值为你要作为服务运行的程序地址 /d对应的参数有斜杠不是为了转义引号，而是路径还有斜杠，默认将引号转义了，额外添加斜杠是为了保留引号</span>\n \n<span class=\"hljs-built_in\">set</span> regpath=HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\ddns_dynv6\\Parameters\\\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\">REM 名称 AppDirectory 值为你要作为服务运行的程序所在文件夹路径</span>\nreg add <span class=\"hljs-variable\">%regpath%</span> /v AppDirectory /t REG_SZ /d &quot;<span class=\"hljs-variable\">%curexe%</span>\\&quot; /f\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\">REM 名称 AppParameters 值为你要作为服务运行的程序启动所需要的参数</span>\nreg add <span class=\"hljs-variable\">%regpath%</span> /v Application /t REG_SZ /d &quot;<span class=\"hljs-variable\">%curexe%</span>dynv6.bat&quot; /f\n \n<span class=\"hljs-built_in\">net</span> <span class=\"hljs-built_in\">start</span> ddns_dynv6\n \n<span class=\"hljs-built_in\">pause</span></code></pre>\n<ol start=\"3\">\n<li>创建 remove_server.bat 文件：</li>\n</ol>\n<pre><code class=\"hljs bat\">@<span class=\"hljs-built_in\">echo</span> off\n<span class=\"hljs-built_in\">net</span> stop ddns_dynv6\ninstsrv ddns_dynv6 remove\n<span class=\"hljs-built_in\">pause</span></code></pre>\n<ol start=\"4\">\n<li>创建 dynv6.bat 文件：</li>\n</ol>\n<pre><code class=\"hljs bat\">@<span class=\"hljs-built_in\">echo</span> off\n@<span class=\"hljs-built_in\">set</span> tempnum=\n@<span class=\"hljs-built_in\">set</span> ipaddr=\n@<span class=\"hljs-built_in\">set</span> oldipaddr=<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">1</span>\n<span class=\"hljs-comment\">rem domain=你注册的域名（dynv6.net 提供多种域名后缀可自行修改）</span>\n@<span class=\"hljs-built_in\">set</span> domain=【在这里填写你记录的域名，填zone名称】\n<span class=\"hljs-comment\">rem token=你注册后的钥匙（dynv6.net 提供）</span>\n@<span class=\"hljs-built_in\">set</span> token=【在这里填写你的token，把这段文字和括号删掉然后粘贴】\n@<span class=\"hljs-built_in\">set</span> IPV6_REGEX=&quot;\\(\\([<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">9</span>A-Fa-f]\\&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">4</span>\\&#125;:\\)\\&#123;<span class=\"hljs-number\">1</span>,\\&#125;\\)\\(\\([<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">9</span>A-Fa-f]\\&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">4</span>\\&#125;\\)\\&#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>\\&#125;\\)\\(\\(:[<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">9</span>A-Fa-f]\\&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">4</span>\\&#125;\\)\\&#123;<span class=\"hljs-number\">1</span>,\\&#125;\\)&quot;\n@<span class=\"hljs-built_in\">set</span> IPV4_REGEX=&quot;[<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">9</span>]\\&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>\\&#125;\\.[<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">9</span>]\\&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>\\&#125;\\.[<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">9</span>]\\&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>\\&#125;\\.[<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">9</span>]\\&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>\\&#125;&quot;\n@<span class=\"hljs-built_in\">set</span> URL=&quot;https://dynv6.com/api/update?hostname=<span class=\"hljs-variable\">%domain%</span>&amp;token=<span class=\"hljs-variable\">%token%</span>&amp;ipv4=<span class=\"hljs-variable\">%%i</span>paddr<span class=\"hljs-variable\">%%&quot;</span>\n@<span class=\"hljs-built_in\">set</span> URLV6=&quot;https://dynv6.com/api/update?hostname=<span class=\"hljs-variable\">%domain%</span>&amp;token=<span class=\"hljs-variable\">%token%</span>&amp;ipv6=<span class=\"hljs-variable\">%%i</span>paddr<span class=\"hljs-variable\">%%&amp;</span>ipv6prefix=<span class=\"hljs-variable\">%%i</span>paddr<span class=\"hljs-variable\">%%&quot;</span>\n@<span class=\"hljs-built_in\">set</span> BIN=wget -t <span class=\"hljs-number\">2</span> --prefer-family=IPv6 --no-dns-cache --no-check-certificate\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\">rem ***ipv4***（dynv6也提供ipv4动态域名服务）</span>\n<span class=\"hljs-comment\">rem for /F %%i in (&#x27;nslookup %domain% ns1.dynv6.com ^|grep -m2 -o %IPV4_REGEX%&#x27;) do ( set oldipaddr=%%i)</span>\n<span class=\"hljs-comment\">rem ***ipv6***</span>\n<span class=\"hljs-keyword\">for</span> /F <span class=\"hljs-variable\">%%i</span> <span class=\"hljs-keyword\">in</span> (&#x27;nslookup -qt^=AAAA <span class=\"hljs-variable\">%domain%</span> ns1.dynv6.com ^|grep -m2 -o <span class=\"hljs-variable\">%IPV6_REGEX%</span>&#x27;) <span class=\"hljs-keyword\">do</span> ( <span class=\"hljs-built_in\">set</span> oldipaddr=<span class=\"hljs-variable\">%%i</span>)\n \n@<span class=\"hljs-built_in\">echo</span> Current <span class=\"hljs-variable\">%domain%</span> IP Add:<span class=\"hljs-variable\">%oldipaddr%</span>\n \n:start_ip1\n<span class=\"hljs-comment\">rem @cls</span>\n@<span class=\"hljs-built_in\">echo</span> ... \n@<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-number\">1</span>.####从ip.sb获得地址####\n@<span class=\"hljs-built_in\">set</span> ip6addr=null\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\">REM ***ipv6***</span>\n<span class=\"hljs-keyword\">for</span> /F <span class=\"hljs-variable\">%%i</span> <span class=\"hljs-keyword\">in</span> (&#x27;<span class=\"hljs-variable\">%BIN%</span> -O- http://ip.sb  ^|grep -m <span class=\"hljs-number\">1</span> -o <span class=\"hljs-variable\">%IPV6_REGEX%</span>&#x27;) <span class=\"hljs-keyword\">do</span> (<span class=\"hljs-built_in\">set</span> ipaddr=<span class=\"hljs-variable\">%%i</span>)\n \n<span class=\"hljs-keyword\">if</span> &quot;<span class=\"hljs-variable\">%ipaddr%</span>&quot; == &quot;null&quot; (\n<span class=\"hljs-built_in\">echo</span> 没有IPV6地址或获得IPV6地址失败\ntimeout <span class=\"hljs-number\">5</span>\n<span class=\"hljs-keyword\">goto</span> start_ip2\n) <span class=\"hljs-keyword\">else</span> (\n<span class=\"hljs-built_in\">echo</span> 获得IP地址:<span class=\"hljs-variable\">%ipaddr%</span>，旧IP地址:<span class=\"hljs-variable\">%oldipaddr%</span>\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">NOT</span> &quot;<span class=\"hljs-variable\">%oldipaddr%</span>&quot; == &quot;<span class=\"hljs-variable\">%ipaddr%</span>&quot; (\n<span class=\"hljs-built_in\">echo</span> ---更新IP---\n<span class=\"hljs-keyword\">goto</span> update_web_ip\n) <span class=\"hljs-keyword\">else</span> (\n<span class=\"hljs-built_in\">echo</span> IP没有改变\ntimeout <span class=\"hljs-number\">300</span>\n<span class=\"hljs-built_in\">cls</span>\n<span class=\"hljs-keyword\">goto</span> start_ip2\n))\n \n:start_ip2\n@<span class=\"hljs-built_in\">ipconfig</span> /flushdns\n@<span class=\"hljs-built_in\">echo</span> ...\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-number\">2</span>.####从checkip.dyndns.com获得地址####\n@<span class=\"hljs-built_in\">set</span> ipaddr=null\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\">REM ***ipv4***</span>\n<span class=\"hljs-comment\">rem for /F %%i in (&#x27;%BIN% -O- http://checkip.dyndns.com ^|grep -m 1 -o %IPV4_REGEX%&#x27;) do (set ipaddr=%%i)</span>\n<span class=\"hljs-comment\">REM ***ipv6***</span>\n<span class=\"hljs-keyword\">for</span> /F <span class=\"hljs-variable\">%%i</span> <span class=\"hljs-keyword\">in</span> (&#x27;<span class=\"hljs-variable\">%BIN%</span> -O- http://checkipv6.dyndns.com ^|grep -m <span class=\"hljs-number\">1</span> -o <span class=\"hljs-variable\">%IPV6_REGEX%</span>&#x27;) <span class=\"hljs-keyword\">do</span> (<span class=\"hljs-built_in\">set</span> ipaddr=<span class=\"hljs-variable\">%%i</span>)\n \n<span class=\"hljs-keyword\">if</span> &quot;<span class=\"hljs-variable\">%ipaddr%</span>&quot; == &quot;null&quot; (\n<span class=\"hljs-built_in\">echo</span> 没有IP地址或获得IP地址失败\ntimeout <span class=\"hljs-number\">5</span>\n<span class=\"hljs-keyword\">goto</span> start_ip1\n) <span class=\"hljs-keyword\">else</span> (\n<span class=\"hljs-built_in\">echo</span> 获得IP地址:<span class=\"hljs-variable\">%ipaddr%</span>，旧IP地址:<span class=\"hljs-variable\">%oldipaddr%</span>\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">NOT</span> &quot;<span class=\"hljs-variable\">%oldipaddr%</span>&quot; == &quot;<span class=\"hljs-variable\">%ipaddr%</span>&quot; (\n<span class=\"hljs-built_in\">echo</span> ---更新IP---\n<span class=\"hljs-keyword\">goto</span> update_web_ip\n) <span class=\"hljs-keyword\">else</span> (\n<span class=\"hljs-built_in\">echo</span> IP没有改变\ntimeout <span class=\"hljs-number\">300</span>\n<span class=\"hljs-built_in\">cls</span>\n<span class=\"hljs-keyword\">goto</span> start_ip2\n))\n \n \n:update_web_ip\n@<span class=\"hljs-built_in\">echo</span> ==============================================\n@<span class=\"hljs-built_in\">echo</span> ipaddr=&quot;<span class=\"hljs-variable\">%ipaddr%</span>&quot;\n@<span class=\"hljs-built_in\">echo</span> ==============================================\n@<span class=\"hljs-built_in\">set</span> var=null\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\">REM ***ipv4***</span>\n<span class=\"hljs-comment\">rem for /F &quot;tokens=*&quot; %%i in (&#x27;%BIN% -O- %URL%&#x27;) do (set var=%%i)</span>\n<span class=\"hljs-comment\">REM ***ipv6***</span>\n<span class=\"hljs-keyword\">for</span> /F &quot;tokens=*&quot; <span class=\"hljs-variable\">%%i</span> <span class=\"hljs-keyword\">in</span> (&#x27;<span class=\"hljs-variable\">%BIN%</span> -O- <span class=\"hljs-variable\">%URLV6%</span>&#x27;) <span class=\"hljs-keyword\">do</span> (<span class=\"hljs-built_in\">set</span> var=<span class=\"hljs-variable\">%%i</span>)\n \n<span class=\"hljs-built_in\">echo</span> 更新信息=<span class=\"hljs-variable\">%var%</span>\n<span class=\"hljs-keyword\">if</span> &quot;<span class=\"hljs-variable\">%var%</span>&quot; == &quot;addresses updated&quot; <span class=\"hljs-keyword\">goto</span> end\n<span class=\"hljs-built_in\">echo</span> 更新失败\ntimeout <span class=\"hljs-number\">120</span>\n<span class=\"hljs-keyword\">goto</span> start_ip2\n \n:end\n<span class=\"hljs-built_in\">set</span> oldipaddr=<span class=\"hljs-variable\">%ipaddr%</span>\n<span class=\"hljs-built_in\">echo</span> 更新数据成功\ntimeout <span class=\"hljs-number\">300</span>\n<span class=\"hljs-keyword\">goto</span> start_ip2\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\">REM 以上每个TIMEOUT指令都表示等待一定时间（秒），可以按实际情况修改</span>\n<span class=\"hljs-comment\">REM 我这里的300秒应该是够用的，太短了占用过多资源，太长了更新不及时</span></code></pre>\n<h2 id=\"开机自启动\"><a class=\"markdownIt-Anchor\" href=\"#开机自启动\">#</a> 开机自启动</h2>\n<p>创建一个计划任务即可，详情可百度教程</p>\n",
            "tags": [
                "游戏",
                "网络"
            ]
        },
        {
            "id": "https://zjxdiu.github.io/blog/Network_progress_CSUST/",
            "url": "https://zjxdiu.github.io/blog/Network_progress_CSUST/",
            "title": "长沙理工大学无线网络多设备共享解决方案",
            "date_published": "2023-02-24T14:07:00.000Z",
            "content_html": "<h2 id=\"引用\"><a class=\"markdownIt-Anchor\" href=\"#引用\">#</a> 引用</h2>\n<p>本文大部分内容可参考：<br>\n<a href=\"https://www.mr-cn.net/2021/06/15/Share-your-network-in-CSUST/\">长沙理工大学：校园网解除共享限制</a><br>\n路由器刷机参考教程（非本次使用）：<br>\n<a href=\"https://www.right.com.cn/FORUM/thread-489907-1-1.html\">极路由 Enjoy 1200  HC5861B OpenWRT 固件 Rosy 主题</a><br>\n如何下载固件：<br>\n<a href=\"http://opt.cn2qq.com/padavan/\">padavan 固件下载列表</a></p>\n<h2 id=\"原因与现象\"><a class=\"markdownIt-Anchor\" href=\"#原因与现象\">#</a> 原因与现象</h2>\n<p>为了维护运营商利益，校园网设置了一些检测与规则，对同时登录校园网的设备数量作出了严格的限制，并且不允许终端用户进行网络共享。<br>\n具体表现为，当用户使用电脑、手机等的热点、无线信号桥等方法时，只要有第二台设备联网，就会在一定条件下被检测发现，随后此账号将无法访问网络，并自动将网页重定向到登录界面（或 1.1.1.3，但这个页面不能加载出来）。</p>\n<h2 id=\"原理\"><a class=\"markdownIt-Anchor\" href=\"#原理\">#</a> 原理</h2>\n<p>根据引用文章，可以得知共享检测主要通过 80 端口下的 HTTP 报文中浏览器 UA 的区别来实现，可以看到这个限制条件比较多，而且检测周期并不短；因此会出现稳定共享的时间时长时短的现象。<br>\n此外，还可能会通过其他方法检测，包括但不限于 TTL、IPID、侵入式检测等等。</p>\n<h2 id=\"准备工作\"><a class=\"markdownIt-Anchor\" href=\"#准备工作\">#</a> 准备工作</h2>\n<p>为实现稳定的校园网共享，首先需要选择正确的系统：必须使用 OpenWRT 或 Pavanda 等软路由系统。<br>\n本文基于 Pavanda 操作。</p>\n<h3 id=\"路由选型\"><a class=\"markdownIt-Anchor\" href=\"#路由选型\">#</a> 路由选型</h3>\n<p>如果你还没有软路由或者合适的路由器，那么选购路由器就是第一步了。我最终的选择是二手极路由 Enjoy 1200，型号 HC5861B。极路由虽然已经倒闭，但它的产品可玩性和性价比确实是相对较好的。<br>\n淘宝入手价格 40 元，由商家代刷 Breed。<br>\n需要注意的是，这一款路由器不支持 USB，电源接口也是 12V DC 而非 5V Micro-USB，如果有这两个功能需求的话可以考虑极路由 3 或其他产品。</p>\n<h3 id=\"检查与刷机\"><a class=\"markdownIt-Anchor\" href=\"#检查与刷机\">#</a> 检查与刷机</h3>\n<p>收货后先简单清理积灰，检查网口是否有积聚大量灰尘，天线是否正常连接、旋转。<br>\n随后插入电源开机，连接电脑网口到路由器 LAN 1 口，等待 IP 自动配置完成，进入默认网关的地址（本次为 192.168.132.1，极路由原厂固件可能为 192.168.199.1）<br>\n使用默认的管理员账号密码（admin）登录后，发现这台机器已经刷好了老毛子固件（Padavan）了：<br>\n<img src=\"../_resources/54de7cdf47ce563bb65d5c42e282e331.png\" alt=\"54de7cdf47ce563bb65d5c42e282e331.png\"><br>\n 所以省下了很多时间，虽然我的计划是使用 OpenWrt，但 Padavan 本质上是一样的。<br>\n如果需要刷机教程，请参考引用文章，或直接搜索路由型号 + OpenWrt，即可找到一些刷机教程。</p>\n<h2 id=\"网络拓扑\"><a class=\"markdownIt-Anchor\" href=\"#网络拓扑\">#</a> 网络拓扑</h2>\n<p><img src=\"../_resources/15828e53952c884a9b9f9f1cc11b7c77.png\" alt=\"15828e53952c884a9b9f9f1cc11b7c77.png\"><br>\n 我的目标是达成这样的拓扑，实际上就是一个无线 “路由”，也就是将无线信号作为 WAN，执行 NAT 和防火墙规则后建立子网，设备均接入子网中。</p>\n<h2 id=\"基础配置\"><a class=\"markdownIt-Anchor\" href=\"#基础配置\">#</a> 基础配置</h2>\n<h3 id=\"路由器接入无线网络\"><a class=\"markdownIt-Anchor\" href=\"#路由器接入无线网络\">#</a> 路由器接入无线网络</h3>\n<p>直接参考这张图即可：<br>\n<img src=\"../_resources/d6035076edef8fc78299e3af690eea62.png\" alt=\"d6035076edef8fc78299e3af690eea62.png\"><br>\n2.4G 和 5G 只能有一个用于 AP-Client，另一个必须禁用桥接。<br>\n需要注意的是，路由器需要用一个频段接入校园网，另一个频段用于发射信号；虽然可以选择 client+AP 来实现单频复用，实际上只用 5GHz 的话效果也不错，但我收到的这台路由器不知道为何 5G 能力极其孱弱（无遮挡 50cm 距离下 client 都不能跑满协商速率），而 2.4G 能力极强（对周围的无线鼠标、蓝牙手柄等造成严重干扰），因此这里不使用这种方法。<br>\n<strong>补充：后面换了一台 JCG Q20，TB 到手 60 块，不仅支持 WiFi6 而且性能远强于前面买的极路由，有需要的同学可以参考购买。这玩意就完全可以 5GHz 同时用于 client 和 AP 了，2.4GHz 只用来保留兼容性即可。</strong></p>\n<p><strong>懒得删改的原文：</strong><br>\n<em>这里还涉及到频段的选择，最开始我使用 2.4G 接入校园网、5G 用于共享，但随后我发现无线鼠标的工作会受到较严重的干扰（接收器也工作在 2.4G 频率上），因此后续改为 5G 接入、2.4G 共享。<br>\n此外，网络性能也是一个需要关心的重点，5GHz 总能提供更优秀的表现，但这里我们只能用于一个目的；由于我平时主要使用电脑上网，而电脑是通过网线连接到路由器的，因此选择 5G 接入是更好的。实际上，这种情况下 2.4G 的表现也不差，宿舍面积小、干扰少，多次测试下来延迟在 30ms 以内，速度 8-9MB/s，可以满足 1080P 视频观看和正常游戏。</em></p>\n<h3 id=\"修改网络配置\"><a class=\"markdownIt-Anchor\" href=\"#修改网络配置\">#</a> 修改网络配置</h3>\n<p>如果对内网网段不敏感（例如你只想要正常上网，平时不开发网页、软件、游戏、不做任何测试，那么这一段可以跳过）<br>\n在左侧选择外部网络（WAN），可参考下图配置：<br>\n<img src=\"../_resources/e613ab56c89c86b939bf67ab5601fc42.png\" alt=\"e613ab56c89c86b939bf67ab5601fc42.png\"></p>\n<p>LAN 配置同理，设置想要的网段、DNS、静态路由等。</p>\n<h2 id=\"通过nat连接ipv6\"><a class=\"markdownIt-Anchor\" href=\"#通过nat连接ipv6\">#</a> 通过 NAT 连接 ipv6</h2>\n<p>由于我希望使用到正常的 ipv6，故单独在此写出方案；对于绝大多数日常网络而言，关闭 ipv6 可能反而有助于提高稳定性。<br>\n参考文章：<a href=\"https://post.smzdm.com/p/ad9qkz9k/\">校园网环境下 Openwrt 配置 ipv6 教程 —— 以 nat6 为例</a></p>\n<ul>\n<li>\n<p>NAT 是什么？<br>\nNAT 是最早出现在 ipv4 中的技术；由于 ipv4 地址空间有限（总约 42 亿个），无法满足爆炸式增长的网络设备入网需求，因此出现了网络地址转换（Network Address Translation）技术；它的作用就是缓解 ipv4 地址消耗，尽量在 ipv6 部署完全之前满足原有上网需求。<br>\n它的工作原理很简单，我们平时使用路由器上网的时候就至少会有一次 NAT 过程，路由器将一个外网（全球唯一）的地址映射到多个内网地址（通常为 192.168.x.x 或 10.x.x.x），这样一个路由器下的设备就可以共用一个外网 IP，大幅缓解了地址消耗，同时解决了耗尽的影响。<br>\nNAT 有助于提高网络安全性，因为路由器上可以部署非常高效的防火墙，也可以天然阻断所有传入连接，但这样的技术也会带来问题；最大的问题无疑就是点对点连接变得不可能，因此游戏联机、网站建设等都会变得很困难。<br>\n在我的使用场景下，Minecraft 联机是最常见的点对点连接应用，此前的解决方案均为 FRP 内网穿透（见前文章）。</p>\n</li>\n<li>\n<p>为什么我一定要有 ipv6 连接？<br>\n很简单，ipv6 地址池极大，运营商也并未刻意限制用户的 ipv6 访问（至少我没有遇到过哪个运营商在 ipv6 上用 NAT 的）<strong>（但是教育网除外）</strong>。<br>\n因此，大多数用户只要开启了 ipv6，就能获取到公网 IP。这对于点对点连接来说无疑是非常有帮助的。</p>\n</li>\n<li>\n<p>教育网干了什么？<br>\n一般运营商在家用、商用宽带里分配的 ipv6 都带有一个 / 64 的前缀，这意味着路由器拿到的地址里面还包含了大量的可用地址（约 1800 万兆个地址；1 兆 = 1 万亿（也就是 18446744073709551616）），用于给后续设备分配 ipv6 地址；<br>\n但教育网的 ipv6 则直接分配了 / 128 的地址，这就意味着它给你的地址只能用于一台设备。也就是说，想要共享 ipv6，必须使用 NAT。</p>\n</li>\n</ul>\n<h3 id=\"如何使用napt66\"><a class=\"markdownIt-Anchor\" href=\"#如何使用napt66\">#</a> 如何使用 NAPT66</h3>\n<p>NAPT66 模块是 padavan 使用的一个解决方案，所谓 NAPT 其实是现在 NAT 的正确称呼，也就是 Network Address Port Translation。因为一对多 NAT 的情况下涉及到端口转换，相当于用端口数换 IP 数，所以 NAPT 才是准确的说法。<br>\n请按照你的路由器型号查找最新的 padavan 固件，并进行固件更新；在新版 PDCN 固件中直接内置了 NAPT66 的一键开关和配置，只需在 ipv6 设置页面底部点击一键填写配置，然后重启路由器和电脑网卡即可使用。</p>\n<hr>\n<h2 id=\"更多参考信息\"><a class=\"markdownIt-Anchor\" href=\"#更多参考信息\">#</a> 更多参考信息</h2>\n<p>如果你的路由器使用的固件特殊，没有内置一键 NAPT66，则可参考：<a href=\"https://doge.uk/coding/padavan-ipv6-napt66.html\">Padavan 路由下使用 NAPT66 模块访问移动 IPV6 网络</a></p>\n",
            "tags": [
                "网络"
            ]
        },
        {
            "id": "https://zjxdiu.github.io/blog/ipv6_toss/",
            "url": "https://zjxdiu.github.io/blog/ipv6_toss/",
            "title": "记一次折腾电信ipv6中的各种问题",
            "date_published": "2023-01-20T13:37:00.000Z",
            "content_html": "<p>阅前提示：本文约 5000 字，预计阅读时长 &gt; 5 分钟。</p>\n<h2 id=\"起因\"><a class=\"markdownIt-Anchor\" href=\"#起因\">#</a> 起因</h2>\n<p>由于想跟好友联机 minecraft，而使用 natfrp 做内网穿透时发现有很多问题，包括延迟高且不稳定、速率低、流量限制、高峰时期断连等。刚好想起来家里的网络已经被我启用了 ipv6，因此试图使用 ipv6 来直接对公网开放 minecraft 服务器。</p>\n<h2 id=\"开始第一次尝试\"><a class=\"markdownIt-Anchor\" href=\"#开始第一次尝试\">#</a> 开始第一次尝试</h2>\n<p><strong>当前状态：</strong></p>\n<ul>\n<li>光猫使用路由模式，自主拨号并获取两种 ip 地址（除非特殊说明，否则以下简称 ip）</li>\n<li>无线路由器（下简称路由器）使用路由模式</li>\n<li>所有设备连接在路由器上，并能获取到 ip</li>\n</ul>\n<p><img src=\"../_resources/a941e7dad288e2bd65c297c76503f111.png\" alt=\"a941e7dad288e2bd65c297c76503f111.png\"></p>\n<p><strong>当前问题：</strong></p>\n<ul>\n<li>首先尝试外网直接连接服务器 ipv6，失败</li>\n<li>外网无法 ping 通任何内网主机</li>\n<li>光猫获取到的 ipv6 地址仍然无法通过外网 ping 通</li>\n<li>在光猫中设置端口映射或 DMZ 主机，无效</li>\n</ul>\n<p>实际上，上述内容已经花了我一下午来检查和排查；网上搜索相关内容，有人说<s>获取到的 ipv6 是 240e 开头的，说明是经过了 NAT（类似 ipv4，所以肯定访问不到）</s>；但是这种说法显然有问题，首先 ipv6 只有在特殊环境下才需要 NAT，其次 2 开头的地址至少不是内网地址。<br>\n另有说法称，运营商（我用的是电信）会用防火墙屏蔽入站流量，防止你开服务器。根据我的实验，这个说法是正确的。</p>\n<p>随后开始折腾，既然防火墙阻碍了我，那我关掉就好。<br>\n但是现实很惨淡，运营商早就猜到你会搞这一手，所以直接不允许你关闭防火墙。<br>\n这里包括了最后的那个防止 ICMP 包攻击，还有其他的防火墙直接不显示。<br>\n<img src=\"../_resources/7d186301818af5165a407c1751fb848c.png\" alt=\"7d186301818af5165a407c1751fb848c.png\"></p>\n<h3 id=\"换个地方拨号\"><a class=\"markdownIt-Anchor\" href=\"#换个地方拨号\">#</a> 换个地方拨号？</h3>\n<p>网上提供了一种解决思路，即光猫改桥接、使用路由器进行拨号；这样做有一些好处，例如路由器的性能更强、可以提供更快的网速，以及很高的可玩性、灵活性等等，这里直接把路由器换成软路由就能实现非常多的玩法，因此我就着手开始改桥接。</p>\n<p>改的过程实际上非常简单，找到宽带的账号密码，进入光猫的超级用户，然后直接改桥接即可。<br>\n<img src=\"../_resources/bc81d148f88500f57dbadabcf8080770.png\" alt=\"bc81d148f88500f57dbadabcf8080770.png\"></p>\n<hr>\n<p>随后，将路由器设置为 PPPoE 拨号连接；这里就不放图了，各家路由器的配置流程都是一回事。<br>\n关闭路由器的防火墙，现在，所有的设备又能重新获取到 ip，且具有公网 ipv6 地址。当然由于 Windows 防火墙的配置，需要关闭 Windows 的防火墙才能从外网 ping 通。<br>\n大获全胜！网速也提升到了 570M（家里办理的 500M 宽带，如果直接从光猫拨号 + 路由，则速度最高 470M）<br>\n<img src=\"../_resources/cbdb76297f0af4d4d3837f421060eb67.png\" alt=\"cbdb76297f0af4d4d3837f421060eb67.png\"></p>\n<p>同时，Minecraft 也能正常从外网通过 ipv6 连接，看起来一切完美。</p>\n<hr>\n<h2 id=\"核心问题网页无法访问\"><a class=\"markdownIt-Anchor\" href=\"#核心问题网页无法访问\">#</a> 核心问题：网页无法访问</h2>\n<p>一切完美？当然是不可能的。一定会出问题，而且是大问题。<br>\n配置好 ipv6 之后，一开始所有设备工作正常，网速和解析速度起飞。<br>\n然后，用了半个小时左右，问题开始逐步显现。<br>\n最开始，我在网上搜索一个 Windows 方面的配置问题，并且点进去了一个博客园的链接。然后，网页并没有按照我预想中的那样飞快加载，而是不断转圈。<br>\n最后：<br>\n<img src=\"../_resources/84c01f9cc1ebf56595e7d025fc4a0617.png\" alt=\"84c01f9cc1ebf56595e7d025fc4a0617.png\"></p>\n<p>一开始我以为这是必应的中转链接出现问题了（百度日常），因为点击必应的搜索结果并不是直接访问目标网址，而是先通过一个必应的链接重定向到目标。这个重定向有时候会失败，是正常的。但是，我直接访问目标网址时，居然也不能进去，这就非常奇怪了。<br>\n这时候我还是乐观的心态，认为是博客园的服务器出了问题，也没有去其它设备上尝试。但我仍然重视了这个问题，并立即去搜索解决方法。因为是开了路由器拨号 + ipv6 之后才出现的问题，所以查找方向也很明确了。结果，就在我查找的过程中，发现了更多的问题。<br>\n百度经验、百度知道、百度贴吧、知乎… 这些网站一个接一个地挂掉；有时候网站一开始能正常访问，再开的时候就加载不出 JS 和 CSS（变成了没有渲染的样式，仅限知乎），然后就是一样的不响应。症状跟博客园完全一致，控制台里没有任何有效信息，只有一个响应超时。</p>\n<hr>\n<h3 id=\"先恢复正常访问\"><a class=\"markdownIt-Anchor\" href=\"#先恢复正常访问\">#</a> 先恢复正常访问</h3>\n<p>一通摸索之后，我找到了暂时恢复的方法：在网卡选项里禁用 ipv6（Internet 协议版本 6）。<br>\n禁用后，所有网页恢复正常，但这显然不可取，因为我的目的就是使用 ipv6，而禁用它也就丧失了所有 ipv6 能力。<br>\n需要注意的是，现在出问题的网站都不是纯 ipv6 站点，有些是纯 ipv4 站点，但双栈域名居多。这时候访问纯 ipv6 网站是全部成功的，ipv6 测试也是全绿通过，并且无论何种类型的网站都有大量能成功访问的。</p>\n<h3 id=\"退一步试试\"><a class=\"markdownIt-Anchor\" href=\"#退一步试试\">#</a> 退一步试试</h3>\n<p>退一步，指的就是我找到一种方法，让浏览器只使用或优先使用 ipv4 进行访问。<br>\n因为出问题的只有浏览器，我电脑里其它软件全都正常运行。<br>\n<em>后续补充：今天发现 Windows 版的微信也不能正常使用，二维码加载不出来，禁用 ipv6 后恢复。</em>。<br>\n但是，网上相关的教程极少甚至没有，偶有几个是针对 Firefox 或 chrome 的，而我使用的是 edge；就算我能参考 chrome，教程也是针对 Linux 而非 Windows。</p>\n<h3 id=\"再退一步\"><a class=\"markdownIt-Anchor\" href=\"#再退一步\">#</a> 再退一步</h3>\n<p>好的，如果浏览器不行，那我就找个方法让整个操作系统都优先使用 ipv4。<br>\n微软提供了一个文档，通过<a href=\"https://learn.microsoft.com/en-US/troubleshoot/windows-server/networking/configure-ipv6-in-windows\">修改注册表的方法</a>来实现全局优先 ipv4、禁用 ipv6、优先 ipv6 等等。<br>\n一看到这里，我立即兴奋地尝试了。改了注册表，重启，访问：</p>\n<p><code>ERR_TIMED_OUT</code>  .png</p>\n<p>好，居然没用。微软，不愧是你。<br>\n重启很多次无效，当时已经半夜 2:30，我没有了折腾的心情，只想赶紧睡觉。</p>\n<h2 id=\"第一次折腾失败\"><a class=\"markdownIt-Anchor\" href=\"#第一次折腾失败\">#</a> 第一次折腾失败</h2>\n<p>网上又找了很多相同症状的用户，解决方案要么是改注册表，要么是说路由器兼容性有问题。<br>\n好吧，反正跟我联机的同学也不是很在意，natfrp 似乎还能继续用用。<br>\n于是，彻底宣告失败，我重新改回了光猫拨号、路由桥接，随后所有网络恢复正常（除了外网还是不能访问这里的所有 ipv6；当然，也包括 ipv4，因为有 NAT）。</p>\n<p>这就结束了吗？怎么可能，不搞到好用我是不会罢休的。<br>\n于是，第二天，我又开始了新一轮的折腾。</p>\n<hr>\n<h2 id=\"第二次尝试\"><a class=\"markdownIt-Anchor\" href=\"#第二次尝试\">#</a> 第二次尝试</h2>\n<p>重新尝试，同样的光猫改桥接，同样的路由器拨号。同样的正常 ipv6 公网访问，但是这一次似乎是运气比较好，网页访问全部正常使用，并且坚持了至少 4 个小时。<br>\n中途离家 4 小时，回来之后，惊喜地发现，这些网页又打不开了 😃<br>\n这时候我就已经明白，无论怎么修改电脑或者路由器配置都无效，于是没有再做尝试，转而对现在的情况进行分析，并希望通过其它方法解决需求。</p>\n<h3 id=\"转机\"><a class=\"markdownIt-Anchor\" href=\"#转机\">#</a> 转机</h3>\n<p>在我整理思路的时候，我意识到，实际上我只需要服务器一台电脑能够获取正常入站的 ipv6 地址（正常的 ipv6）即可，其余设备甚至根本不需要启用 ipv6。这时候，我首先想到的就是：</p>\n<h4 id=\"一号多拨\"><a class=\"markdownIt-Anchor\" href=\"#一号多拨\">#</a> 一号多拨</h4>\n<p>一号多拨，指的是我通过同一个光猫，使用同一个宽带账号，分别在两台设备上进行拨号。<br>\n我的最初想法是，服务器电脑直连光猫并自己拨号获取正常的 ipv6 地址，同时路由器也自己拨号，但只启用 ipv4。<br>\n网上搜索发现，这种方法当然是可行的，前提是运营商支持多拨。</p>\n<p><code>折腾中</code></p>\n<p>没有任何侥幸，拨号失败。电脑上尝试第二次拨号时直接返回错误 629。</p>\n<p>再换一种角度，重新分析我的需求。服务器能使用正常的 ipv6，同时其余设备仅需要 ipv4（最多需要 ipv6 内网而非公网访问）。因此，我做了如下操作，来使得二者兼顾。</p>\n<hr>\n<h2 id=\"最终如何解决\"><a class=\"markdownIt-Anchor\" href=\"#最终如何解决\">#</a> 最终如何解决</h2>\n<p>如果你的需求和遇到的问题跟我完全一样，那么也许可以参考我的方法来临时解决。<br>\n<strong>提示：最终的解决方案也并不完美，只不过暂时保证了两边可以都解决主要矛盾</strong><br>\n以下是我的解决方案：</p>\n<h3 id=\"1-将路由器的内网ipv6地址分发从无状态改为有状态\"><a class=\"markdownIt-Anchor\" href=\"#1-将路由器的内网ipv6地址分发从无状态改为有状态\">#</a> 1. 将路由器的内网 ipv6 地址分发从无状态改为有状态。</h3>\n<p>无状态获取指的是机器自己配置地址，然后通过 NDP 等方式确定地址有效性即可；有状态获取类似 DHCP，不过分配的地址是 ipv6。<br>\n这一步解决了手机联网的问题；由于我的网络环境中手机为主要设备，而安卓系统并不支持通过 DHCPv6 进行有状态获取 ipv6 地址；于是所有的手机都只能通过 ipv4 联网，解决了所有上网问题。</p>\n<h3 id=\"2-为电脑配置虚假或者无效的ipv6地址\"><a class=\"markdownIt-Anchor\" href=\"#2-为电脑配置虚假或者无效的ipv6地址\">#</a> 2.  为电脑配置虚假或者无效的 ipv6 地址</h3>\n<p>这是我在测试的时候忽然想到的主意，既然 ipv4 地址在手动配置错误的情况下无法联网，那么 ipv6 应该也是一样的。<br>\nipv6 中同样有很多保留地址，例如 <code>fe80</code>  开头的地址表示本地链路地址，无法进行跨子网路由，因此给我自己的电脑配置一个 <code>fe80::1</code>  的地址即可。<br>\n配置后，网卡状态中 IPv6 连接变为<strong>无 Internet 访问权限</strong>，使用 <code>ipconfig /all</code>  查看 IP 地址，发现手动配置的 ipv6 地址变成了<strong>本地链接 IPv6 地址</strong>。<br>\n<img src=\"../_resources/054913f5d395b1e809f0d7830e64c948.png\" alt=\"054913f5d395b1e809f0d7830e64c948.png\"><br>\n 此外，这里网卡仍然获取到了一个 IPv6 地址，但后面提示（<strong>复制</strong>），检查其地址发现这个地址是我的服务器电脑的公网 ipv6 地址（因此在此处打码作保护）；这可能是一些其它方面的机制，但并不影响服务器和我的电脑的正常工作。同时，由于内网 ipv6 地址被正常配置，我仍然可以通过内网 ipv6 来访问服务器（包括文件服务器、网页服务器、minecraft 和远程桌面）。<br>\n这一步解决了环境中主要的电脑设备：我自己的使用需求。当然没有完全解决，纯 ipv4 模式下访问部分双栈网站时速度还是比较慢，但能够正常使用已经是极其难得了。</p>\n<h3 id=\"3-为windows-11配置\"><a class=\"markdownIt-Anchor\" href=\"#3-为windows-11配置\">#</a> 3. 为 Windows 11 配置</h3>\n<p>环境中存在另一台常用的电脑，而它搭载的是 Windows 11 家庭版。<br>\n在 win11 下可以执行相同的步骤进行配置，只不过需要多出一个步骤：<strong>你需要在系统设置中手动设置 ipv6 DNS，而不能使用自动获取。</strong><br>\n这一步是因为，即便手动配置了 ipv6 地址，win11 似乎也不会立即使用，而是先试图通过 DHCP 等方法获取 ipv6 地址以及 DNS 服务器等；而在自动获取 DNS 的过程中，路由器很可能就为它分配了一个 ipv6 地址，导致我们自己设置的地址完全变成内网地址，而无法实现目的。</p>\n<hr>\n<h2 id=\"结语\"><a class=\"markdownIt-Anchor\" href=\"#结语\">#</a> 结语</h2>\n<p>至此，全部流程结束，解决方案全部执行。服务器正常接受公网入站流量，其余设备配置后均能实现正常上网。</p>\n<p>但是，我并不对现在的解决方案满意。原因很简单，我开 ipv6 不仅是为了服务器使用，更是为了提高日常上网体验，同时接轨最新技术（虽然 ipv6 都是 12 年前的玩意了）；现在虽然解决了问题，但并未达成全部目的，因为除了服务器主机以外没有设备能够正常使用 ipv6 的。这个方法顶多也就临时用用，实际上我也就这一个寒假的需求，假期结束返校前肯定会恢复光猫拨号的，因为服务器主机之后只作为内网打印服务器，不再有公网访问需求。此外，每次新加一台电脑，都需要这样设置一遍无效的 ipv6 地址，以便正常访问网页。<br>\n所以，整体看下来，其实只是在两边的矛盾中取了一个居中妥协的值，为主要矛盾作了让步。我也不是每天都会折腾网络，更多时候还是希望它日常使用能稳定；但我又不希望放弃服务器的公网访问，因此这两者就是核心问题，而最终的方案也就向这两个问题进行妥协。<br>\nAnyway，反正问题算是解决了，但愿 ipv6 的部署进度还能快一点吧（</p>\n<hr>\n<p>明天就是除夕了，浅放一张 AI 画的胡桃吧，祝大家新年快乐！<br>\n<em>胡桃没画成，人要么太大要么太小，随便搞了个背景算了（）</em><br>\n<img src=\"../_resources/7c8d8e5459a9f8cd83c33281ca1aa262.png\" alt=\"7c8d8e5459a9f8cd83c33281ca1aa262.png\"></p>\n",
            "tags": [
                "游戏",
                "网络"
            ]
        }
    ]
}