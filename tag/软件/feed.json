{
    "version": "https://jsonfeed.org/version/1",
    "title": "青羽~blog site • All posts by \"软件\" tag",
    "description": "Shadow in front implying sun behind",
    "home_page_url": "https://zjxdiu.github.io",
    "items": [
        {
            "id": "https://zjxdiu.github.io/blog/%E6%89%B9%E5%A4%84%E7%90%86%E4%BC%98%E5%8C%96Hexo%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/",
            "url": "https://zjxdiu.github.io/blog/%E6%89%B9%E5%A4%84%E7%90%86%E4%BC%98%E5%8C%96Hexo%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/",
            "title": "使用批处理和Joplin执行并优化Hexo博客工作流程",
            "date_published": "2022-11-27T13:53:00.000Z",
            "content_html": "<p>使用静态部署的方式使用 Hexo，我们经常会遇到一个很烦人的问题，就是部署麻烦。<br>\n每次写一篇文章，就要经历<strong> Hexo clean、Hexo g、Hexo s、Hexo d</strong> 四连，一开始还好，写多了之后烦不胜烦。</p>\n<p>同时，由于我个人使用 Joplin 进行文章撰写，这个软件虽然简洁，但并不好用；图片虽然可以直接复制，但不能修改输出目录，图片资源默认保存在与 <code>/blog/</code>  平行的 <code>/_resources/</code>  文件夹中。</p>\n<p>因此，结合我最为擅长的 batch 脚本语言，我就萌生了使用批处理来优化整个流程的想法。</p>\n<hr>\n<h3 id=\"1-git安装配置不确定是否有必要\"><a class=\"markdownIt-Anchor\" href=\"#1-git安装配置不确定是否有必要\">#</a> 1. Git 安装配置（不确定是否有必要）</h3>\n<p>在安装 Git 的过程中，我们会有一个配置终端的过程，此处其实是建议选择第一项（使用 MinTTY），但我当时选择了第二项即使用系统的 cmd 来作 git bash 的终端。<br>\n<img src=\"../_resources/aca6779be5b5f5c9d88dc1215456c295.png\" alt=\"aca6779be5b5f5c9d88dc1215456c295.png\"><br>\n 如果选择了第一项，可能也是能正常使用批处理来代替执行的，应该不用担心。</p>\n<hr>\n<h3 id=\"2-站点配置\"><a class=\"markdownIt-Anchor\" href=\"#2-站点配置\">#</a> 2. 站点配置</h3>\n<p>blog 根目录下的_config.yml 文件：</p>\n<pre><code class=\"hljs yml\"><span class=\"hljs-string\">......</span>\n<span class=\"hljs-attr\">post_asset_folder:</span> <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">relative_link:</span> <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-string\">......</span></code></pre>\n<p>使用 Joplin 写文章的话应该关闭这两项（至少我测试下来这样是没问题的）</p>\n<hr>\n<h3 id=\"3-脚本编写\"><a class=\"markdownIt-Anchor\" href=\"#3-脚本编写\">#</a> 3. 脚本编写</h3>\n<p>在 blog 根目录下新建 “程序名.bat”，开始编写功能。<br>\n先放源码：</p>\n<pre><code class=\"hljs bat\">@<span class=\"hljs-built_in\">echo</span> off\n<span class=\"hljs-built_in\">setlocal</span> EnableDelayedExpansion\n<span class=\"hljs-keyword\">goto</span> <span class=\"hljs-built_in\">start</span>\n:ac\n<span class=\"hljs-comment\">rem 请设置%targetlable%变量，以确保正常跳转至目标位置</span>\n<span class=\"hljs-built_in\">cls</span>\n<span class=\"hljs-built_in\">color</span> <span class=\"hljs-number\">0</span>F\n<span class=\"hljs-keyword\">goto</span> <span class=\"hljs-variable\">%targetlabel%</span>\n:<span class=\"hljs-built_in\">start</span>\n<span class=\"hljs-keyword\">if</span> &quot;<span class=\"hljs-variable\">%targetlabel%</span>&quot;==&quot;&quot; (<span class=\"hljs-built_in\">set</span> &quot;targetlabel=<span class=\"hljs-built_in\">start</span>&quot;&amp;&amp;<span class=\"hljs-keyword\">goto</span> ac)\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">echo</span>  <span class=\"hljs-number\">1</span>.执行完整的检查和推送blog流程\n<span class=\"hljs-built_in\">echo</span>  <span class=\"hljs-number\">2</span>.快速上载blog\n<span class=\"hljs-built_in\">echo</span>  <span class=\"hljs-number\">3</span>.本地预览\n<span class=\"hljs-built_in\">echo</span>  <span class=\"hljs-number\">4</span>.单独执行指令\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">echo</span>.\nchoice /c <span class=\"hljs-number\">1234</span>\n<span class=\"hljs-keyword\">if</span> &quot;<span class=\"hljs-variable\">%errorlevel%</span>&quot;==&quot;<span class=\"hljs-number\">4</span>&quot; <span class=\"hljs-keyword\">goto</span> new\n<span class=\"hljs-keyword\">if</span> &quot;<span class=\"hljs-variable\">%errorlevel%</span>&quot;==&quot;<span class=\"hljs-number\">3</span>&quot; (<span class=\"hljs-built_in\">set</span> &quot;targetlabel=local&quot;&amp;&amp;<span class=\"hljs-keyword\">goto</span> ac)\n<span class=\"hljs-keyword\">if</span> &quot;<span class=\"hljs-variable\">%errorlevel%</span>&quot;==&quot;<span class=\"hljs-number\">2</span>&quot; (<span class=\"hljs-built_in\">set</span> &quot;targetlabel=fast&quot;&amp;&amp;<span class=\"hljs-keyword\">goto</span> ac)\n<span class=\"hljs-keyword\">if</span> &quot;<span class=\"hljs-variable\">%errorlevel%</span>&quot;==&quot;<span class=\"hljs-number\">1</span>&quot; (<span class=\"hljs-built_in\">set</span> &quot;targetlabel=full&quot;&amp;&amp;<span class=\"hljs-keyword\">goto</span> ac)\n<span class=\"hljs-built_in\">pause</span>&amp;<span class=\"hljs-keyword\">exit</span>\n:new\n<span class=\"hljs-built_in\">echo</span> 正在创建新的<span class=\"hljs-built_in\">cmd</span>实例...\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">echo</span> 命令提示：\n<span class=\"hljs-built_in\">echo</span> hexo clean\n<span class=\"hljs-built_in\">echo</span> hexo g\n<span class=\"hljs-built_in\">echo</span> hexo s\n<span class=\"hljs-built_in\">echo</span> hexo d\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">start</span> <span class=\"hljs-built_in\">cmd</span>\n<span class=\"hljs-built_in\">echo</span> 按任意键返回菜单...\n<span class=\"hljs-built_in\">pause</span> &gt;<span class=\"hljs-built_in\">nul</span>\n<span class=\"hljs-built_in\">set</span> &quot;targetlabel=<span class=\"hljs-built_in\">start</span>&quot;&amp;&amp;<span class=\"hljs-keyword\">goto</span> ac\n:local\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">echo</span>                  本地预览模式\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">echo</span> 启动预览...\n<span class=\"hljs-built_in\">cmd</span> /c &quot;hexo clean &amp; hexo g &amp; <span class=\"hljs-built_in\">xcopy</span> D:\\blog\\source\\_posts\\_resources D:\\blog\\public\\blog\\_resources\\ /e /s /y &amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-number\">2</span>&gt;D:\\blog\\.deploy_git\\.nojekyll &amp; <span class=\"hljs-built_in\">start</span> http://localhost:<span class=\"hljs-number\">4000</span>/ &amp; hexo s&quot;\n<span class=\"hljs-built_in\">echo</span> 按任意键返回菜单...\n<span class=\"hljs-built_in\">pause</span> &gt;<span class=\"hljs-built_in\">nul</span>\n<span class=\"hljs-built_in\">set</span> &quot;targetlabel=<span class=\"hljs-built_in\">start</span>&quot;&amp;&amp;<span class=\"hljs-keyword\">goto</span> ac\n:fast\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">echo</span>                  快速上载blog\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">cmd</span> /c &quot;hexo clean &amp; hexo g &amp; <span class=\"hljs-built_in\">xcopy</span> D:\\blog\\source\\_posts\\_resources D:\\blog\\public\\blog\\_resources\\ /e /s /y &amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-number\">2</span>&gt;D:\\blog\\.deploy_git\\.nojekyll &amp; hexo d&quot;\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">echo</span> 完成，<span class=\"hljs-number\">2</span>秒后退出...\n<span class=\"hljs-built_in\">ping</span> localhost -n <span class=\"hljs-number\">3</span> &gt;<span class=\"hljs-built_in\">nul</span>\n<span class=\"hljs-keyword\">exit</span>\n:full\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">echo</span>                  完整流程向导\n<span class=\"hljs-built_in\">echo</span>              按<span class=\"hljs-number\">0</span>为确定，按<span class=\"hljs-number\">1</span>为跳过\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-keyword\">goto</span> clean\n:clean\n<span class=\"hljs-built_in\">echo</span> 第一步：清理缓存\nchoice /c <span class=\"hljs-number\">01</span>\n<span class=\"hljs-keyword\">if</span> &quot;<span class=\"hljs-variable\">%errorlevel%</span>&quot;==&quot;<span class=\"hljs-number\">2</span>&quot; <span class=\"hljs-keyword\">goto</span> generate\n<span class=\"hljs-built_in\">cmd</span> /c &quot;hexo clean&quot;\n<span class=\"hljs-keyword\">goto</span> generate\n:generate\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">echo</span> 第二步：生成页面\nchoice /c <span class=\"hljs-number\">01</span>\n<span class=\"hljs-keyword\">if</span> &quot;<span class=\"hljs-variable\">%errorlevel%</span>&quot;==&quot;<span class=\"hljs-number\">2</span>&quot; <span class=\"hljs-keyword\">goto</span> check\n<span class=\"hljs-built_in\">cmd</span> /c &quot;<span class=\"hljs-built_in\">xcopy</span> D:\\blog\\source\\_posts\\_resources D:\\blog\\public\\blog\\_resources\\ /e /s /y &amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-number\">2</span>&gt;D:\\blog\\.deploy_git\\.nojekyll &amp; hexo g&quot;\n<span class=\"hljs-keyword\">goto</span> check\n:check\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">echo</span> 第三步：本地预览\nchoice /c <span class=\"hljs-number\">01</span>\n<span class=\"hljs-keyword\">if</span> &quot;<span class=\"hljs-variable\">%errorlevel%</span>&quot;==&quot;<span class=\"hljs-number\">2</span>&quot; <span class=\"hljs-keyword\">goto</span> deploy\n<span class=\"hljs-built_in\">start</span> http://localhost:<span class=\"hljs-number\">4000</span>/\n<span class=\"hljs-built_in\">cmd</span> /c &quot;hexo s&quot;\n<span class=\"hljs-keyword\">goto</span> deploy\n:deploy\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">echo</span> 第四步：上传到远程服务器\nchoice /c <span class=\"hljs-number\">01</span>\n<span class=\"hljs-keyword\">if</span> &quot;<span class=\"hljs-variable\">%errorlevel%</span>&quot;==&quot;<span class=\"hljs-number\">2</span>&quot; <span class=\"hljs-keyword\">goto</span> done\n<span class=\"hljs-built_in\">cmd</span> /c &quot;hexo d&quot;\n<span class=\"hljs-keyword\">goto</span> done\n:done\n<span class=\"hljs-built_in\">echo</span> ------------------------------------------------\n<span class=\"hljs-built_in\">echo</span> 流程已完成，按任意键返回菜单...\n<span class=\"hljs-built_in\">pause</span> &gt;<span class=\"hljs-built_in\">nul</span>\n<span class=\"hljs-built_in\">set</span> &quot;targetlabel=<span class=\"hljs-built_in\">start</span>&quot;&amp;&amp;<span class=\"hljs-keyword\">goto</span> ac</code></pre>\n<p>我自认为自己的批处理写得都算比较清晰的了，虽然注释很少，但结合文字应该能看懂每一步是在干什么。<br>\n如果要使用，请把里面所有的 <code>D:\\blog\\source\\_posts\\_resources</code>  替换为你 Joplin 每次导出时的资源目录，把所有的 <code>D:\\blog\\public\\blog\\_resources\\</code>  替换为你的博客站点目录，注意不要动 <code>\\public\\...</code>  后面的内容。</p>\n<p>如果要更换功能模块，也应按照这里的写法，使用  <code>cmd /c 命令内容 &amp; 第二条命令 &amp; 后面的很多命令</code>  来执行，除了 start 用于启动网页之外尽量不要直接在批处理中使用模块的命令，否则容易直接闪退。</p>\n<p>创建 <code>.nojekyll</code>  文件的目的是防止 GitHub 忽略掉下划线开头的文件夹，即 <code>_resources</code></p>\n<hr>\n<h3 id=\"4-工作流程\"><a class=\"markdownIt-Anchor\" href=\"#4-工作流程\">#</a> 4. 工作流程</h3>\n<p>现在，我们可以愉快地写文章了。<br>\n打开 Joplin，新建笔记（记得都放在同一个笔记本下），笔记的名字是文件名，写上 Front-matter 内容，之后就如同在 word 中一样写稿。<br>\n图片直接粘贴即可，需要的话修改 [ ] 里的内容，这是属于 markdown 语法的一部分，不详细说明。<br>\n写完的文章直接往 <code>blog\\source\\_posts</code>  里面一存，然后打开脚本按个 2，等两分钟就部署到 Github Pages 上了。<br>\n<strong>愉快地工作吧！</strong><br>\n<img src=\"../_resources/cf0fb99a327ef788a844524d6eb74278.png\" alt=\"cf0fb99a327ef788a844524d6eb74278.png\"></p>\n<p>补充点内容，修改文章稍微有点麻烦，因为 Joplin 非常笨，它不会识别已有的文件，发现重名了直接加后缀，连带着里面的图片也都加后缀、重新复制到 <code>_resources</code>  里面了；对于我这种硬盘空间够、平时图片不多的人来说倒是无所谓，但部署了之后文章会重复显示好几篇。所以不能直接导出文章，需要手动删除旧的，然后再从 Joplin 中导出即可。</p>\n",
            "tags": [
                "软件"
            ]
        },
        {
            "id": "https://zjxdiu.github.io/blog/WPS-word/",
            "url": "https://zjxdiu.github.io/blog/WPS-word/",
            "title": "WPS word如何设置图片背景，如何解决图片变成平铺问题",
            "date_published": "2022-11-26T15:18:00.000Z",
            "content_html": "<h2 id=\"wps-word如何设置图片背景如何解决图片变成平铺问题\"><a class=\"markdownIt-Anchor\" href=\"#wps-word如何设置图片背景如何解决图片变成平铺问题\">#</a> WPS word 如何设置图片背景，如何解决图片变成平铺问题</h2>\n<p>问题描述：在 WPS word 中插入背景图片，导出为 PDF、打印后发现图片变成平铺，如图所示<br>\n<img src=\"../_resources/1bed71e7e0b967daa78642a737810d17.png\" alt=\"1bed71e7e0b967daa78642a737810d17.png\"></p>\n<hr>\n<p>1. 打开需要插入背景图片的文档<br>\n 2. 点击：页面布局、背景、其它背景、纹理<br>\n<img src=\"../_resources/88b258680c69021372dab599663945bd.png\" alt=\"88b258680c69021372dab599663945bd.png\"></p>\n<p>3. 选择 “其它纹理”，选择图片后点击确定<br>\n<img src=\"../_resources/a4d5ca84c954b134351ea2d9c8d9881c.png\" alt=\"a4d5ca84c954b134351ea2d9c8d9881c.png\"></p>\n<p>4. 现在背景图片应该可以正常导出了。</p>\n<hr>\n",
            "tags": [
                "软件"
            ]
        }
    ]
}