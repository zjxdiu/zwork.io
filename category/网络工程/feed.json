{
    "version": "https://jsonfeed.org/version/1",
    "title": "zjxdiu~blog site • All posts by \"网络工程\" category",
    "description": "Shadow in front implying sun behind",
    "home_page_url": "https://zjxdiu.github.io",
    "items": [
        {
            "id": "https://zjxdiu.github.io/blog/openclash_80_proxy/",
            "url": "https://zjxdiu.github.io/blog/openclash_80_proxy/",
            "title": "(长沙理工大学)如何在openwrt中免编译修改UA、绕过校园网检测等",
            "date_published": "2023-09-10T08:31:00.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>阅读本文前，假设您已经阅读过以下参考文章，并且对路由器、网络工程等方面具有基础的知识储备。<br>\n<strong>参考内容：</strong><br>\n自卖自夸（写得挺水的）：<a href=\"../Network_progress_CSUST/index.html\">长沙理工大学无线网络多设备共享解决方案</a><br>\n校友博客：<a href=\"https://www.mr-cn.net/2021/06/15/Share-your-network-in-CSUST/\">长沙理工大学：校园网解除共享限制</a><br>\n OpenClash 配置文件说明：<a href=\"https://github.com/vernesong/OpenClash/wiki/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">Github Wiki</a></p>\n<p>说明：本文内容仍然是独立的，不看前面的文章也没事，不过有空最好看看（</p>\n<h2 id=\"csust检测封禁校园网共享行为\"><a class=\"markdownIt-Anchor\" href=\"#csust检测封禁校园网共享行为\">#</a> CSUST 检测 / 封禁校园网共享行为？</h2>\n<p>知己知彼，百战不殆。在解决问题之前，我们必须深入理解问题的本质和根源。<br>\n众所周知，不仅是 CSUST，基本上所有的（至少国内）高校都会做这个限制，也就是一个校园网账号只允许 1 台设备登录。取决于你的套餐不同，可能也会允许 2 台，但对于 2023 年的年轻人来说明显还是捉襟见肘。</p>\n<h3 id=\"为什么要做检测\"><a class=\"markdownIt-Anchor\" href=\"#为什么要做检测\">#</a> 为什么要做检测？</h3>\n<p>是个现代网民都清楚，每个人每天上网的设备肯定不止一台，这限制单设备在线那不是很蛋疼？<br>\n答案自然是为了利益了。如果不做任何限制，那一个校园网账号就可以很多人一起使用，例如一个宿舍几个人合租一个账号使用。<br>\n尽管多数情况下校园网带宽都很小（我校 30Mbps），但日常来说够 2 个人使用，那就可以大幅分担成本，进而导致运营商利益受损。（虽然这 30M 的价格也贵得跟家庭宽带一样了）<br>\n毕竟校园环境跟家庭和商业不同，后者都是私有的，极少数家庭会愿意跟邻居分享同一个网络，更别说商用网络还涉及安全和机密问题。</p>\n<h3 id=\"怎么做到检测的\"><a class=\"markdownIt-Anchor\" href=\"#怎么做到检测的\">#</a> 怎么做到检测的？</h3>\n<p>这是一个复杂的问题。<br>\n首先我们要理解你在连接校园网之后是怎么成功上网的。通常来说学校会在校内设置防火墙和认证服务器，你在连接到校园网的 WiFi 或者有线设备之后，防火墙设备会阻断你的所有网络流量；这时候就需要向认证服务器发送自己的登录信息，服务器再通知防火墙 “放行” 你的网络流量。<br>\n在理解这个简化的流程之后，很容易就能理解如何直接检测多个设备在线；如果有一台设备已经通过了认证，此时有第二台设备试图认证，则认证服务器就会拒绝（或者把第一台设备 “踢” 下线），总之同一时间内只能有一台设备处于 “放行” 状态。</p>\n<p>但是，稍微了解一点网络知识的同学肯定知道，我们家里的路由器也跟学校环境类似，它对外只显示为一台设备，但路由器下可以连接很多设备。依赖于 NAT（网络地址转换）技术，路由器就可以实现这样的操作。<br>\n那有人就要想了，我直接在校园网下接一台路由器不就行了，或者干脆用电脑上的无线热点来共享？显然，这种问题当然也会被运营商考虑到，因此就有了如下的各种深入检测方式。<br>\n以下只说我目前根据自己实验的结果认为学校可能用到的方法，其他方法可以网上搜索或者查看参考文章。</p>\n<h4 id=\"macip绑定规则\"><a class=\"markdownIt-Anchor\" href=\"#macip绑定规则\">#</a> MAC（IP）绑定规则</h4>\n<p>在<a href=\"http://bw.csust.edu.cn/\">这个网址</a>（要从 ehall.csust.edu.cn 里登录）里可以点击 “设备绑定”，查看你的校园网账号目前绑定了哪些 MAC 地址。我目前还不是完全理解这个绑定的含义，但每次认证成功后我的设备 MAC 至少会出现在第一行中。<br>\n为什么要提这个事？因为 MAC 地址绑定是第一个坑，它甚至都算不上共享检测的范畴。这里，还需要解释一下我校的 IP 分配与认证规则。</p>\n<ol>\n<li>在我的路由器初次连接校园网后，首先会分配到一个随机的 IP 地址（在我宿舍里是 10.151.x.x）</li>\n<li>完成认证后，可以上网，但这个 IP 地址不会变化；</li>\n<li>手动重新连接校园网，通常这时不用重新登录认证（因为已经绑定到账号上了），但 IP 地址会发生变化（10.149.x.x）</li>\n</ol>\n<p>以上规则是我在路由器上首先发现的，因为在用电脑的时候不会经常关心自己的 IP 地址。然而，我猜测电脑也会经历类似的过程。<br>\n这里的关键是，151 这个地址是未认证的时候分配的，即使认证成功了也并非学校 DHCP 服务器里绑定的那个设备；最后直接的结果就是，过了 5-15 分钟左右（有时候是 30-60 分钟）就会断网，尽管学校网站后台会显示 151 地址正常在线。此时必须<strong>手动重连 WiFi</strong> 才能解决，因为重连后就能获取到 149 地址，这个才是真正认证成功的地址。<br>\n根据我个人的猜测，很多电脑在连接校园网后没过多久就会自己断网，可能也是这个原因导致的；这个现象在 2024 学年开始时就不太常见了，但仍然影响路由器上网，所以在认证之后记得重连 WiFi，如果地址不能变化就等一会再重连（或者重启路由器）。</p>\n<h4 id=\"http流量的ua检测\"><a class=\"markdownIt-Anchor\" href=\"#http流量的ua检测\">#</a> HTTP 流量的 UA 检测</h4>\n<p>HTTP 协议是访问各种网站、app 内容的最常见协议之一，也就是我们看到网址前面的那个前缀。<br>\n这里简单说明一下 HTTP 协议的基本特点：HTTP 协议默认端口为 80，使用 TCP 连接，所有数据不经过加密、直接明文传输。<br>\n而 HTTPS 则是 HTTP 的加强版（加密版），它解决了数据加密问题，你和服务器之间传输的数据都经过加密、无法被第三方直接获取查看；默认 443 端口。</p>\n<p>这里的重点是，HTTP 协议规定了报文的格式，其中包含了很多终端信息。其中被用于检测的就是 User-Agent 字段，简称 UA。<br>\nUA 对于现代网络环境来说十分重要，因为它会告诉服务器许多设备信息，例如使用的操作系统、浏览器类型和版本等，并且这个字段的内容是高度可自定义的。有时候你会收到一个微信链接，当你想在电脑或者其他浏览器上打开的时候网页就会提示你 “请从微信客户端打开链接”，实际上是因为各类 app 都会设置自己的 UA，而网页检测到你的 UA 不是微信的就会拒绝发送内容。此外，网页还可以根据 UA 判断用户设备类型，从而给手机和电脑用户分别提供不同布局的网页，优化用户体验（或者恶心用户，逼你下载 app；技术没有好坏，取决于如何使用）。<br>\n那么，学校具体如何检测 UA 呢？简单来说，因为 HTTP 报文内容不加密，任何人都可以获取到你发送和接收的内容。学校防火墙会抓取你在 80 端口发送的 HTTP 报文，然后记录其中的关键词，如果触发规则就断网。举例来说，如果你的电脑和手机同时在上网，那么你的路由器发出的 HTTP 报文就会有两种，一种是 Windows、另一种是 Android，显然这可以说明用户在同时使用电脑和手机两种设备，就可以触发断网规则。</p>\n<p>还有一点需要注意，也许你会发现平时访问的网页基本上全都是 HTTPS 开头的，也就意味着网页经过了加密，为什么学校还能轻松做到检测呢？答案很简单，因为 HTTP 报文是不可避免的。很多网页在初次访问的时候都是先使用 HTTP，服务器给你一个跳转的响应，你的浏览器才会转为使用 HTTPS；而且还有很多毒瘤国产 app 都是直接明文传输大量内容（文末会讲到哪些 app 主要可能触发检测），就连 QQ 都在使用不加密的 HTTP 协议传输一些数据。</p>\n<h4 id=\"总结和其他\"><a class=\"markdownIt-Anchor\" href=\"#总结和其他\">#</a> 总结和其他</h4>\n<p>在校友博客文章中还提到了其他检测内容，包括 TTL 值、设备时间戳、IPID 检测，甚至还有主动侵入式检测，在 2023 年 9 月均已不存在。原文还描述了防火墙断网后会让用户跳转到 1.1.1.3… 之类的网页，实测在 Wifi 连接的情况下已经不存在（似乎以前有，但现在没了？）。<br>\n此外，在触发规则断网后，除了有些 app 和网页建立了长连接可能暂时没有被阻断以外，所有软件和网页都会失去网络连接，但 DNS 的请求是正常的，也就是说 53 端口在这种情况下是打开的。印象中如果你连了 WiFi 但不完成登录认证，53 端口上的 DNS 请求似乎也是正常的。如果你想白嫖网络的话，可以搭建 VPN over DNS 服务器，当然这些都是跑题内容了。</p>\n<h2 id=\"如何绕开检测\"><a class=\"markdownIt-Anchor\" href=\"#如何绕开检测\">#</a> 如何绕开检测？</h2>\n<p>实际上真正参与检测的只有一个条件，那就是 80 端口的 HTTP 报文中 UA 字段的差异检测。针对这个条件，我们可以有两种绕过方法。</p>\n<ol>\n<li>在路由器上处理所有满足条件的包，将其 UA 替换为统一内容；</li>\n<li>通过代理服务器转发请求，把符合条件的包加密之后发送到代理服务器上，然后使用代理上网。</li>\n</ol>\n<p><strong>以下内容基本都需要 OpenWrt 系统</strong></p>\n<h3 id=\"修改ua方法一\"><a class=\"markdownIt-Anchor\" href=\"#修改ua方法一\">#</a> 修改 UA（方法一）</h3>\n<p>再次提醒，只把手机浏览器里的 UA 改成电脑是不够的，因为前面说过了，很多 app 都会定义自己的 UA，这个内容你没法直接在 app 里修改，只能在路由器上执行。<br>\n修改的方法有很多种，这里只做推荐，不做教程，因为所有的方法我都失败或者懒得做。</p>\n<h4 id=\"privoxy代理插件\"><a class=\"markdownIt-Anchor\" href=\"#privoxy代理插件\">#</a> Privoxy 代理插件</h4>\n<p>如果你在网上搜索 “OpenWrt 修改 UA” 这样的关键词，那么多数文章会告诉你使用 Privoxy 插件。根据大家的评价，它的操作相对简单，但问题是极大地影响网络速度。虽然我也不确定在 30M 本身就这么低的速度下会影响多少，不过仍然是需要注意的点。<br>\n补充：似乎是性能影响较大，如果你用的是 MT7621 这种高性能处理器或者 x86 软路由则不用担心。<br>\n具体方法自行查找网络教程。我本来想用这个的，但是不知道为什么网页界面不能正常渲染，所有的保存按钮都消失了，反复尝试修复无果，放弃。</p>\n<p>优点：不用自己编译，操作相对简单<br>\n缺点：兼容性问题，网络性能问题</p>\n<h4 id=\"ua2f插件\"><a class=\"markdownIt-Anchor\" href=\"#ua2f插件\">#</a> UA2F 插件</h4>\n<p>这是一个国内的受害者（x）大佬开发的插件，功能更强大但配置甚至更精简。<br>\n项目地址：<a href=\"https://github.com/Zxilly/UA2F\">https://github.com/Zxilly/UA2F</a><br>\n 使用方法可以参考作者博客文章，在 readme 里就能看到链接。这个我成功安装了，但是运行的时候报错失效，放弃。</p>\n<p>优点：基本上也不用自己编译，没有复杂的配置，似乎可以即插即用；还能修改多个端口的 UA<br>\n 缺点：还是兼容性问题，以及许多人报告的稳定性问题</p>\n<h4 id=\"xmurp-ua插件\"><a class=\"markdownIt-Anchor\" href=\"#xmurp-ua插件\">#</a> xmurp-ua 插件</h4>\n<p>这是另一个大佬写的内核级插件，效率较高，适合性能差的路由器。<br>\n项目地址：<a href=\"https://github.com/CHN-beta/xmurp-ua\">https://github.com/CHN-beta/xmurp-ua</a><br>\n 使用方法：<a href=\"https://github.com/tonytt0624/GDUF-Web/issues/1#issuecomment-825767613\">https://github.com/tonytt0624/GDUF-Web/issues/1#issuecomment-825767613</a></p>\n<p>优点：处理速度快，甚至也是即插即用、无需配置<br>\n缺点：基本上没有成品插件，要自己编译<br>\n（别以为自己编译是个什么轻松事，真的；除非你是相关专业学生或者已经对 Linux 有很好的理解，否则都不建议自己编译东西。网上的教程鱼龙混杂，也有时效性问题，跟着教程走都很难一次成功。当然你可以说这也是折腾的过程，但是说实话真的很痛苦，我唯一一次尝试用 Ubuntu 的那几天连做梦都是报错 (T_T)</p>\n<h3 id=\"加密代理穿透方法2\"><a class=\"markdownIt-Anchor\" href=\"#加密代理穿透方法2\">#</a> 加密代理穿透（方法 2）</h3>\n<p>这个方法的灵感是这篇文章：<a href=\"https://www.sunbk201.site/posts/change-ua-by-proxy/\">全新方案 - 懒人福音 - 无需手动编译修改 UA - 校园网防检测</a><br>\n其实加密穿透不是什么新鲜事，在我折腾 openwrt 之前我是只用了一个 padavan 路由器，那会我就有个很暴力的方法；因为我家人是有一个办公室，里面办的商用宽带，有自己的公网 IP，那玩意上传速度有百兆，而办公室里的网络需求基本局限于收发 word 文档和简单网页办公，平时都是大量带宽富余；然后那个办公室里有一台常开的服务器，并且我可以直接远程控制，所以我就在那里搭建了一个 V/P/N 服务器，然后在路由器上远程连接过去。<br>\n但是这个方案缺点很明显，这个办公室在深圳，而我在长沙，也就是说所有的网络流量都要往返几百公里的地理距离才能到达；尽管延迟只增加了 20ms，但网速受影响非常剧烈，尤其是和机场的通信非常难建立连接。再者，如果你没有这个条件的话，自己搭建一台流量超多、带宽非常充足的代理服务器，这个资金消耗是极其夸张的，如果你真有这个钞能力的话… 那还看啥折腾文章啊，我建议直接多开几个校园网账号（）</p>\n<p>说回正题，最开始我看到这个文章的时候很开心，想着这么简单的方法怎么没见别人说。结果自己折腾了才知道其中到底有多少坑 QAQ… 为了不让更多人重复这些坑，我把过程写在这里。</p>\n<h4 id=\"使用方法\"><a class=\"markdownIt-Anchor\" href=\"#使用方法\">#</a> 使用方法</h4>\n<p>要使用这个方法，首先你要有一个代理服务器。别着急，如果你已经在使用机场来翻过长城防火墙的话，那么你已经拥有了一个可用的代理服务器。如果没有，我推荐你找一家机场，价格很低的（<br>\n注意购买机场的话需要买带 clash 订阅的，然后获取到服务器的信息（用 v2ray 或者 clash 客户端应该都能）。<br>\n随后，你需要在 openwrt 里安装 openclash 插件，然后安装 clash 内核。这个过程通常可能会由于网络环境问题而失败，你可以尝试在顶上的 “覆写设置” 里将 “Github 地址修改” 设为其中某个地址，然后重新启动插件让它下载。（实际上这个过程折腾了我三个小时，非常艰难地安装成功了）<br>\n这里插一句，我推荐直接用软路由，现在一百多块能买到那种迷你主机，因为软路由能直接用高大全固件，硬件配置也好得多，比很多硬路由折腾起来方便。（当然部分硬路由会有大佬定制好的固件，这个另说）<br>\n安装好之后，在服务列表里点开 openclash。<br>\n<img src=\"../_resources/ff0223404c0271852fd05f727dcd9625.png\" alt=\"ff0223404c0271852fd05f727dcd9625.png\"><br>\n 这里是最重要的部分了。openclash 的配置非常混乱并且复杂，有兴趣可以自己学习，但我在折腾了一整天之后觉得直接看配置文件是最省事的方法。<br>\n如果你是懒人，那你直接复制我的配置文件，然后修改其中的服务器信息即可使用。<br>\n点上面的 “配置管理”，页面底下有一个文本编辑器，左边就是当前的配置文件内容，进行修改即可。</p>\n<pre><code class=\"hljs yml\"><span class=\"hljs-comment\"># 下面这个proxies就是代理服务器列表，一般添加一个即可；里面的每一行内容都按照自己的服务器信息填写，否则无法使用。</span>\n<span class=\"hljs-comment\"># 如果有些信息你找不到，可以不管；基本上必要的就是前面6行。</span>\n<span class=\"hljs-attr\">proxies:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">&quot;代理服务器名&quot;</span>\n    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">vmess</span>  <span class=\"hljs-comment\"># 改成你的服务器类型</span>\n    <span class=\"hljs-attr\">server:</span> <span class=\"hljs-string\">&quot;服务器地址&quot;</span>\n    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-string\">端口号</span>\n    <span class=\"hljs-attr\">uuid:</span> <span class=\"hljs-string\">填写你客户端里的uuid</span>\n    <span class=\"hljs-attr\">alterId:</span> <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\"># 按实际情况填写</span>\n    <span class=\"hljs-attr\">cipher:</span> <span class=\"hljs-string\">auto</span>\n    <span class=\"hljs-attr\">udp:</span> <span class=\"hljs-literal\">true</span>  <span class=\"hljs-comment\"># 不支持UDP转发的节点写false</span>\n    <span class=\"hljs-attr\">xudp:</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-attr\">global-padding:</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-attr\">authenticated-length:</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-attr\">skip-cert-verify:</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-attr\">tls:</span> <span class=\"hljs-literal\">false</span>\n    \n    <span class=\"hljs-attr\">ip-version:</span> <span class=\"hljs-string\">&quot;dual&quot;</span>\n    <span class=\"hljs-attr\">tfo:</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-attr\">smux:</span>\n      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">proxy-groups:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Auto</span> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">UrlTest</span>\n    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">url-test</span>\n    <span class=\"hljs-attr\">proxies:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;代理服务器名&quot;</span>\n    <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">http://cp.cloudflare.com/generate_204</span>\n    <span class=\"hljs-attr\">interval:</span> <span class=\"hljs-string\">&quot;600&quot;</span>\n    <span class=\"hljs-attr\">tolerance:</span> <span class=\"hljs-string\">&quot;150&quot;</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Proxy</span>\n    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">select</span>\n    <span class=\"hljs-attr\">proxies:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Auto</span> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">UrlTest</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">DIRECT</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;代理服务器名&quot;</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Domestic</span>\n    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">select</span>\n    <span class=\"hljs-attr\">proxies:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">DIRECT</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Proxy</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Others</span>\n    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">select</span>\n    <span class=\"hljs-attr\">proxies:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Proxy</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">DIRECT</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Domestic</span>\n<span class=\"hljs-attr\">rules:</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">IP-CIDR,10.0.0.0/8,DIRECT</span>  <span class=\"hljs-comment\"># 这里是我添加的，在访问校内网站时不经过代理</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">DST-PORT,7895,REJECT</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">DST-PORT,7892,REJECT</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">IP-CIDR,198.18.0.1/16,REJECT,no-resolve</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">DST-PORT,80,Proxy</span>  <span class=\"hljs-comment\"># 这一行是让所有目标为80端口的流量走代理</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">GEOIP,CN,Domestic</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">MATCH,Others</span></code></pre>\n<p>服务器信息哪里获取？我使用的是 v2ray 客户端，在订阅了机场给的链接之后双击服务器即可查看信息。<br>\n如果实在要自己生成配置或者怕错，也可以用插件内置的功能。<br>\n点击 “一键生成”，按下图简单设置：<br>\n<img src=\"../_resources/75d897cbed3d67c5692a87b366a82208.png\" alt=\"75d897cbed3d67c5692a87b366a82208.png\"><br>\n 滑动到页面下方，在 “服务器节点配置” 里添加服务器：<br>\n<img src=\"../_resources/0610c5f31f5691c2c7dd4a5a4d9ce67b.png\" alt=\"0610c5f31f5691c2c7dd4a5a4d9ce67b.png\"><br>\n 点击 “导入配置信息”，将目标服务器的分享链接（不是订阅链接！）粘贴到弹窗里，保存配置<br>\n<img src=\"../_resources/d2958f9d78c0c35d52c038a5b7e33322.png\" alt=\"d2958f9d78c0c35d52c038a5b7e33322.png\"><br>\n 最后，在页面最下方先后点击 “保存配置” 和 “应用配置”。如果点了一个就自动跳转回首页，那就再点回来。<br>\n点击应用之后，客户端就会自动启动。在顶上的 “运行日志” 里可以看到信息。应该会自动下载很多配置文件，在启动的时候可能会报错，这个不用管。<br>\n配置文件生成之后，点回上面的配置管理，下面的配置文件里就能找到 proxies 的内容；复制这一段出来就能用了。<br>\n<strong>注意：请不要直接使用一键生成的配置，因为它似乎会覆盖 80 端口，自己加规则也不能实现代理转发</strong></p>\n<p>最后，确定插件启动，进入管理页面检查规则列表，如果显示了 DST PORT 80 proxy 这一行即可（要在 Dashboard 面板里才能看到）<br>\n<img src=\"../_resources/fc4a43904f3fe7d86bdebbce99db7e62.png\" alt=\"fc4a43904f3fe7d86bdebbce99db7e62.png\"></p>\n<h2 id=\"测试结果\"><a class=\"markdownIt-Anchor\" href=\"#测试结果\">#</a> 测试结果</h2>\n<p>简单测试一下，你可以对着日志看，或者在这里测试：<a href=\"http://ua.233996.xyz/\">http://ua.233996.xyz/</a><br>\n<img src=\"../_resources/91a5dfa4110b5d04e36ec7f553ae587b.png\" alt=\"91a5dfa4110b5d04e36ec7f553ae587b.png\"><br>\n 这个网站本来是测 UA 的，如果你部署的是 UA 修改插件也可以用这个检查（其他网站也行，但要确保是 HTTP 的，不能是 HTTPS 的）</p>\n<h2 id=\"一些问题\"><a class=\"markdownIt-Anchor\" href=\"#一些问题\">#</a> 一些问题</h2>\n<p>在部署成功之后我才发现，原来那么多软件都在走 80 端口传输明文信息，难怪都吐槽安全性差；然后这样也会影响一些网络性能，主要是一些手机和电脑软件会用 HTTP 传输信息，而这部分内容现在要走代理，速度和连接用时都受影响。此外，也会导致你的机场记录更多流量，所以记得选购流量多一点的套餐。</p>\n<h2 id=\"容易触发检测的app\"><a class=\"markdownIt-Anchor\" href=\"#容易触发检测的app\">#</a> 容易触发检测的 app</h2>\n<p>最后，列出我最近一周时间里实验发现的一些毒瘤 app，一旦使用就可能触发检测和断网。<br>\n以下内容均基于经验和猜测，准确性未知，但可以提供部分参考。<br>\n此外，牢记检测条件是电脑和手机同时发送报文，如果只有一种设备在线浏览的话检测概率会降低。</p>\n<p>微信：检测概率接近 0%，微信的网页浏览器极少数情况下会触发，基本不用担心。<br>\nQQ：检测概率 2~5%，刷 QQ 空间时触发<br>\n饿了么：检测概率～10%，浏览商家页面时触发<br>\n淘宝：检测概率～50%，获取消息、物流信息等触发<br>\n米游社：检测概率～5%，获取玩家信息、合集内容等触发<br>\n交通银行 app：检测概率～70%，正常浏览内容时触发<br>\n国家开发银行（网页）：检测概率～100%，打开网站即触发<br>\n学习通：检测概率～100%，任意使用 app 功能触发【最毒瘤的软件，基本上开一次断一次】</p>\n<p>那些有电脑版的软件大多不会触发，包括微信、QQ、网易云音乐等，因为电脑和手机软件大概率是用的同一个 UA，并且通常不包含操作系统信息。<br>\n校内网站虽然基本上都是 HTTP，但因为正常情况下你访问的时候会解析到内网地址，流量根本不经过防火墙，自然也就无法检测。</p>\n",
            "tags": [
                "网络"
            ]
        },
        {
            "id": "https://zjxdiu.github.io/blog/dynv6_notes/",
            "url": "https://zjxdiu.github.io/blog/dynv6_notes/",
            "title": "dynv6使用技巧（如何添加多个地址 子域名 等）",
            "date_published": "2023-03-03T09:00:00.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>因为 ipv6 普及度日益增加，在自己的环境里搭建简易服务器的想法就逐渐发芽；无论是用于博客网站、NAS 或私有云的搭建，还是用来开游戏服务器，都能够简单易行地实现（因为有公网 ipv6）。<br>\n不过，很多时候家庭环境下 ipv6 地址也会发生变化，尤其是电脑重启、宽带重拨的时候，那么如何在没有固定 ipv6 的情况下让别人能更容易找到我们的地址呢？很简单，当然是用 DDNS 了。<br>\nDDNS，也就是动态 DNS，将一个变化的 IP 绑定到域名上，通过脚本定时检测和更新地址，这样即使地址变化，域名解析出来的地址也会跟着变化，仍然可以使用同一个域名定位到同一个地址。</p>\n<h2 id=\"使用dynv6\"><a class=\"markdownIt-Anchor\" href=\"#使用dynv6\">#</a> 使用 dynv6</h2>\n<p>官网：<a href=\"https://dynv6.com/\">https://dynv6.com/</a><br>\n 首先用邮箱注册一个账号，接着进入 My Zones，点击 Create New Zone，在 Name 里输入你想要的网址名称和后缀类型，下面的地址可以先点击 Set current address，这样网页就会填入你的外网 IP 地址（应注意检查，ipv4 基本不会是跟电脑一致，但 ipv6 需要一致）。<br>\n<img src=\"../_resources/8007661dd2ee4a33be77ca500ec41a76.png\" alt=\"8007661dd2ee4a33be77ca500ec41a76.png\"></p>\n<p>点击创建后，若网址没有冲突，则创建成功；直接点击这个域名，上面有两个选项是可以自己修改的：status 和 records。</p>\n<h2 id=\"创建dns记录\"><a class=\"markdownIt-Anchor\" href=\"#创建dns记录\">#</a> 创建 DNS 记录</h2>\n<p>在 Status 里，点击 Edit Zone，将 ipv6 地址再次设为你的公网 ipv6 并保存，这样主域名就会直接解析到你的电脑上；<br>\n在 Records 里，可以编辑或删除现有的 AAAA 记录，也可以新增其他 DNS 记录。</p>\n<h3 id=\"创建子域名\"><a class=\"markdownIt-Anchor\" href=\"#创建子域名\">#</a> 创建子域名</h3>\n<p>点击 Add Record，选择 AAAA 类型（A 是 ipv4，AAAA 是 ipv6，CNAME 是网站别名一般用不到），前面的 name 里填写子域名前缀（<a href=\"http://xn--web-th2ek25abiifsffvwu74d.domainname.dynv6.net\">比如我要创建 web.domainname.dynv6.net</a>，那就在这里写 web），后面的地址里填写目标 ipv6 即可。</p>\n<hr>\n<h2 id=\"设置ddns自动更新\"><a class=\"markdownIt-Anchor\" href=\"#设置ddns自动更新\">#</a> 设置 DDNS 自动更新</h2>\n<p>提示：建议将此脚本部署于 Windows 服务器上，而非自己的电脑</p>\n<h3 id=\"下载wget和grep\"><a class=\"markdownIt-Anchor\" href=\"#下载wget和grep\">#</a> 下载 wget 和 grep</h3>\n<p>网上很多教程，这里列两个：<br>\n<a href=\"https://www.cnblogs.com/shenxiaolin/p/16662793.html\">windows 下 grep 的安装与使用</a><br>\n<a href=\"https://www.jianshu.com/p/a8dfc762ba3b\"> win10 安装 wget</a><br>\n 记得检查好环境变量，确定 cmd 下运行这两个命令有输出。</p>\n<h3 id=\"下载instsrvexe和srvanyexe\"><a class=\"markdownIt-Anchor\" href=\"#下载instsrvexe和srvanyexe\">#</a> 下载 instsrv.exe 和 srvany.exe</h3>\n<p><a href=\"https://www.cnblogs.com/zhaiqianfeng/p/4622561.html\">利用 instsrv 和 srvany 来手动安装服务</a></p>\n<h3 id=\"编写脚本\"><a class=\"markdownIt-Anchor\" href=\"#编写脚本\">#</a> 编写脚本</h3>\n<ol>\n<li>在特定路径下创建文件夹，将上述 instsrv.exe、srvany.exe 以及后续脚本均放在此处；</li>\n<li>创建 install_server.bat 文件：</li>\n</ol>\n<pre><code class=\"hljs bat\">@<span class=\"hljs-built_in\">echo</span> off\n<span class=\"hljs-built_in\">set</span> curexe=%~dp0\n<span class=\"hljs-built_in\">cd</span> /d <span class=\"hljs-variable\">%curexe%</span>\n&quot;<span class=\"hljs-variable\">%curexe%</span>instsrv.exe&quot; ddns_dynv6 &quot;<span class=\"hljs-variable\">%curexe%</span>srvany.exe&quot;\n@<span class=\"hljs-built_in\">echo</span> ddns_dynv6 服务添加完成\n\n@<span class=\"hljs-built_in\">echo</span> 修改服务路径\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\">REM 添加注册表语法: reg add 注册表路径 /v 项名称 /t 值类型 /d 数据 /f 表示强行修改不提示</span>\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\">REM 名称 Application 值为你要作为服务运行的程序地址 /d对应的参数有斜杠不是为了转义引号，而是路径还有斜杠，默认将引号转义了，额外添加斜杠是为了保留引号</span>\n \n<span class=\"hljs-built_in\">set</span> regpath=HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\ddns_dynv6\\Parameters\\\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\">REM 名称 AppDirectory 值为你要作为服务运行的程序所在文件夹路径</span>\nreg add <span class=\"hljs-variable\">%regpath%</span> /v AppDirectory /t REG_SZ /d &quot;<span class=\"hljs-variable\">%curexe%</span>\\&quot; /f\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\">REM 名称 AppParameters 值为你要作为服务运行的程序启动所需要的参数</span>\nreg add <span class=\"hljs-variable\">%regpath%</span> /v Application /t REG_SZ /d &quot;<span class=\"hljs-variable\">%curexe%</span>dynv6.bat&quot; /f\n \n<span class=\"hljs-built_in\">net</span> <span class=\"hljs-built_in\">start</span> ddns_dynv6\n \n<span class=\"hljs-built_in\">pause</span></code></pre>\n<ol start=\"3\">\n<li>创建 remove_server.bat 文件：</li>\n</ol>\n<pre><code class=\"hljs bat\">@<span class=\"hljs-built_in\">echo</span> off\n<span class=\"hljs-built_in\">net</span> stop ddns_dynv6\ninstsrv ddns_dynv6 remove\n<span class=\"hljs-built_in\">pause</span></code></pre>\n<ol start=\"4\">\n<li>创建 dynv6.bat 文件：</li>\n</ol>\n<pre><code class=\"hljs bat\">@<span class=\"hljs-built_in\">echo</span> off\n@<span class=\"hljs-built_in\">set</span> tempnum=\n@<span class=\"hljs-built_in\">set</span> ipaddr=\n@<span class=\"hljs-built_in\">set</span> oldipaddr=<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">1</span>\n<span class=\"hljs-comment\">rem domain=你注册的域名（dynv6.net 提供多种域名后缀可自行修改）</span>\n@<span class=\"hljs-built_in\">set</span> domain=【在这里填写你记录的域名，填zone名称】\n<span class=\"hljs-comment\">rem token=你注册后的钥匙（dynv6.net 提供）</span>\n@<span class=\"hljs-built_in\">set</span> token=【在这里填写你的token，把这段文字和括号删掉然后粘贴】\n@<span class=\"hljs-built_in\">set</span> IPV6_REGEX=&quot;\\(\\([<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">9</span>A-Fa-f]\\&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">4</span>\\&#125;:\\)\\&#123;<span class=\"hljs-number\">1</span>,\\&#125;\\)\\(\\([<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">9</span>A-Fa-f]\\&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">4</span>\\&#125;\\)\\&#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>\\&#125;\\)\\(\\(:[<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">9</span>A-Fa-f]\\&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">4</span>\\&#125;\\)\\&#123;<span class=\"hljs-number\">1</span>,\\&#125;\\)&quot;\n@<span class=\"hljs-built_in\">set</span> IPV4_REGEX=&quot;[<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">9</span>]\\&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>\\&#125;\\.[<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">9</span>]\\&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>\\&#125;\\.[<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">9</span>]\\&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>\\&#125;\\.[<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">9</span>]\\&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>\\&#125;&quot;\n@<span class=\"hljs-built_in\">set</span> URL=&quot;https://dynv6.com/api/update?hostname=<span class=\"hljs-variable\">%domain%</span>&amp;token=<span class=\"hljs-variable\">%token%</span>&amp;ipv4=<span class=\"hljs-variable\">%%i</span>paddr<span class=\"hljs-variable\">%%&quot;</span>\n@<span class=\"hljs-built_in\">set</span> URLV6=&quot;https://dynv6.com/api/update?hostname=<span class=\"hljs-variable\">%domain%</span>&amp;token=<span class=\"hljs-variable\">%token%</span>&amp;ipv6=<span class=\"hljs-variable\">%%i</span>paddr<span class=\"hljs-variable\">%%&amp;</span>ipv6prefix=<span class=\"hljs-variable\">%%i</span>paddr<span class=\"hljs-variable\">%%&quot;</span>\n@<span class=\"hljs-built_in\">set</span> BIN=wget -t <span class=\"hljs-number\">2</span> --prefer-family=IPv6 --no-dns-cache --no-check-certificate\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\">rem ***ipv4***（dynv6也提供ipv4动态域名服务）</span>\n<span class=\"hljs-comment\">rem for /F %%i in (&#x27;nslookup %domain% ns1.dynv6.com ^|grep -m2 -o %IPV4_REGEX%&#x27;) do ( set oldipaddr=%%i)</span>\n<span class=\"hljs-comment\">rem ***ipv6***</span>\n<span class=\"hljs-keyword\">for</span> /F <span class=\"hljs-variable\">%%i</span> <span class=\"hljs-keyword\">in</span> (&#x27;nslookup -qt^=AAAA <span class=\"hljs-variable\">%domain%</span> ns1.dynv6.com ^|grep -m2 -o <span class=\"hljs-variable\">%IPV6_REGEX%</span>&#x27;) <span class=\"hljs-keyword\">do</span> ( <span class=\"hljs-built_in\">set</span> oldipaddr=<span class=\"hljs-variable\">%%i</span>)\n \n@<span class=\"hljs-built_in\">echo</span> Current <span class=\"hljs-variable\">%domain%</span> IP Add:<span class=\"hljs-variable\">%oldipaddr%</span>\n \n:start_ip1\n<span class=\"hljs-comment\">rem @cls</span>\n@<span class=\"hljs-built_in\">echo</span> ... \n@<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-number\">1</span>.####从ip.sb获得地址####\n@<span class=\"hljs-built_in\">set</span> ip6addr=null\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\">REM ***ipv6***</span>\n<span class=\"hljs-keyword\">for</span> /F <span class=\"hljs-variable\">%%i</span> <span class=\"hljs-keyword\">in</span> (&#x27;<span class=\"hljs-variable\">%BIN%</span> -O- http://ip.sb  ^|grep -m <span class=\"hljs-number\">1</span> -o <span class=\"hljs-variable\">%IPV6_REGEX%</span>&#x27;) <span class=\"hljs-keyword\">do</span> (<span class=\"hljs-built_in\">set</span> ipaddr=<span class=\"hljs-variable\">%%i</span>)\n \n<span class=\"hljs-keyword\">if</span> &quot;<span class=\"hljs-variable\">%ipaddr%</span>&quot; == &quot;null&quot; (\n<span class=\"hljs-built_in\">echo</span> 没有IPV6地址或获得IPV6地址失败\ntimeout <span class=\"hljs-number\">5</span>\n<span class=\"hljs-keyword\">goto</span> start_ip2\n) <span class=\"hljs-keyword\">else</span> (\n<span class=\"hljs-built_in\">echo</span> 获得IP地址:<span class=\"hljs-variable\">%ipaddr%</span>，旧IP地址:<span class=\"hljs-variable\">%oldipaddr%</span>\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">NOT</span> &quot;<span class=\"hljs-variable\">%oldipaddr%</span>&quot; == &quot;<span class=\"hljs-variable\">%ipaddr%</span>&quot; (\n<span class=\"hljs-built_in\">echo</span> ---更新IP---\n<span class=\"hljs-keyword\">goto</span> update_web_ip\n) <span class=\"hljs-keyword\">else</span> (\n<span class=\"hljs-built_in\">echo</span> IP没有改变\ntimeout <span class=\"hljs-number\">300</span>\n<span class=\"hljs-built_in\">cls</span>\n<span class=\"hljs-keyword\">goto</span> start_ip2\n))\n \n:start_ip2\n@<span class=\"hljs-built_in\">ipconfig</span> /flushdns\n@<span class=\"hljs-built_in\">echo</span> ...\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-number\">2</span>.####从checkip.dyndns.com获得地址####\n@<span class=\"hljs-built_in\">set</span> ipaddr=null\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\">REM ***ipv4***</span>\n<span class=\"hljs-comment\">rem for /F %%i in (&#x27;%BIN% -O- http://checkip.dyndns.com ^|grep -m 1 -o %IPV4_REGEX%&#x27;) do (set ipaddr=%%i)</span>\n<span class=\"hljs-comment\">REM ***ipv6***</span>\n<span class=\"hljs-keyword\">for</span> /F <span class=\"hljs-variable\">%%i</span> <span class=\"hljs-keyword\">in</span> (&#x27;<span class=\"hljs-variable\">%BIN%</span> -O- http://checkipv6.dyndns.com ^|grep -m <span class=\"hljs-number\">1</span> -o <span class=\"hljs-variable\">%IPV6_REGEX%</span>&#x27;) <span class=\"hljs-keyword\">do</span> (<span class=\"hljs-built_in\">set</span> ipaddr=<span class=\"hljs-variable\">%%i</span>)\n \n<span class=\"hljs-keyword\">if</span> &quot;<span class=\"hljs-variable\">%ipaddr%</span>&quot; == &quot;null&quot; (\n<span class=\"hljs-built_in\">echo</span> 没有IP地址或获得IP地址失败\ntimeout <span class=\"hljs-number\">5</span>\n<span class=\"hljs-keyword\">goto</span> start_ip1\n) <span class=\"hljs-keyword\">else</span> (\n<span class=\"hljs-built_in\">echo</span> 获得IP地址:<span class=\"hljs-variable\">%ipaddr%</span>，旧IP地址:<span class=\"hljs-variable\">%oldipaddr%</span>\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">NOT</span> &quot;<span class=\"hljs-variable\">%oldipaddr%</span>&quot; == &quot;<span class=\"hljs-variable\">%ipaddr%</span>&quot; (\n<span class=\"hljs-built_in\">echo</span> ---更新IP---\n<span class=\"hljs-keyword\">goto</span> update_web_ip\n) <span class=\"hljs-keyword\">else</span> (\n<span class=\"hljs-built_in\">echo</span> IP没有改变\ntimeout <span class=\"hljs-number\">300</span>\n<span class=\"hljs-built_in\">cls</span>\n<span class=\"hljs-keyword\">goto</span> start_ip2\n))\n \n \n:update_web_ip\n@<span class=\"hljs-built_in\">echo</span> ==============================================\n@<span class=\"hljs-built_in\">echo</span> ipaddr=&quot;<span class=\"hljs-variable\">%ipaddr%</span>&quot;\n@<span class=\"hljs-built_in\">echo</span> ==============================================\n@<span class=\"hljs-built_in\">set</span> var=null\n<span class=\"hljs-comment\"> </span>\n<span class=\"hljs-comment\">REM ***ipv4***</span>\n<span class=\"hljs-comment\">rem for /F &quot;tokens=*&quot; %%i in (&#x27;%BIN% -O- %URL%&#x27;) do (set var=%%i)</span>\n<span class=\"hljs-comment\">REM ***ipv6***</span>\n<span class=\"hljs-keyword\">for</span> /F &quot;tokens=*&quot; <span class=\"hljs-variable\">%%i</span> <span class=\"hljs-keyword\">in</span> (&#x27;<span class=\"hljs-variable\">%BIN%</span> -O- <span class=\"hljs-variable\">%URLV6%</span>&#x27;) <span class=\"hljs-keyword\">do</span> (<span class=\"hljs-built_in\">set</span> var=<span class=\"hljs-variable\">%%i</span>)\n \n<span class=\"hljs-built_in\">echo</span> 更新信息=<span class=\"hljs-variable\">%var%</span>\n<span class=\"hljs-keyword\">if</span> &quot;<span class=\"hljs-variable\">%var%</span>&quot; == &quot;addresses updated&quot; <span class=\"hljs-keyword\">goto</span> end\n<span class=\"hljs-built_in\">echo</span> 更新失败\ntimeout <span class=\"hljs-number\">120</span>\n<span class=\"hljs-keyword\">goto</span> start_ip2\n \n:end\n<span class=\"hljs-built_in\">set</span> oldipaddr=<span class=\"hljs-variable\">%ipaddr%</span>\n<span class=\"hljs-built_in\">echo</span> 更新数据成功\ntimeout <span class=\"hljs-number\">300</span>\n<span class=\"hljs-keyword\">goto</span> start_ip2\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\">REM 以上每个TIMEOUT指令都表示等待一定时间（秒），可以按实际情况修改</span>\n<span class=\"hljs-comment\">REM 我这里的300秒应该是够用的，太短了占用过多资源，太长了更新不及时</span></code></pre>\n<h2 id=\"开机自启动\"><a class=\"markdownIt-Anchor\" href=\"#开机自启动\">#</a> 开机自启动</h2>\n<p>创建一个计划任务即可，详情可百度教程</p>\n",
            "tags": [
                "网络",
                "游戏"
            ]
        },
        {
            "id": "https://zjxdiu.github.io/blog/Network_progress_CSUST/",
            "url": "https://zjxdiu.github.io/blog/Network_progress_CSUST/",
            "title": "长沙理工大学无线网络多设备共享解决方案",
            "date_published": "2023-02-24T14:07:00.000Z",
            "content_html": "<h1 id=\"本文内容已过时请查看新版解决方案\"><a class=\"markdownIt-Anchor\" href=\"#本文内容已过时请查看新版解决方案\">#</a> 本文内容已过时，请查看<a href=\"openclash_80_proxy.html\">新版解决方案</a></h1>\n<h2 id=\"引用\"><a class=\"markdownIt-Anchor\" href=\"#引用\">#</a> 引用</h2>\n<p>本文大部分内容可参考：<br>\n<a href=\"https://www.mr-cn.net/2021/06/15/Share-your-network-in-CSUST/\">长沙理工大学：校园网解除共享限制</a><br>\n路由器刷机参考教程（非本次使用）：<br>\n<a href=\"https://www.right.com.cn/FORUM/thread-489907-1-1.html\">极路由 Enjoy 1200  HC5861B OpenWRT 固件 Rosy 主题</a><br>\n如何下载固件：<br>\n<a href=\"http://opt.cn2qq.com/padavan/\">padavan 固件下载列表</a></p>\n<h2 id=\"原因与现象\"><a class=\"markdownIt-Anchor\" href=\"#原因与现象\">#</a> 原因与现象</h2>\n<p>为了维护运营商利益，校园网设置了一些检测与规则，对同时登录校园网的设备数量作出了严格的限制，并且不允许终端用户进行网络共享。<br>\n具体表现为，当用户使用电脑、手机等的热点、无线信号桥等方法时，只要有第二台设备联网，就会在一定条件下被检测发现，随后此账号将无法访问网络，并自动将网页重定向到登录界面（或 1.1.1.3，但这个页面不能加载出来）。</p>\n<h2 id=\"原理\"><a class=\"markdownIt-Anchor\" href=\"#原理\">#</a> 原理</h2>\n<p>根据引用文章，可以得知共享检测主要通过 80 端口下的 HTTP 报文中浏览器 UA 的区别来实现，可以看到这个限制条件比较多，而且检测周期并不短；因此会出现稳定共享的时间时长时短的现象。<br>\n此外，还可能会通过其他方法检测，包括但不限于 TTL、IPID、侵入式检测等等。</p>\n<h2 id=\"准备工作\"><a class=\"markdownIt-Anchor\" href=\"#准备工作\">#</a> 准备工作</h2>\n<p>为实现稳定的校园网共享，首先需要选择正确的系统：必须使用 OpenWRT 或 Pavanda 等软路由系统。<br>\n本文基于 Pavanda 操作。</p>\n<h3 id=\"路由选型\"><a class=\"markdownIt-Anchor\" href=\"#路由选型\">#</a> 路由选型</h3>\n<p>如果你还没有软路由或者合适的路由器，那么选购路由器就是第一步了。我最终的选择是二手极路由 Enjoy 1200，型号 HC5861B。极路由虽然已经倒闭，但它的产品可玩性和性价比确实是相对较好的。<br>\n淘宝入手价格 40 元，由商家代刷 Breed。<br>\n需要注意的是，这一款路由器不支持 USB，电源接口也是 12V DC 而非 5V Micro-USB，如果有这两个功能需求的话可以考虑极路由 3 或其他产品。</p>\n<h3 id=\"检查与刷机\"><a class=\"markdownIt-Anchor\" href=\"#检查与刷机\">#</a> 检查与刷机</h3>\n<p>收货后先简单清理积灰，检查网口是否有积聚大量灰尘，天线是否正常连接、旋转。<br>\n随后插入电源开机，连接电脑网口到路由器 LAN 1 口，等待 IP 自动配置完成，进入默认网关的地址（本次为 192.168.132.1，极路由原厂固件可能为 192.168.199.1）<br>\n使用默认的管理员账号密码（admin）登录后，发现这台机器已经刷好了老毛子固件（Padavan）了：<br>\n<img src=\"../_resources/54de7cdf47ce563bb65d5c42e282e331.png\" alt=\"54de7cdf47ce563bb65d5c42e282e331.png\"><br>\n 所以省下了很多时间，虽然我的计划是使用 OpenWrt，但 Padavan 本质上是一样的。<br>\n如果需要刷机教程，请参考引用文章，或直接搜索路由型号 + OpenWrt，即可找到一些刷机教程。</p>\n<h2 id=\"网络拓扑\"><a class=\"markdownIt-Anchor\" href=\"#网络拓扑\">#</a> 网络拓扑</h2>\n<p><img src=\"../_resources/15828e53952c884a9b9f9f1cc11b7c77.png\" alt=\"15828e53952c884a9b9f9f1cc11b7c77.png\"><br>\n 我的目标是达成这样的拓扑，实际上就是一个无线 “路由”，也就是将无线信号作为 WAN，执行 NAT 和防火墙规则后建立子网，设备均接入子网中。</p>\n<h2 id=\"基础配置\"><a class=\"markdownIt-Anchor\" href=\"#基础配置\">#</a> 基础配置</h2>\n<h3 id=\"路由器接入无线网络\"><a class=\"markdownIt-Anchor\" href=\"#路由器接入无线网络\">#</a> 路由器接入无线网络</h3>\n<p>直接参考这张图即可：<br>\n<img src=\"../_resources/d6035076edef8fc78299e3af690eea62.png\" alt=\"d6035076edef8fc78299e3af690eea62.png\"><br>\n2.4G 和 5G 只能有一个用于 AP-Client，另一个必须禁用桥接。<br>\n需要注意的是，路由器需要用一个频段接入校园网，另一个频段用于发射信号；虽然可以选择 client+AP 来实现单频复用，实际上只用 5GHz 的话效果也不错，但我收到的这台路由器不知道为何 5G 能力极其孱弱（无遮挡 50cm 距离下 client 都不能跑满协商速率），而 2.4G 能力极强（对周围的无线鼠标、蓝牙手柄等造成严重干扰），因此这里不使用这种方法。<br>\n<strong>补充：后面换了一台 JCG Q20，TB 到手 60 块，不仅支持 WiFi6 而且性能远强于前面买的极路由，有需要的同学可以参考购买。这玩意就完全可以 5GHz 同时用于 client 和 AP 了，2.4GHz 只用来保留兼容性即可。</strong></p>\n<p><strong>懒得删改的原文：</strong><br>\n<em>这里还涉及到频段的选择，最开始我使用 2.4G 接入校园网、5G 用于共享，但随后我发现无线鼠标的工作会受到较严重的干扰（接收器也工作在 2.4G 频率上），因此后续改为 5G 接入、2.4G 共享。<br>\n此外，网络性能也是一个需要关心的重点，5GHz 总能提供更优秀的表现，但这里我们只能用于一个目的；由于我平时主要使用电脑上网，而电脑是通过网线连接到路由器的，因此选择 5G 接入是更好的。实际上，这种情况下 2.4G 的表现也不差，宿舍面积小、干扰少，多次测试下来延迟在 30ms 以内，速度 8-9MB/s，可以满足 1080P 视频观看和正常游戏。</em></p>\n<h3 id=\"修改网络配置\"><a class=\"markdownIt-Anchor\" href=\"#修改网络配置\">#</a> 修改网络配置</h3>\n<p>如果对内网网段不敏感（例如你只想要正常上网，平时不开发网页、软件、游戏、不做任何测试，那么这一段可以跳过）<br>\n在左侧选择外部网络（WAN），可参考下图配置：<br>\n<img src=\"../_resources/e613ab56c89c86b939bf67ab5601fc42.png\" alt=\"e613ab56c89c86b939bf67ab5601fc42.png\"></p>\n<p>LAN 配置同理，设置想要的网段、DNS、静态路由等。</p>\n<h2 id=\"通过nat连接ipv6\"><a class=\"markdownIt-Anchor\" href=\"#通过nat连接ipv6\">#</a> 通过 NAT 连接 ipv6</h2>\n<p>由于我希望使用到正常的 ipv6，故单独在此写出方案；对于绝大多数日常网络而言，关闭 ipv6 可能反而有助于提高稳定性。<br>\n参考文章：<a href=\"https://post.smzdm.com/p/ad9qkz9k/\">校园网环境下 Openwrt 配置 ipv6 教程 —— 以 nat6 为例</a></p>\n<ul>\n<li>\n<p>NAT 是什么？<br>\nNAT 是最早出现在 ipv4 中的技术；由于 ipv4 地址空间有限（总约 42 亿个），无法满足爆炸式增长的网络设备入网需求，因此出现了网络地址转换（Network Address Translation）技术；它的作用就是缓解 ipv4 地址消耗，尽量在 ipv6 部署完全之前满足原有上网需求。<br>\n它的工作原理很简单，我们平时使用路由器上网的时候就至少会有一次 NAT 过程，路由器将一个外网（全球唯一）的地址映射到多个内网地址（通常为 192.168.x.x 或 10.x.x.x），这样一个路由器下的设备就可以共用一个外网 IP，大幅缓解了地址消耗，同时解决了耗尽的影响。<br>\nNAT 有助于提高网络安全性，因为路由器上可以部署非常高效的防火墙，也可以天然阻断所有传入连接，但这样的技术也会带来问题；最大的问题无疑就是点对点连接变得不可能，因此游戏联机、网站建设等都会变得很困难。<br>\n在我的使用场景下，Minecraft 联机是最常见的点对点连接应用，此前的解决方案均为 FRP 内网穿透（见前文章）。</p>\n</li>\n<li>\n<p>为什么我一定要有 ipv6 连接？<br>\n很简单，ipv6 地址池极大，运营商也并未刻意限制用户的 ipv6 访问（至少我没有遇到过哪个运营商在 ipv6 上用 NAT 的）<strong>（但是教育网除外）</strong>。<br>\n因此，大多数用户只要开启了 ipv6，就能获取到公网 IP。这对于点对点连接来说无疑是非常有帮助的。</p>\n</li>\n<li>\n<p>教育网干了什么？<br>\n一般运营商在家用、商用宽带里分配的 ipv6 都带有一个 / 64 的前缀，这意味着路由器拿到的地址里面还包含了大量的可用地址（约 1800 万兆个地址；1 兆 = 1 万亿（也就是 18446744073709551616）），用于给后续设备分配 ipv6 地址；<br>\n但教育网的 ipv6 则直接分配了 / 128 的地址，这就意味着它给你的地址只能用于一台设备。也就是说，想要共享 ipv6，必须使用 NAT。</p>\n</li>\n</ul>\n<h3 id=\"如何使用napt66\"><a class=\"markdownIt-Anchor\" href=\"#如何使用napt66\">#</a> 如何使用 NAPT66</h3>\n<p>NAPT66 模块是 padavan 使用的一个解决方案，所谓 NAPT 其实是现在 NAT 的正确称呼，也就是 Network Address Port Translation。因为一对多 NAT 的情况下涉及到端口转换，相当于用端口数换 IP 数，所以 NAPT 才是准确的说法。<br>\n请按照你的路由器型号查找最新的 padavan 固件，并进行固件更新；在新版 PDCN 固件中直接内置了 NAPT66 的一键开关和配置，只需在 ipv6 设置页面底部点击一键填写配置，然后重启路由器和电脑网卡即可使用。</p>\n<hr>\n<h2 id=\"更多参考信息\"><a class=\"markdownIt-Anchor\" href=\"#更多参考信息\">#</a> 更多参考信息</h2>\n<p>如果你的路由器使用的固件特殊，没有内置一键 NAPT66，则可参考：<a href=\"https://doge.uk/coding/padavan-ipv6-napt66.html\">Padavan 路由下使用 NAPT66 模块访问移动 IPV6 网络</a></p>\n",
            "tags": [
                "网络"
            ]
        },
        {
            "id": "https://zjxdiu.github.io/blog/ipv6_toss/",
            "url": "https://zjxdiu.github.io/blog/ipv6_toss/",
            "title": "记一次折腾电信ipv6中的各种问题",
            "date_published": "2023-01-20T13:37:00.000Z",
            "content_html": "<p>阅前提示：本文约 5000 字，预计阅读时长 &gt; 5 分钟。</p>\n<h2 id=\"起因\"><a class=\"markdownIt-Anchor\" href=\"#起因\">#</a> 起因</h2>\n<p>由于想跟好友联机 minecraft，而使用 natfrp 做内网穿透时发现有很多问题，包括延迟高且不稳定、速率低、流量限制、高峰时期断连等。刚好想起来家里的网络已经被我启用了 ipv6，因此试图使用 ipv6 来直接对公网开放 minecraft 服务器。</p>\n<h2 id=\"开始第一次尝试\"><a class=\"markdownIt-Anchor\" href=\"#开始第一次尝试\">#</a> 开始第一次尝试</h2>\n<p><strong>当前状态：</strong></p>\n<ul>\n<li>光猫使用路由模式，自主拨号并获取两种 ip 地址（除非特殊说明，否则以下简称 ip）</li>\n<li>无线路由器（下简称路由器）使用路由模式</li>\n<li>所有设备连接在路由器上，并能获取到 ip</li>\n</ul>\n<p><img src=\"../_resources/a941e7dad288e2bd65c297c76503f111.png\" alt=\"a941e7dad288e2bd65c297c76503f111.png\"></p>\n<p><strong>当前问题：</strong></p>\n<ul>\n<li>首先尝试外网直接连接服务器 ipv6，失败</li>\n<li>外网无法 ping 通任何内网主机</li>\n<li>光猫获取到的 ipv6 地址仍然无法通过外网 ping 通</li>\n<li>在光猫中设置端口映射或 DMZ 主机，无效</li>\n</ul>\n<p>实际上，上述内容已经花了我一下午来检查和排查；网上搜索相关内容，有人说<s>获取到的 ipv6 是 240e 开头的，说明是经过了 NAT（类似 ipv4，所以肯定访问不到）</s>；但是这种说法显然有问题，首先 ipv6 只有在特殊环境下才需要 NAT，其次 2 开头的地址至少不是内网地址。<br>\n另有说法称，运营商（我用的是电信）会用防火墙屏蔽入站流量，防止你开服务器。根据我的实验，这个说法是正确的。</p>\n<p>随后开始折腾，既然防火墙阻碍了我，那我关掉就好。<br>\n但是现实很惨淡，运营商早就猜到你会搞这一手，所以直接不允许你关闭防火墙。<br>\n这里包括了最后的那个防止 ICMP 包攻击，还有其他的防火墙直接不显示。<br>\n<img src=\"../_resources/7d186301818af5165a407c1751fb848c.png\" alt=\"7d186301818af5165a407c1751fb848c.png\"></p>\n<h3 id=\"换个地方拨号\"><a class=\"markdownIt-Anchor\" href=\"#换个地方拨号\">#</a> 换个地方拨号？</h3>\n<p>网上提供了一种解决思路，即光猫改桥接、使用路由器进行拨号；这样做有一些好处，例如路由器的性能更强、可以提供更快的网速，以及很高的可玩性、灵活性等等，这里直接把路由器换成软路由就能实现非常多的玩法，因此我就着手开始改桥接。</p>\n<p>改的过程实际上非常简单，找到宽带的账号密码，进入光猫的超级用户，然后直接改桥接即可。<br>\n<img src=\"../_resources/bc81d148f88500f57dbadabcf8080770.png\" alt=\"bc81d148f88500f57dbadabcf8080770.png\"></p>\n<hr>\n<p>随后，将路由器设置为 PPPoE 拨号连接；这里就不放图了，各家路由器的配置流程都是一回事。<br>\n关闭路由器的防火墙，现在，所有的设备又能重新获取到 ip，且具有公网 ipv6 地址。当然由于 Windows 防火墙的配置，需要关闭 Windows 的防火墙才能从外网 ping 通。<br>\n大获全胜！网速也提升到了 570M（家里办理的 500M 宽带，如果直接从光猫拨号 + 路由，则速度最高 470M）<br>\n<img src=\"../_resources/cbdb76297f0af4d4d3837f421060eb67.png\" alt=\"cbdb76297f0af4d4d3837f421060eb67.png\"></p>\n<p>同时，Minecraft 也能正常从外网通过 ipv6 连接，看起来一切完美。</p>\n<hr>\n<h2 id=\"核心问题网页无法访问\"><a class=\"markdownIt-Anchor\" href=\"#核心问题网页无法访问\">#</a> 核心问题：网页无法访问</h2>\n<p>一切完美？当然是不可能的。一定会出问题，而且是大问题。<br>\n配置好 ipv6 之后，一开始所有设备工作正常，网速和解析速度起飞。<br>\n然后，用了半个小时左右，问题开始逐步显现。<br>\n最开始，我在网上搜索一个 Windows 方面的配置问题，并且点进去了一个博客园的链接。然后，网页并没有按照我预想中的那样飞快加载，而是不断转圈。<br>\n最后：<br>\n<img src=\"../_resources/84c01f9cc1ebf56595e7d025fc4a0617.png\" alt=\"84c01f9cc1ebf56595e7d025fc4a0617.png\"></p>\n<p>一开始我以为这是必应的中转链接出现问题了（百度日常），因为点击必应的搜索结果并不是直接访问目标网址，而是先通过一个必应的链接重定向到目标。这个重定向有时候会失败，是正常的。但是，我直接访问目标网址时，居然也不能进去，这就非常奇怪了。<br>\n这时候我还是乐观的心态，认为是博客园的服务器出了问题，也没有去其它设备上尝试。但我仍然重视了这个问题，并立即去搜索解决方法。因为是开了路由器拨号 + ipv6 之后才出现的问题，所以查找方向也很明确了。结果，就在我查找的过程中，发现了更多的问题。<br>\n百度经验、百度知道、百度贴吧、知乎… 这些网站一个接一个地挂掉；有时候网站一开始能正常访问，再开的时候就加载不出 JS 和 CSS（变成了没有渲染的样式，仅限知乎），然后就是一样的不响应。症状跟博客园完全一致，控制台里没有任何有效信息，只有一个响应超时。</p>\n<hr>\n<h3 id=\"先恢复正常访问\"><a class=\"markdownIt-Anchor\" href=\"#先恢复正常访问\">#</a> 先恢复正常访问</h3>\n<p>一通摸索之后，我找到了暂时恢复的方法：在网卡选项里禁用 ipv6（Internet 协议版本 6）。<br>\n禁用后，所有网页恢复正常，但这显然不可取，因为我的目的就是使用 ipv6，而禁用它也就丧失了所有 ipv6 能力。<br>\n需要注意的是，现在出问题的网站都不是纯 ipv6 站点，有些是纯 ipv4 站点，但双栈域名居多。这时候访问纯 ipv6 网站是全部成功的，ipv6 测试也是全绿通过，并且无论何种类型的网站都有大量能成功访问的。</p>\n<h3 id=\"退一步试试\"><a class=\"markdownIt-Anchor\" href=\"#退一步试试\">#</a> 退一步试试</h3>\n<p>退一步，指的就是我找到一种方法，让浏览器只使用或优先使用 ipv4 进行访问。<br>\n因为出问题的只有浏览器，我电脑里其它软件全都正常运行。<br>\n<em>后续补充：今天发现 Windows 版的微信也不能正常使用，二维码加载不出来，禁用 ipv6 后恢复。</em>。<br>\n但是，网上相关的教程极少甚至没有，偶有几个是针对 Firefox 或 chrome 的，而我使用的是 edge；就算我能参考 chrome，教程也是针对 Linux 而非 Windows。</p>\n<h3 id=\"再退一步\"><a class=\"markdownIt-Anchor\" href=\"#再退一步\">#</a> 再退一步</h3>\n<p>好的，如果浏览器不行，那我就找个方法让整个操作系统都优先使用 ipv4。<br>\n微软提供了一个文档，通过<a href=\"https://learn.microsoft.com/en-US/troubleshoot/windows-server/networking/configure-ipv6-in-windows\">修改注册表的方法</a>来实现全局优先 ipv4、禁用 ipv6、优先 ipv6 等等。<br>\n一看到这里，我立即兴奋地尝试了。改了注册表，重启，访问：</p>\n<p><code>ERR_TIMED_OUT</code>  .png</p>\n<p>好，居然没用。微软，不愧是你。<br>\n重启很多次无效，当时已经半夜 2:30，我没有了折腾的心情，只想赶紧睡觉。</p>\n<h2 id=\"第一次折腾失败\"><a class=\"markdownIt-Anchor\" href=\"#第一次折腾失败\">#</a> 第一次折腾失败</h2>\n<p>网上又找了很多相同症状的用户，解决方案要么是改注册表，要么是说路由器兼容性有问题。<br>\n好吧，反正跟我联机的同学也不是很在意，natfrp 似乎还能继续用用。<br>\n于是，彻底宣告失败，我重新改回了光猫拨号、路由桥接，随后所有网络恢复正常（除了外网还是不能访问这里的所有 ipv6；当然，也包括 ipv4，因为有 NAT）。</p>\n<p>这就结束了吗？怎么可能，不搞到好用我是不会罢休的。<br>\n于是，第二天，我又开始了新一轮的折腾。</p>\n<hr>\n<h2 id=\"第二次尝试\"><a class=\"markdownIt-Anchor\" href=\"#第二次尝试\">#</a> 第二次尝试</h2>\n<p>重新尝试，同样的光猫改桥接，同样的路由器拨号。同样的正常 ipv6 公网访问，但是这一次似乎是运气比较好，网页访问全部正常使用，并且坚持了至少 4 个小时。<br>\n中途离家 4 小时，回来之后，惊喜地发现，这些网页又打不开了 😃<br>\n这时候我就已经明白，无论怎么修改电脑或者路由器配置都无效，于是没有再做尝试，转而对现在的情况进行分析，并希望通过其它方法解决需求。</p>\n<h3 id=\"转机\"><a class=\"markdownIt-Anchor\" href=\"#转机\">#</a> 转机</h3>\n<p>在我整理思路的时候，我意识到，实际上我只需要服务器一台电脑能够获取正常入站的 ipv6 地址（正常的 ipv6）即可，其余设备甚至根本不需要启用 ipv6。这时候，我首先想到的就是：</p>\n<h4 id=\"一号多拨\"><a class=\"markdownIt-Anchor\" href=\"#一号多拨\">#</a> 一号多拨</h4>\n<p>一号多拨，指的是我通过同一个光猫，使用同一个宽带账号，分别在两台设备上进行拨号。<br>\n我的最初想法是，服务器电脑直连光猫并自己拨号获取正常的 ipv6 地址，同时路由器也自己拨号，但只启用 ipv4。<br>\n网上搜索发现，这种方法当然是可行的，前提是运营商支持多拨。</p>\n<p><code>折腾中</code></p>\n<p>没有任何侥幸，拨号失败。电脑上尝试第二次拨号时直接返回错误 629。</p>\n<p>再换一种角度，重新分析我的需求。服务器能使用正常的 ipv6，同时其余设备仅需要 ipv4（最多需要 ipv6 内网而非公网访问）。因此，我做了如下操作，来使得二者兼顾。</p>\n<hr>\n<h2 id=\"最终如何解决\"><a class=\"markdownIt-Anchor\" href=\"#最终如何解决\">#</a> 最终如何解决</h2>\n<p>如果你的需求和遇到的问题跟我完全一样，那么也许可以参考我的方法来临时解决。<br>\n<strong>提示：最终的解决方案也并不完美，只不过暂时保证了两边可以都解决主要矛盾</strong><br>\n以下是我的解决方案：</p>\n<h3 id=\"1-将路由器的内网ipv6地址分发从无状态改为有状态\"><a class=\"markdownIt-Anchor\" href=\"#1-将路由器的内网ipv6地址分发从无状态改为有状态\">#</a> 1. 将路由器的内网 ipv6 地址分发从无状态改为有状态。</h3>\n<p>无状态获取指的是机器自己配置地址，然后通过 NDP 等方式确定地址有效性即可；有状态获取类似 DHCP，不过分配的地址是 ipv6。<br>\n这一步解决了手机联网的问题；由于我的网络环境中手机为主要设备，而安卓系统并不支持通过 DHCPv6 进行有状态获取 ipv6 地址；于是所有的手机都只能通过 ipv4 联网，解决了所有上网问题。</p>\n<h3 id=\"2-为电脑配置虚假或者无效的ipv6地址\"><a class=\"markdownIt-Anchor\" href=\"#2-为电脑配置虚假或者无效的ipv6地址\">#</a> 2.  为电脑配置虚假或者无效的 ipv6 地址</h3>\n<p>这是我在测试的时候忽然想到的主意，既然 ipv4 地址在手动配置错误的情况下无法联网，那么 ipv6 应该也是一样的。<br>\nipv6 中同样有很多保留地址，例如 <code>fe80</code>  开头的地址表示本地链路地址，无法进行跨子网路由，因此给我自己的电脑配置一个 <code>fe80::1</code>  的地址即可。<br>\n配置后，网卡状态中 IPv6 连接变为<strong>无 Internet 访问权限</strong>，使用 <code>ipconfig /all</code>  查看 IP 地址，发现手动配置的 ipv6 地址变成了<strong>本地链接 IPv6 地址</strong>。<br>\n<img src=\"../_resources/054913f5d395b1e809f0d7830e64c948.png\" alt=\"054913f5d395b1e809f0d7830e64c948.png\"><br>\n 此外，这里网卡仍然获取到了一个 IPv6 地址，但后面提示（<strong>复制</strong>），检查其地址发现这个地址是我的服务器电脑的公网 ipv6 地址（因此在此处打码作保护）；这可能是一些其它方面的机制，但并不影响服务器和我的电脑的正常工作。同时，由于内网 ipv6 地址被正常配置，我仍然可以通过内网 ipv6 来访问服务器（包括文件服务器、网页服务器、minecraft 和远程桌面）。<br>\n这一步解决了环境中主要的电脑设备：我自己的使用需求。当然没有完全解决，纯 ipv4 模式下访问部分双栈网站时速度还是比较慢，但能够正常使用已经是极其难得了。</p>\n<h3 id=\"3-为windows-11配置\"><a class=\"markdownIt-Anchor\" href=\"#3-为windows-11配置\">#</a> 3. 为 Windows 11 配置</h3>\n<p>环境中存在另一台常用的电脑，而它搭载的是 Windows 11 家庭版。<br>\n在 win11 下可以执行相同的步骤进行配置，只不过需要多出一个步骤：<strong>你需要在系统设置中手动设置 ipv6 DNS，而不能使用自动获取。</strong><br>\n这一步是因为，即便手动配置了 ipv6 地址，win11 似乎也不会立即使用，而是先试图通过 DHCP 等方法获取 ipv6 地址以及 DNS 服务器等；而在自动获取 DNS 的过程中，路由器很可能就为它分配了一个 ipv6 地址，导致我们自己设置的地址完全变成内网地址，而无法实现目的。</p>\n<hr>\n<h2 id=\"结语\"><a class=\"markdownIt-Anchor\" href=\"#结语\">#</a> 结语</h2>\n<p>至此，全部流程结束，解决方案全部执行。服务器正常接受公网入站流量，其余设备配置后均能实现正常上网。</p>\n<p>但是，我并不对现在的解决方案满意。原因很简单，我开 ipv6 不仅是为了服务器使用，更是为了提高日常上网体验，同时接轨最新技术（虽然 ipv6 都是 12 年前的玩意了）；现在虽然解决了问题，但并未达成全部目的，因为除了服务器主机以外没有设备能够正常使用 ipv6 的。这个方法顶多也就临时用用，实际上我也就这一个寒假的需求，假期结束返校前肯定会恢复光猫拨号的，因为服务器主机之后只作为内网打印服务器，不再有公网访问需求。此外，每次新加一台电脑，都需要这样设置一遍无效的 ipv6 地址，以便正常访问网页。<br>\n所以，整体看下来，其实只是在两边的矛盾中取了一个居中妥协的值，为主要矛盾作了让步。我也不是每天都会折腾网络，更多时候还是希望它日常使用能稳定；但我又不希望放弃服务器的公网访问，因此这两者就是核心问题，而最终的方案也就向这两个问题进行妥协。<br>\nAnyway，反正问题算是解决了，但愿 ipv6 的部署进度还能快一点吧（</p>\n<hr>\n<p>明天就是除夕了，浅放一张 AI 画的胡桃吧，祝大家新年快乐！<br>\n<em>胡桃没画成，人要么太大要么太小，随便搞了个背景算了（）</em><br>\n<img src=\"../_resources/7c8d8e5459a9f8cd83c33281ca1aa262.png\" alt=\"7c8d8e5459a9f8cd83c33281ca1aa262.png\"></p>\n",
            "tags": [
                "网络",
                "游戏"
            ]
        }
    ]
}