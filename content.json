{"meta":{"title":"zjxdiu~blog site","subtitle":"","description":"","author":"zjxdiu","url":"https://zjxdiu.github.io","root":"/"},"pages":[{"title":"欢迎来到zjxdiu'博客站！","date":"2023-12-10T13:11:55.479Z","updated":"2023-08-29T06:58:50.872Z","comments":true,"path":"about/index.html","permalink":"https://zjxdiu.github.io/about/index.html","excerpt":"","text":"# 关于本站 站点记录：点击查看 # 个人资料 我的简历：点击查看 就读于长沙理工大学，今年大三。 什么领域都想涉及，软件、硬件、网络工程、音乐制作、音频处理、视频剪辑、游戏开发、平面设计… 但实际上并没有哪个是学得很好的。 喜欢尝试新事物，对于各类现代技术的学习热情高。 我的 16 人格类型： 类型 精神 精力 本性 对策 特性 测试时间 INFP-A (点击查看) 75% 内向 83% 直觉型 64% 感受型 75% 展望型 63% 坚决 2022.11.30 INFP-A (点击查看) 72% 内向 67% 直觉型 74% 感受型 65% 展望型 61% 坚决 2023.5.1 等待下次测试… 测试您的类型↓ 点击进入 请注意，该人格分类法较为粗略，仅供参考和娱乐，请避免用于重大决策中！ # 联系方式等 可以通过以下方式联系我： TEL：+86 185 6963 5980 常用平台 id：zjxdiu QQ：2987631086 请在添加好友时说明你是从哪里找到我号码的，否则可能不会同意申请 E-mail：zjxdiu@qq.com 可以用于提交各种东西，向我提问，等等 友情链接请通过以下模板提交邮件 主题：zjxdiu blog 友情链接提交 正文： 【你的id】: link: 【你的链接地址】 avatar: 【头像图片地址】 desc: 【描述语句】"},{"title":"站点记录","date":"2023-12-10T13:11:55.480Z","updated":"2023-08-29T06:58:54.395Z","comments":true,"path":"about/site.html","permalink":"https://zjxdiu.github.io/about/site.html","excerpt":"","text":"# 以下内容按时间顺序排序 2022-11-24：博客建站，在 GitHub pages 初次部署成功 2022-11-25：选用主题为 Shoka 2022-11-26：更换主题为 Pure 2023-2-17：初次尝试将博客部署于自己的实体服务器上，仅限 ipv6 访问 2023-3-3：暂停私人服务器访问，重新使用 Github pages 2023-8-29：重整博客，该博客站点由业余向正式使用转化 （计划中）2023：新增 zjxmain.github.io 博客站点，主打个人娱乐"},{"title":"categories","date":"2023-12-10T13:11:55.482Z","updated":"2022-11-24T15:24:03.266Z","comments":true,"path":"categories/index.html","permalink":"https://zjxdiu.github.io/categories/index.html","excerpt":"","text":""},{"title":"我的简历","date":"2023-12-10T13:11:55.480Z","updated":"2023-09-12T10:10:56.704Z","comments":true,"path":"about/self.html","permalink":"https://zjxdiu.github.io/about/self.html","excerpt":"","text":"# 基本资料 姓名：曾俊翔 性别：男 年龄：20 民族：汉 籍贯：重庆 受教育状态：本科就读中 专业：食品质量与安全 毕业学校：长沙理工大学 # 联系方式 手机号： +86 18569635980 电子邮件： （国内） zjxdiu@126.com （全球） zjxdiu@gmail.com QQ 号码：2987631086 请在验证信息中注明你是从博客里获取到了我的 QQ 号，否则可能不会同意好友申请。 微信号：zjxdiu4921 常用平台 id：zjxdiu # 个人技能 除了达到本科专业教学目标外，我还在以下方面具有一定能力。 计算机技术。组装和维护电脑、选购指南、软件帮助等等，在中学到大学一共 6 年的时间里收获无数好评。早期帮助办公电脑清理垃圾、整理磁盘碎片等以提高运行速度，随后学习更多相关技术，可帮助解决复杂的软件使用问题和硬件维护。目前可以达到普通电脑维修店员的水平，甚至更高。 网络工程技术。从高一年级开始接触网络工程，到现在已经可以为小型办公室和大型家庭设计全套网络体验。目前已成功解决桂林市假期之旅国际旅行社深圳第一分公司的办公网络升级与维护、远程办公等需求问题；为 3 层别墅户型设计并安装全屋千兆级 Wifi 系统；还在校园网仅限单设备在线的环境下解决了多设备同时上网的问题。掌握的内容包括但不限于无线信号和速率优化、网络设备选型、路由表与 VPN 配置、带宽流量控制、ipv6 和 IPTV 需求、内网穿透、NAS 和服务器部署等。 游戏开发与艺术设计。深入钻研过国产无代码 2D 游戏引擎 - 唤境，在官方论坛中发帖数量排名全站第二（除官方账号外），独立完成 1 个小游戏开发和数个半成品。为了完成单人开发游戏的目标，自学部分数字艺术设计，包括 UI 绘制、动画设计、音效设计等，并在 2022 年后掌握运用生成式 AI 技术辅助创作。 音频技术。初二开始接触独立音乐制作，在高中毕业前完成过 3 首创作（2 首为 demo 续写）。进入大学后基本放弃创作，将重心转移到音频处理技术方面。对于 Audition、iZotope RX7 的使用较为熟练，可完成简单的电子音乐母带、后期处理和录音修复等工作；在校期间完成过多次各类赛事、活动的音频文件处理，同样广受好评。此前还在 b 站发布过多个音乐、音 MAD 和相关技术作品，账号全视频累计播放量 2.7 万。 丰富的生活技能。尽管是食品工程专业学生，我还是认真对待了各类工科实用技能的课程与实习。连接电线、设计电路，安装网线插座和水晶头，组装电脑、清理灰尘、更换硅脂，使用手动工具完成简易的 DIY 和维修，在大学三年的历程中积累了较多的经验。同时，由于从小学 3 年级开始住校生活、一直维持至今，个人生活能力较强、无需监护人即可独立生活。 # 后续内容等待完善…"},{"title":"","date":"2023-12-10T13:11:55.484Z","updated":"2022-11-24T15:04:35.644Z","comments":true,"path":"styles/main.css","permalink":"https://zjxdiu.github.io/styles/main.css","excerpt":"","text":":root { --theme-first: #ffffff; --theme-second: #f8f9fa; --content-first: #343a40; --content-second: #adb5bd; --content-code: #f9f2f4; --border: #dfe2e5; --accent-first: #bfbfbf; --accent-second: #8b959f66; } .gt-bg-theme-color-first { background: var(--theme-first); } .gt-bg-theme-color-second { background: var(--theme-second); } .gt-bg-content-color-first { background: var(--content-first); } .gt-bg-content-color-second { background: var(--content-second); } .gt-bg-accent-color-first { background: var(--accent-first); } .gt-bg-accent-color-second { background: var(--accent-second); } .gt-c-theme-color-first { color: var(--theme-first); } .gt-c-theme-color-second { color: var(--theme-second); } .gt-c-content-color-first { color: var(--content-first); } .gt-c-content-color-second { color: var(--content-second); } .gt-c-accent-color-first { color: var(--accent-first); } .gt-c-accent-color-second { color: var(--accent-second); } *, *:before, *:after { margin: 0; padding: 0; } *:focus { outline-width: 0px; } *:focus-visible { outline-width: 1px; } html { font-size: 58%; } body { font-family: 'Open Sans', 'PingFang SC', -apple-system, BlinkMacSystemFont, opensans, Optima, 'Microsoft Yahei', sans-serif; font-size: 16px; letter-spacing: 1.0382px; } button { outline: none !important; } a { text-decoration: none !important; transition: all 0.3s; } body, div, a, p, ul, li, ol, h1, h2, h3, h4, h5, h6, table, tr, td { box-sizing: border-box; margin: 0; padding: 0; } ol li { list-style: decimal; font-size: 16px; } ul li { list-style: disc; font-size: 16px; } hr { margin: 1rem 0px; border: 0; border-top: 1px solid rgba(0, 0, 0, 0.1); } .main { max-width: 100%; min-height: 100vh; margin: 0 auto; } .main .main-content { flex: 1; display: flex; min-height: 100vh; flex-direction: column; justify-content: space-between; } .navbar { padding: 38px 96px !important; } .navbar .navbar-brand { display: flex; flex-direction: row; align-items: center; } .navbar .navbar-brand .user-avatar { width: 40px; height: 40px; border-radius: 50%; } .navbar .navbar-brand .site-name { font-size: 28px !important; font-weight: bold; margin-left: 16px; } .navbar .navbar-nav { width: 100%; justify-content: flex-end; } .navbar .navbar-nav .nav-item { padding: 14px 26px; } .navbar .navbar-nav .nav-item a { font-size: 15px; flex-shrink: 0; } @media (max-width: 992px) { .navbar { padding: 30px 30px 0 30px !important; margin-bottom: 30px; } .navbar .navbar-brand .user-avatar { width: 31px; height: 31px; border-radius: 50%; } .navbar .navbar-brand .site-name { font-size: 21px !important; font-weight: bold; } .navbar .nav-item { padding: 16px 24px; } .navbar .nav-item:first-child { margin-top: 35px; } } @media (min-width: 992px) { .navbar { max-width: 950px; align-items: center !important; align-self: center !important; padding-left: 0px !important; padding-right: 0px !important; min-width: 950px; margin: auto; margin-top: 0px; margin-bottom: 0px; } } .navbar { position: relative; display: flex; flex-wrap: wrap; align-items: center; justify-content: space-between; padding: 0.5rem 1rem; } .navbar-brand { display: inline-block; padding-top: 0.3125rem; padding-bottom: 0.3125rem; margin-right: 1rem; font-size: 1.25rem; line-height: inherit; white-space: nowrap; } .navbar-brand:hover, .navbar-brand:focus { text-decoration: none; } .navbar-nav { display: flex; flex-direction: column; padding-left: 0; margin-bottom: 0; list-style: none; } .navbar-collapse { flex-basis: 100%; flex-grow: 1; align-items: center; } .navbar-toggler { padding: 0.25rem 0.75rem; font-size: 1.25rem; line-height: 1; background-color: transparent; border: 1px solid transparent; border-radius: 0.25rem; } .navbar-toggler:hover, .navbar-toggler:focus { text-decoration: none; } @media (min-width: 992px) { .navbar-expand-lg { flex-flow: row nowrap; justify-content: flex-start; } .navbar-expand-lg .navbar-nav { flex-direction: row; } .navbar-expand-lg .navbar-collapse { display: flex !important; flex-basis: auto; } .navbar-expand-lg .navbar-toggler { display: none; } } @media (max-width: 991px) { #navbarSupportedContent { display: none; } } .site-footer { font-size: 12px; padding: 24px; max-width: 1000px; min-width: 1000px; align-self: center; margin: 0 auto; } .site-footer a { color: var(--content-first) !important; } @media (max-width: 992px) { .site-footer { display: none; } } .post-list-container { display: flex; flex-direction: column; align-items: center; } .post-list-container .post-inner { min-width: 1000px; max-width: 1000px; } @media (max-width: 992px) { .post-list-container .post-inner { min-width: 0; width: 100%; margin-top: 16px; } .post-list-container .post-inner .post { margin: 12px 16px 12px 16px; padding: 18px 22px 18px 22px; } .post-list-container .post-inner .post .post-left .post-title { font-size: 17px; font-weight: bold; } .post-list-container .post-inner .post .post-left .post-abstract { margin-top: 10px; } .post-list-container .post-inner .post .post-left .post-info { margin-top: 10px; } .post-list-container .post-inner .post .post-feature-image { width: 0; height: 0; flex-basis: 0; flex-shrink: 0; margin-left: 0; border-radius: 2px; overflow: hidden; background-size: cover; background-position: center; } } .post-list-container .post-inner .post { margin: 30px; border-radius: 4px; padding: 28px; display: flex; flex-direction: row; justify-content: space-between; align-items: center; transition: all 0.3s; } .post-list-container .post-inner .post .post-left { width: 100%; display: flex; flex-direction: column; } .post-list-container .post-inner .post .post-left code { color: #bfbfbf; font-family: Consolas; background: none !important; padding: 0; margin: 0; } .post-list-container .post-inner .post .post-left .sticky-top-flag { color: white; padding: 3px 10px; font-size: 12px; border-radius: 3px; margin-right: 10px; vertical-align: middle; } .post-list-container .post-inner .post .post-left .post-title { font-size: 22px; font-weight: normal; vertical-align: middle; } .post-list-container .post-inner .post .post-left .post-abstract { width: 100%; margin-top: 20px; line-height: 1.5; } .post-list-container .post-inner .post .post-left .post-abstract * { font-size: 13px; margin-bottom: 0; } .post-list-container .post-inner .post .post-left .post-info { margin-top: 20px; font-size: 12px; display: flex; justify-content: space-between; } .post-list-container .post-inner .post .post-left .post-info .post-tag, .post-list-container .post-inner .post .post-left .post-info .post-category { margin: 0 10px; color: var(--accent-first); } .post-list-container .post-inner .post .post-left .post-info a { color: var(--accent-first); } .post-list-container .post-inner .post:hover { transform: scale(1.012); } .post-list-container .post-inner .post .post-feature-image { width: 200px; height: 100px; flex-basis: 200px; flex-shrink: 0; margin-left: 20px; border-radius: 2px; overflow: hidden; background-size: cover; background-position: center; } .pagination-container { padding: 24px 32px 32px; align-self: center; } .pagination-container .prev-page { margin: 0 16px; font-size: 14px; } .pagination-container .next-page { margin: 0 16px; font-size: 14px; } .post-container { display: flex; flex-direction: column; align-items: center; min-height: 100%; flex: 1; } .post-container .post-detail { flex: 1; padding: 24px 32px; width: 1000px; border-radius: 5px; } .post-container .post-detail .post-title { font-size: 26px; text-align: center; padding: 24px; font-weight: normal; } .post-container .post-detail .post-info { text-align: center; font-size: 12px; padding-bottom: 24px; } .post-container .post-detail .post-info .post-tag { padding: 8px; } .post-container .post-detail .post-toc { margin-bottom: 30px; } .post-container .post-detail .post-toc h2 { display: inline-block; background: linear-gradient(180deg, transparent 75%, rgba(139, 149, 159, 0.4) 0) !important; } .post-container .post-detail .post-toc ul { margin: 0px; } .post-container .post-detail .post-toc .markdownIt-TOC { padding: 0px; } .post-container .post-detail .post-toc .markdownIt-TOC li { list-style: none; margin: 0px; } .post-container .post-detail .post-toc .markdownIt-TOC li ul li { list-style-type: disc; margin: 0px; } .post-container .post-detail .post-toc .markdownIt-TOC li ul li a { color: var(--content-first) !important; } .post-container .post-detail .post-content { margin-top: 30px; } .post-container .post-detail .post-content h1, .post-container .post-detail .post-content h2, .post-container .post-detail .post-content h3, .post-container .post-detail .post-content h4, .post-container .post-detail .post-content h5, .post-container .post-detail .post-content h6 { display: table !important; } .post-container .post-detail .post-content h2, .post-container .post-detail .post-content h3 { display: inline-block; color: var(--content-first) !important; position: relative !important; background: linear-gradient(180deg, transparent 75%, var(--accent-second) 0) !important; } @media (max-width: 992px) { .post-container .post-detail { width: 100%; margin-top: 20px; } .post-container .post-detail .post-title { font-size: 20px; font-weight: bold; } } .post-container details { background: var(--accent-second); border-radius: 5px; padding: 10px 20px; } .post-container details summary { -webkit-user-select: none; -moz-user-select: none; user-select: none; font-size: 14px; font-weight: bold; padding: 10px 20px; border-radius: 5px; background: var(--accent-second); margin: -10px -20px; } .post-container details[open] summary { border-radius: 5px 5px 0px 0px; margin: -10px -20px 15px -20px; } .post-container details p { font-size: 14px; } .gt-a-link { color: var(--content-first) !important; position: relative !important; background: linear-gradient(180deg, transparent 75%, #4dabf766 0) !important; } .gt-post-content { word-break: normal; word-wrap: break-word; } .gt-post-content a, .gt-post-content a code { color: var(--accent-first) !important; transition: all 0.3s; } .gt-post-content a:hover { text-decoration: underline !important; } .gt-post-content .post-toc + hr { margin-bottom: calc(1rem + 18px); } .gt-post-content img { display: block; max-width: 100%; border-radius: 3px; margin: 18px auto; } .gt-post-content p { line-height: 1.725; margin-bottom: 18px; font-size: 16px; letter-spacing: 1.0382px; } .gt-post-content pre { margin-bottom: 18px; } .gt-post-content blockquote { padding: 16px; border: 0; border-left: 4px; border-style: solid; margin-bottom: 16px; background: var(--accent-second) !important; border-color: var(--accent-first) !important; } .gt-post-content blockquote p { margin-bottom: 0; } .gt-post-content table { border-collapse: collapse; margin: 1rem 0; overflow-x: auto; display: table; width: 100%; } .gt-post-content table thead th { text-align: left; } .gt-post-content table tr { border-top: 1px solid var(--border); } .gt-post-content table td, .gt-post-content table th { border: 1px solid var(--border); padding: 0.6em 1em; } .gt-post-content ul, .gt-post-content ol { padding-left: 20px; line-height: 1.725; margin-bottom: 16px; } .gt-post-content h1, .gt-post-content h2, .gt-post-content h3, .gt-post-content h4, .gt-post-content h5, .gt-post-content h6 { margin-bottom: 18px; padding-top: 14px; font-weight: bold; } .gt-post-content h1 { font-size: 28px; } .gt-post-content h2 { font-size: 24px; } .gt-post-content h3 { font-size: 20px; } .gt-post-content h4 { font-size: 18px; } .gt-post-content h5 { font-size: 16px; } .gt-post-content h6 { font-size: 14px; } .gt-post-content pre { margin-bottom: 18px; margin-right: 32px; } .gt-post-content pre > code { letter-spacing: 0px; font-size: 14px; font-family: 'Roboto Mono', Consolas, Menlo, Monaco, 'Source Code Pro', 'Courier New', monospace; padding: 1em; border-radius: 5px; line-height: 1.375; position: relative; width: 100%; overflow: scroll; display: block; } .gt-post-content p code, .gt-post-content li code, .gt-post-content table code { letter-spacing: 0px; color: var(--content-first); font-family: 'Roboto Mono', Consolas, Menlo, Monaco, 'Source Code Pro', 'Courier New', monospace; padding: 0.2em 0.4em; margin: 0; font-size: 85%; background-color: #1b1f230d; border-radius: 6px; word-break: break-all; } .post-detail { margin-top: 0px !important; padding-top: 0px !important; } .next-prev-post { text-align: center; padding: 24px 32px; } .next-prev-post .next-post .next { margin-bottom: 24px; font-size: 14px; } .next-prev-post .next-post .post-title { font-size: 16px; font-weight: bold; } .next-prev-post .prev-post .prev { margin-bottom: 24px; font-size: 14px; } .next-prev-post .prev-post .post-title { font-size: 16px; font-weight: bold; } .archives-container { padding: 32px; display: flex; flex-direction: column; margin-left: 10%; margin-right: 10%; align-self: center; max-width: 1000px; min-width: 1000px; } .archives-container .year { font-size: 34px; font-weight: bold; margin-top: 16px; margin-bottom: 16px; align-self: start; } .archives-container .post { padding: 16px 0; } .archives-container .post .post-title { font-size: 16px; } .archives-container .post .post-title small { font-size: 80%; } .archives-container .post .post-title .archives-post-title { display: inline-block; margin-left: 20px; } .archives-container a:hover { text-decoration: none !important; } @media (max-width: 600px) { .archives-container { padding: 16px !important; } } @media (max-width: 992px) { .archives-container { min-width: 0px !important; } } .current-tag-container .title { text-align: center; font-size: 18px; margin-bottom: 24px; } @media (max-width: 992px) { .current-tag-container .title { margin-top: 50px; } } .tags-container { padding: 32px 32px; flex: 1; display: flex; flex-direction: row; justify-content: center; align-items: center; flex-wrap: wrap; max-width: 1000px; align-self: center; } .tags-container .tag { font-size: 15px; margin: 5px 15px; } .friend-box { float: left; max-width: calc(50% - 20px); min-width: calc(50% - 20px); margin: 15px 10px; background-color: rgba(20, 153, 196, 0.125); padding: 15px; border-radius: 15px; } .friend-box img.friend-avatar { width: 70px; height: 70px; border-radius: 50% !important; float: left; margin: 0 15px 0 0 !important; } .friend-box .friend-info { height: 70px; overflow: hidden; line-height: 24px; padding-left: 30px; font-size: 14px; } .friend-box .friend-info a { text-decoration: none !important; font-size: 18px; background: linear-gradient(180deg, transparent 75%, rgba(116, 192, 252, 0.4) 0); margin-bottom: 10px; } .friend-box .friend-info .friend-info-description { margin-top: 10px; } @media (max-width: 465px) { .friend-box .friend-info .friend-info-description { display: none; } } @media (max-width: 993px) { .friend-box { max-width: 90% !important; min-width: 90% !important; } } #disqus_thread { padding: 24px 32px; width: 80%; max-width: 1000px; } @media (max-width: 992px) { #disqus_thread { padding: 24px 32px; width: 100%; } } #disqus_thread ul li { list-style: none; } #dsqjs { font-family: 'PingFang SC', -apple-system, BlinkMacSystemFont, opensans, Optima, 'Microsoft Yahei', sans-serif; } #gitalk-container { width: 80%; max-width: 1000px; } @media (max-width: 992px) { #gitalk-container { width: 100%; } } #vcomments { width: 80%; max-width: 1000px; } @media (max-width: 992px) { #vcomments { width: 100%; } } .hljs { display: block; overflow-x: auto; padding: 0.5em; color: #383a42; background: #eeeeee; } .hljs .hljs-comment, .hljs .hljs-quote { color: #a0a1a7; font-style: italic; } .hljs .hljs-doctag, .hljs .hljs-formula, .hljs .hljs-keyword { color: #a626a4; } .hljs .hljs-deletion, .hljs .hljs-name, .hljs .hljs-section, .hljs .hljs-selector-tag, .hljs .hljs-subst { color: #e45649; } .hljs .hljs-literal { color: #0184bb; } .hljs .hljs-addition, .hljs .hljs-attribute, .hljs .hljs-meta-string, .hljs .hljs-regexp, .hljs .hljs-string { color: #50a14f; } .hljs .hljs-built_in, .hljs .hljs-class .title { color: #c18401; } .hljs .hljs-attr, .hljs .hljs-number, .hljs .hljs-selector-attr, .hljs .hljs-selector-class, .hljs .hljs-selector-pseudo, .hljs .hljs-template-variable, .hljs .hljs-type, .hljs .hljs-variable { color: #986801; } .hljs .hljs-bullet, .hljs .hljs-link, .hljs .hljs-meta, .hljs .hljs-selector-id, .hljs .hljs-symbol, .hljs .hljs-title { color: #4078f2; } .hljs .hljs-emphasis { font-style: italic; } .hljs .hljs-strong { font-weight: 700; } .hljs .hljs-link { text-decoration: underline; } .hljs::-webkit-scrollbar { width: 8px; height: 6px; } .hljs::-webkit-scrollbar-thumb { border-radius: 4px; background-color: #cbcbcb !important; } .hljs::-webkit-scrollbar-track-piece, .hljs::-webkit-scrollbar-corner { background: #eeeeee !important; }"},{"title":"友情链接","date":"2023-12-10T13:11:55.483Z","updated":"2022-11-24T15:08:13.907Z","comments":true,"path":"links/index.html","permalink":"https://zjxdiu.github.io/links/index.html","excerpt":"","text":""},{"title":"tags","date":"2023-12-10T13:11:55.489Z","updated":"2022-11-24T15:20:43.762Z","comments":true,"path":"tags/index.html","permalink":"https://zjxdiu.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"一种基于神经网络的电子音乐风格分类算法思路","slug":"blog/ML_emusic_classify","date":"2023-05-03T09:18:00.000Z","updated":"2023-12-10T12:20:19.178Z","comments":true,"path":"blog/ML_emusic_classify/","link":"","permalink":"https://zjxdiu.github.io/blog/ML_emusic_classify/","excerpt":"","text":"# 一种基于神经网络的电子音乐风格分类算法思路 # —— 以 zjxdiu 常听的电子音乐风格为例 # 目录 一、概述与引言 二、电子音乐风格 2.1 主风格 2.2 子风格 2.3 混合风格与其他元素 三、现有解决方案 3.1 传统人工分类 3.2 特征提取技术 3.3 现有机器学习算法 3.3.1 实践项目：DeepAudioClassification 四、SRM-DNN（频谱、节奏、情感分析 - 深度神经网络）思路 4.1 电子音乐的频谱特征 4.2 鼓与贝斯节奏分析 4.3 BPM 与时间分析 4.4 情感分析 4.5 能量分析 4.6 实现思路 4.6.1 频谱提取 4.6.2 DnB 分析 4.6.3 BPM 与时间分析 4.6.4 图像识别 4.6.5 人声分离 4.6.6 情感特征 五、总结 # 一、概述与引言 随着近年来计算机技术的快速发展，机器学习被应用于越来越多的领域。其中，最广泛的应用之一就是执行分类与识别任务，在音乐风格的识别与分类方面，同样有着应用的空间。为此，结合笔者生活中的实际痛点：难以区分部分电子音乐的风格，且现有方案难以准确识别细分风格，而撰写本文，希望以相对专业的视角提供一种新的解决方案。 # 二、电子音乐风格 电子音乐是音乐中的一个大类型，起源于 20 世纪 60 年代的欧美地区，是音乐文化中重要的一部分。其曲风特色是注重以节奏和旋律创建舞蹈氛围，主要使用各类合成器作为 “乐器”，并具有相对少量的歌词。在约 80 年的发展过程中，电子音乐衍生、拓展出非常多的细分风格，以下对笔者常听的风格进行简述。 # 2.1 主风格 zjxdiu 常听的电子音乐包括以下几类主要风格： House，浩室或浩室舞曲，注重旋律和音色的展现，编曲的格式化比较显著，节奏简单且 “软硬” 适中； Trance，迷幻舞曲，BPM 相对 House 更高一些，鼓点一般位于每个 1/2 beat 上，但较为柔和；snare 和 hat 也在 DnB 序列中以更高频率出现，每节旋律相似但不重复。整体听感与其名字类似，为 “迷幻”。 Core，核，主要包括 Hardcore（硬核）和 Frenchcore（法核，也可一并归类为 Hardcore），表现为更为强烈的节奏和鼓点，BPM 也更高，且对人声的处理更极端；部分早期的 Core 十分的 “硬”，以至于很少人能够承受；而近年的新型 core 则相对柔软一些，并且对于旋律和人声的体现也更为注重。 Hardstyle，硬派，其显著特征为 bass 和 drum 同时出现，且多使用经失真处理的 bassline，由于其独特的 DnB 听感，时常被开玩笑：“听到 duang duang duang 就是 hardstyle”。其软硬程序介于 Core 与 House 之间。 Hands Up，无中文名，是一种处于 Core 与 Hardstyle 之间、更接近 Core 的风格，其特征为较为快速和低沉的鼓点，且旋律表现力强、与 DnB 的融合程度高，编曲方面则接近 House，在许多 Disco 舞厅音乐中较为常见。 Chill Out，弛放音乐，它的特征最为显著，即一反常派的柔和与宁静。通常其编曲较为接近 Trance，但使用的音色极为柔软，鼓点和贝斯的响度也很低，BPM 通常也较低，听感上呈现 “飘渺舒缓的节奏，柔和的合成器音效，空灵的女声吟唱，悠远的环境音”。 # 2.2 子风格 常见子风格见如下虚表格： 需要注意的是，此处列出的仅为一部分，实际上还可区分为数倍于列表项目数的子风格。 # 2.3 混合风格与其他元素 对于现代电子音乐而言，一首音乐混合多种风格的做法是十分常见的；例如 Hands Up+Hardstyle、Melodic House+Hardstyle、Progressive House+Future House 等等。不过对于大多数音乐而言，其主要曲风只会有一种。 此外，部分曲风还会有一些其他元素；例如 Midtempo 指 BPM 在约 80~120 之间的，带人声和歌词的 Trance 可称为 Vocal Trance 等。总之，电子音乐的曲风是难以准确、完全判别的，因此可考虑采用标签（label）的方式进行风格判断。 # 三、现有解决方案 # 3.1 传统人工分类 显然，音乐分类可由人工进行；无论是音乐人提供还是听众、鉴赏家提供，都属于人工分类方法。在任何涉及到机器学习与人类学习对比的地方都能得知，人工方法一般有准确率高、复杂任务处理能力强、误报率低、学习速度快且成本低等优点，但其识别速度相比于计算机而言则无法比拟。 # 3.2 特征提取技术 参考文献：基于音乐特征提取和深度神经网络的音乐风格分类算法 对于通常意义上的音乐而言，我们可以通过提取音乐特征进行分析与识别。这些特征包括节奏、旋律、乐器或音色、和弦或和声、人声等内容。通过适当的、已有的算法和模块，可以对这些特征进行单独提取并分析。若加入卷积神经网络，则可获得更为准确的结果。 参考文献中详细介绍了这二者如何融为一体并实际运用，为接下来的算法思路提供了部分理论基础。 # 3.3 现有机器学习算法 传统的基于机器学习的音频分类大多基于常规算法，例如支持向量机、决策树、K - 邻近算法、随机森林算法等等。这些算法的优点是部署和训练简单，算法的数学原理完善，但问题是难以准确处理复杂和细微的变化；尤其是在电子音乐风格分类任务中，由于各风格在许多方面非常相似，传统算法无法很好地处理。 因此，结合使用的技术与特征，提出如下采用神经网络进行识别的识别思路。 # 3.3.1 实践项目：DeepAuddioClassification 在提出自己的算法思路前，笔者首先实践了一个已有的开源项目：Github: despoisj/DeepAudioClassification；该项目采用 tensorflow 中的 tflearn 模块进行 DNN 训练，并且只对音频频谱进行识别，相当于一个只输入频谱图的图像识别算法。 通过将音频频谱提取出来并切片，随后基于 DNN 进行图像分类训练，则模型可用于预测一个未知的音乐频谱图。这种方法巧妙地避开了音频数据量过大的问题，因为一般 CD 音质下 44100Hz 意味着 30 秒的音乐就将产生 66 万个长度的向量。但对于原作者的目的而言，分析大类音乐风格的时候可以直接从频谱入手。根据作者发表的文章 Finding the genre of a song with Deep Learning 的描述，只需要每秒 50 像素的分辨率即可获得满意的效果；在这里，sox 提供了很好用的命令行工具，允许我们直接生成灰度频谱图，其中每个像素的 x 代表时间、y 代表频率、亮度代表振幅。切片后使用深度卷积神经网络进行图像训练，最后使用投票机制提高准确率。 但是，这一次实践的结果并不理想。在学习率 0.001、分辨率 50px/s 时，经过 20 个 epoch 后模型仅能达到 55% 的准确率（ACC），可以看出识别效果并不理想。这主要是因为参与训练的原始数据包括 Trance 和 Hardstyle 两种风格，而它们在梅尔（Mel）频谱图上实际上十分相似，无法准确映射到高维数据集中。 # 四、SRM-DNN（频谱、节奏、情感分析 - 深度神经网络）思路 # 4.1 电子音乐的频谱特征 首先，我们并不希望创建一个需要 A100 才能运行的高度资源密集型网络，而是希望该模型能够在消费级硬件上部署和训练。因此，结合实际电子音乐的主要特征区分，我们可以沿用 DeepAudioClassification 的频谱分析方法。 对于电子音乐曲风分类而言，其频谱图提供的信息量是非常大的，因为几乎每种主类别都有自己特征的 DnB 序列。这导致了在频谱图中的显著区分，在低频区域尤为明显（见下图）。 截取频谱图时采用的配置： 软件：iZotope RX 7 FFT 类型（type）：自动可变短时傅里叶变换（Auto-adjustable STFT） 启用重分配（reassignment）：否 窗函数：海宁窗（Hann） 颜色映射：青色到橙色（Cyan to orange） 频率缩放（Frequency scale）：对数（Log） 高品质渲染（High-quality rendering）：启用 图：三种风格的电子音乐频谱图对比 本图采用的时间窗口：20s 从对比图中可以很明显地看出，不同风格的电子音乐在频谱图中呈现出较为显著的区别；尽管也有相近的风格（如 Hands Up 和 Hardcore），但总体来说，其频谱图能提供主要的风格信息。 既然电子音乐的频谱特征如此明显，为什么 DeepAudioClassification 项目却无法使用呢？ 首先，频谱的选型有误，是最大的问题所在。对于电子音乐而言，由于其风格信息大多位于低频区，因此必须使用低频部分缩放较大的谱图类型。上图中采用的缩放是 Log，相比于常用的 Mel 频谱，它对于低频区有更大的缩放等级，使得低频信息分辨率更高；在实际运用中，该软件还提供了 Extend Log（拓展对数）频谱，其低频区的缩放更为显著。 其次，切片数量过多。实践中为尽量减轻硬件负担，对较长的音频进行切片处理；但每个音频切片数为 100 份，这个设定相对于电子音乐的结构而言太多了。常见的电子音乐由几个类型的分段组成，例如 intro、lead、build up、verse、drop、outro 等；其风格的定义一般主要从 drop 中得出，所以若切片过多，则容易破坏每个分段的完整性，不利于风格识别。 # 4.2 鼓与贝斯分析 电子音乐的风格可以说有一半都由 DnB（Drum and bass，鼓与贝斯；这个词同时也是一种类型的电子音乐风格，但本文将其用于指代鼓点 + 贝斯）决定；无论是鼓点节拍数、编排方式还是贝斯的特征，亦或是二者的侧链水平等，均包含大量的风格信息。 有关如何从音频信号中提取节拍信息，目前已有相关研究成果，包括使用动态编程、神经网络等方法进行识别。参考文献：Multi-Feature Beat Tracking 使用 iZotope RX 7 提供的工具也可以进行 DnB 分析，其中的 Music Rebalance 模块可以准确分离人声、贝斯、鼓点三种信号，为分析提供了有利条件。 图：RX 7 中提供的 Music Rebalance 组件 # 4.3 BPM 与时间分析 BPM，即 Beats per minute，每分钟节拍数。它是音乐的一个重要参数，直接指向音乐的 “速度”。尽管在制作电子音乐时，制作人通常不会严格对齐到小节 / 拍的整数倍，但 BPM 依然能够提供风格信息。 在主风格分析时，仅通过 BPM 我们即可首先分辨音乐的大致类别；若低于 90 则可能为 Chill Out，90-110 可能为 House，110-130 可能为 Trance、Hands Up，130-160 可能为 Hardstyle 或 Hardcore 等。 在子风格分析时，BPM 也有助于进行风格确定；例如在 Hardcore 中，若难以分辨 Frenchcore 和 UK Hardcore，则可通过 BPM 辅助判断，若达到了 160 或更高则更可能为 UK Hardcore。 此外，音频的时间长度同样可以作为网络的输入之一，这是因为 Hands Up、Hardcore、House 和 trance、Chill Out 等分别呈现了两种倾向，前者一般时长为 3 分钟左右，而后者最长可达 10 分钟以上。尽管这种参数的帮助十分有限，但其特征强度还会更高，有助于减少结果的偏离。 # 4.4 情感分析 所谓情感分析，指的是对人声（和音乐，如果可能）进行情绪的识别与分类。尽管不是所有音乐都有歌词和人声，电子音乐中的人声更是少见，但进行情感分析依然有助于进一步判别细微的风格差异。 不过，这一步的主要目的其实只针对一种风格的音乐，即 trance；许多 Trance 都具有一些人声，即便没有人声，对于音乐本身的情感分析也能够帮助辨别 Progressive trance 和 Uplifting trance。这是因为大部分 Uplifting trance 都具有一些独特的情感特征：Hopeful，Sentimental，Sad 等等；它们具有一个共同的特征，就是 uplifting，即鼓舞人心的。可以说，如果一首 Trance 听着让人想流泪，则多数时候可以确定它一定是 Uplifting trance。 参考文献：Music Emotion Classification Method Using Improved Deep Belief Network # 4.5 能量分析 所谓能量分析，是指针对音频每个分片（如每秒）进行电平、响度、频域复杂度等进行分析，从而确定该分片的能量等级。由于电子音乐中每个分段的能量差异较大，intro/outro 最低、lead/build up 中等、drop 最高，因此对整个音频进行能量分析并在二维数组中呈现，将有助于分析音乐结构。 例如，trance 音乐的结构中，各分段能量差异相对较小，drop 出现的频次更多；House 则一般为 intro、lead、build up、drop、verse、build up、verse、outro 序列。不过该方法适用性不佳，主要是因为电子音乐的结构变化性大，且目前没有已标签的数据集进行训练，需要人工标记才能进行监督学习。 # 4.6 实现思路 有了以上理论基础，我们就可以尝试构建这样一个神经网络了。当然，由于笔者的专业是食品安全，本文并不涉及任何实际代码、构建和部署，而仅为提出思路。 # 4.6.1 频谱提取 这个网络仅涉及频域分析而没有时域处理，因此我们可以直接忽略音频原始采样，而是直接生成其频谱图。 前文实践项目 DeepAudioClassification 中，使用到了一个命令行工具：sox。它可以输出音频的 png 频谱图，并且可以直接定义灰度、分辨率等；但其选项中并不能更改频率缩放类型，而默认情况下的 Mel 频谱图对于电子音乐分类而言效果不佳。因此，我们应该使用其他工具或算法来创建 log 频谱图。在 log 频谱图下，一个 44100Hz 采样率的音频（其最高频率为 22050Hz），频谱图的中间位置约为 2205Hz。 # 4.6.2 DnB 分析 网络的第二个输入应该为 DnB 序列；通过前文所述的一些方法，可以获取音乐的节拍序列信息。仅需得知 drum（鼓点）的序列即可提供良好的分类所需的信息，而 bassline 则可通过分析甚低频区的信号得出。 这两个数据在训练时应始终保持时间一致性，即 drum 和 bass 不能独立分析；也可考虑混合后输入，或直接从频谱图中再单独提取高分辨率的低频区信号频谱图像进行输入。 可能实现的模块：Github: MTG/essentia # 4.6.3 BPM 与时间分析 这一步是相对而言最简单的，音频时间直接获取 duration 即可，BPM 也可以通过许多 python 的音频工具库获得。 可能实现的模块：Github: librosa/Librosa # 4.6.4 图像识别 这一步有许多可选的方向，不过仍然可以参考前文实践项目的做法，使用 tensorflow 提供的 tflearn 进行图像训练。需要注意的是，为了降低负载，仍然可能需要对频谱图进行分片处理。 # 4.6.5 人声分离 借助许多工具，包括 iZotope RX 7 的 Center Extract、Music Rebalance 或 Audition 的中置声道提取功能，都可以对音频的人声进行高质量分离。这一步的目的是为后续进行情感分析提供原始文件，并且也可能为音乐情感分析提供良好的无人声音轨。 # 4.6.6 情感分析 参考文献：Music Emotion Classification Method Using Improved Deep Belief Network 基于此文献，可以确定 DBN 网络用于情感分析的可能性。不过目前似乎很少见到相关的模块或库可以直接提供此功能接口的，因此在编程方面可能具有难度。 # 5. 总结 再次说明，由于作者为食品专业，且对机器学习、计算机等了解很少，本文中可能出现大量不专业、错误术语和概念，其中的部分思路也可能无法实现或已有更好的替代方法。但作者编写本文的原因是希望解决实际问题，现有的音乐分类不够准确和细致、无法区分电子音乐下的各类风格。 如果您有建议、修改提示、想法等，均可直接于评论区留言。人工智能是新兴的热门话题，在时代的风口浪尖上，我们可以共同学习、不断进步，为计算机学习的城墙添砖加瓦。","categories":[{"name":"学习","slug":"学习","permalink":"https://zjxdiu.github.io/categories/%E5%AD%A6%E4%B9%A0/"},{"name":"计算机","slug":"学习/计算机","permalink":"https://zjxdiu.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}],"tags":[{"name":"信号处理","slug":"信号处理","permalink":"https://zjxdiu.github.io/tags/%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/"},{"name":"深度学习","slug":"深度学习","permalink":"https://zjxdiu.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"音频","slug":"音频","permalink":"https://zjxdiu.github.io/tags/%E9%9F%B3%E9%A2%91/"}]},{"title":"图床","slug":"blog/图床","date":"2023-01-01T16:00:00.000Z","updated":"2023-12-10T12:20:19.181Z","comments":true,"path":"blog/图床/","link":"","permalink":"https://zjxdiu.github.io/blog/%E5%9B%BE%E5%BA%8A/","excerpt":"","text":"# 此处用于保存一些图片 # 1689395731","categories":[{"name":"杂项","slug":"杂项","permalink":"https://zjxdiu.github.io/categories/%E6%9D%82%E9%A1%B9/"},{"name":"未分类","slug":"杂项/未分类","permalink":"https://zjxdiu.github.io/categories/%E6%9D%82%E9%A1%B9/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[]},{"title":"【补档】唤境游戏如何显示帧率？详解性能相关内容","slug":"blog/补档1","date":"2022-12-05T14:11:00.000Z","updated":"2023-12-10T12:20:19.165Z","comments":true,"path":"blog/补档1/","link":"","permalink":"https://zjxdiu.github.io/blog/%E8%A1%A5%E6%A1%A31/","excerpt":"","text":"因群里有成员对这方面存在疑问，所以写一篇文章详细解释下游戏内性能相关。 需要注意的是，本人对于唤境中这些内容的最具体理解未必到位，因此可能出现一些技术细节上的错误，希望大佬能指出错误，感激不尽！ 为了保证一般开发者也能看得懂，文章会尽量避免非常专业和硬核的描述，相应地就会降低严谨性。如果有兴趣深究，请查找更专业的资料。 此外，本文并非是针对唤境游戏的性能优化而写的，如果您的引擎或者制作的游戏出现卡顿，请前往 b 站查看小嗦大佬的教程。 传送门：https://www.bilibili.com/video/BV1wg411E7oF # 一、性能相关概念（基础内容） 通常情况下，我们会通过几个方面来评估一个游戏运行的性能表现，分别是帧率、帧生成时间、CPU 占用、GPU 占用、内存占用、显存占用等。 # 1. 帧率 / FPS 游戏之所以能呈现动态的画面，是因为它会以一个很快的速度生成画面，每秒几十张甚至上百张，其中每个画面就被称为一 “帧” 。因此，帧是游戏画面在时间上的最小单位。 于是，我们有了帧率的概念。帧率，就是每秒钟游戏生成的帧数量。很明显的，帧率越高，我们肉眼感觉到的画面就越流畅，反之则越卡顿。当帧率为 0 时，游戏就停止在一张静态的图片上。 一般而言，当帧率达到 60 时，人眼观察到的画面就可以称为 “比较流畅” 了。 # 2. 帧生成时间（或帧间隔）/ FRAMETIME 有了帧率的概念，我们就可以引入帧生成时间的概念了。 游戏引擎每生成一帧画面，都需要消耗一定的时间，这个时间就称为帧生成时间。 帧生成时间波动是造成瞬间卡顿的原因之一。设想一个极端情况，在运行的某一秒里，游戏花了 0.9 秒来渲染第一帧，然后在剩下 0.1 秒里渲染了剩下的 59 帧。这时候的平均帧率还是 60，但是你在玩的时候就会明显感觉到游戏发生了一次剧烈的卡顿，因为这 0.9 秒的时间内游戏处于静止状态。 帧生成时间和间隔的定义，严格来说并不是完全一致的，但本文并不是进行画面技术研究，所以暂且认为它们是同一个概念。 # 3.CPU 占用 / CPU 在计算机中，CPU 负责通用计算，也就是任何计算理论上都可以由 CPU 完成。在游戏中，控制游戏系统运行、通过公式计算数据、运行函数等都是由 CPU 完成的。最开始的时候，游戏画面的渲染也是由 CPU 完成的，但后来人们发现 CPU 难以胜任这一要求，于是将这个工作交由 GPU 完成。有关这一段历史的发展，详见 https://www.bilibili.com/video/BV1Hb41177JB 对于现代电脑和手机来说，它们的 CPU 性能都相当强大，可以完成非常密集的运算需求。但它们的性能也不是无限的，而且在手机、笔记本电脑上，CPU 是耗电量非常大的元件。所以，CPU 会直接影响游戏的性能表现，降低 CPU 的占用率也可以有效提高游戏运行的效率，以及在低端设备上成功运行的可能性。 # 4.GPU 占用 / GPU 前面提到了，GPU 是用来替代 CPU 来完成画面渲染工作的硬件。所以，GPU 是离游戏实际画面最近的硬件，因为游戏画面就是由它生成的。 GPU 负责的内容就是渲染画面，例如显示图片、文字等。 对于唤境来说，由于唤境只是 2D 游戏引擎，因此对于现代 GPU 来说压力比较低，但还是存在运行效率过低的情况。 有关 GPU 运行解析的内容请见官方教程 https://evkworld.cn/wiki/58 # 5. 显存占用 / (VRAM、VIDEO MEMORY、IMAGE MEMORY 等) 显存，又称显示内存、显卡内存、图形内存、视频内存等，是显卡用来储存图像信息的临时空间。 对于集成显卡（例如手机）而言，显存就是从内存中分出来的部分；对于独立显卡（例如高性能电脑）而言，显存是单独集成在显卡中的一个存储器。所以，当游戏在手机上运行的时候，游戏会同时消耗两份内存空间，一部分用于程序运行，另一部分充当显存。因此，如果您的游戏在电脑上运行很正常，而在低端手机上就无法运行或者特别卡顿，则有可能是因为游戏消耗了较多的显存和内存。 # 二、唤境中跟性能有关的表达式 唤境引擎并没有提供性能监控相关的组件和能力，但可以通过表达式获取到性能数据。 所有相关表达式都在系统部分中。 # 1. 帧率 表达式：fps 刷新频率：每秒 1 次 返回值类型：整数 建议使用方法：直接通过表达式获取帧率即可。 # 2. 帧生成时间（帧间隔） 表达式：dt 刷新频率：每帧 1 次 返回值类型：单精度浮点数，即 6 位小数 （当测量单帧间隔时会返回 10 位小数） 其它：引擎内描述为 “时间间隔” 建议使用方法：先将数据乘以 1000，然后使用 roundto () 将其化简到 1-3 位小数，最后加上单位 “ms”（毫秒），即可得到友好的数字展示。 # 3.CPU 占用（CPU 时间） 表达式：cpuutilisation 刷新频率：每秒 1 次 其它：引擎内描述为 “CPU 在游戏中消耗的时间” 返回值类型：双精度浮点数，即 18 位小数。 建议使用方法：先将数据乘以 100，然后使用 roundto () 将其简化到 1-2 位小数，最后加上百分比符号 “%”，即可得到友好的数字展示。 # 4.GPU 占用（渲染消耗时间） 表达式：gpuutilisation 刷新频率：每秒 1 次 其它：引擎内描述为 “GPU 在游戏中消耗的时间” 返回值类型：9 位小数。 建议使用方法：与 CPU 占用相同。 # 5. 显存占用 表达式：imagememoryusage 刷新频率：每帧 1 次 返回值类型：9 位小数。 建议使用方法：直接通过表达式获取即可。 # 三、制作性能监控窗口 光了解了上面所有的信息，但如果不会用，那就都是白搭。接下来，我会一步步解释如何制作游戏内的性能监控悬浮窗。 1. 打开游戏项目，新建对象：一个文本、一个精灵和一个按钮，精灵的贴图替换成一张长方形图片即可 2. 新建几个全局变量，“启用测量”、“悬浮窗 x”、“悬浮窗 y”。其中，第一个是布尔类型变量，是必需的；后两个是数值类型变量，不是必需的。 后两个的初始值不建议设为 0，应该根据你选择的默认位置来设置。 3. 新建一个图层组 “悬浮窗”，设置为全局图层组，然后将精灵、文本和按钮拖入该图层组中，调整文本和精灵的大小及属性，文本选择左对齐、上下居中对齐，大小跟精灵差不多一样大就行 4. 为文本添加拖拽和定时器能力，为精灵添加绑定能力 5. 新建一条全局事件表，名称为 “性能监控窗口”，或者任何你喜欢的名字。 6. 开始写事件。可以参考我下面的这种设计方案。 核心思路： （1）当 “启用测量” 变量为 “真” 时，显示文本和精灵，否则隐藏；注意，不要重复触发，可以加入一个触发器（例如 “仅触发一次”）来解决； （2）制作好看的文本排版； （3）避免每帧检测和每帧改变文本； （4）（可选）实现悬浮窗的拖动，以及位置记忆。 文本内容供参考： “帧率：” &amp; fps &amp; newline &amp; “CPU：” &amp; roundto (cpuutilisation*100,1) &amp; “%” &amp; newline &amp; “显存：” &amp; imagememoryusage &amp; “mb” 7. 在每个你希望有监控悬浮窗的场景下都新建一个叫做 “悬浮窗” 的图层组，不需要放入任何内容，因为你之前已经选中了全局事件表。 然后将刚才写的全局事件表应用于每个你希望有悬浮窗的场景。 8. 检查效果 9. 可额外优化的内容 拖拽能力没有进行区域限制，可以直接把悬浮窗拖到屏幕外，如何解决？ ・提示：只需要使用一个能力即可解决。 事件表里还有可以进一步优化的内容？ ・提示：绑定能力。 # 四、总结 通过这一篇文章的解析和教学，你应该对唤境游戏的性能及其监控方法有了一定的了解。 在多数情况下，唤境游戏其实并不需要这么多高级的技术细节，但这类功能可以给你的游戏添砖加瓦，起到锦上添花的作用。 文章撰写仓促，部分内容做不到非常细致和详尽，也可能有错误，欢迎大佬前来指正！ 额外优化内容： （1）给文本和精灵分别添加 “边界限制” 能力即可； （2）在启用测量为假的时候，给精灵添加一条动作：“取消绑定”","categories":[{"name":"杂项","slug":"杂项","permalink":"https://zjxdiu.github.io/categories/%E6%9D%82%E9%A1%B9/"},{"name":"未分类","slug":"杂项/未分类","permalink":"https://zjxdiu.github.io/categories/%E6%9D%82%E9%A1%B9/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"开发","slug":"开发","permalink":"https://zjxdiu.github.io/tags/%E5%BC%80%E5%8F%91/"},{"name":"游戏引擎","slug":"游戏引擎","permalink":"https://zjxdiu.github.io/tags/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"}]},{"title":"使用批处理和Joplin执行并优化Hexo博客工作流程","slug":"blog/批处理优化Hexo工作流程","date":"2022-11-27T13:53:00.000Z","updated":"2023-12-10T12:20:19.173Z","comments":true,"path":"blog/批处理优化Hexo工作流程/","link":"","permalink":"https://zjxdiu.github.io/blog/%E6%89%B9%E5%A4%84%E7%90%86%E4%BC%98%E5%8C%96Hexo%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/","excerpt":"","text":"使用静态部署的方式使用 Hexo，我们经常会遇到一个很烦人的问题，就是部署麻烦。 每次写一篇文章，就要经历 Hexo clean、Hexo g、Hexo s、Hexo d 四连，一开始还好，写多了之后烦不胜烦。 同时，由于我个人使用 Joplin 进行文章撰写，这个软件虽然简洁，但并不好用；图片虽然可以直接复制，但不能修改输出目录，图片资源默认保存在与 /blog/ 平行的 /_resources/ 文件夹中。 因此，结合我最为擅长的 batch 脚本语言，我就萌生了使用批处理来优化整个流程的想法。 # 1. Git 安装配置（不确定是否有必要） 在安装 Git 的过程中，我们会有一个配置终端的过程，此处其实是建议选择第一项（使用 MinTTY），但我当时选择了第二项即使用系统的 cmd 来作 git bash 的终端。 如果选择了第一项，可能也是能正常使用批处理来代替执行的，应该不用担心。 # 2. 站点配置 blog 根目录下的_config.yml 文件： ...... post_asset_folder: false relative_link: false ...... 使用 Joplin 写文章的话应该关闭这两项（至少我测试下来这样是没问题的） # 3. 脚本编写 在 blog 根目录下新建 “程序名.bat”，开始编写功能。 先放源码： @echo off setlocal EnableDelayedExpansion goto start :ac rem 请设置%targetlable%变量，以确保正常跳转至目标位置 cls color 0F goto %targetlabel% :start if &quot;%targetlabel%&quot;==&quot;&quot; (set &quot;targetlabel=start&quot;&amp;&amp;goto ac) echo ------------------------------------------------ echo 1.执行完整的检查和推送blog流程 echo 2.快速上载blog echo 3.本地预览 echo 4.单独执行指令 echo ------------------------------------------------ echo. choice /c 1234 if &quot;%errorlevel%&quot;==&quot;4&quot; goto new if &quot;%errorlevel%&quot;==&quot;3&quot; (set &quot;targetlabel=local&quot;&amp;&amp;goto ac) if &quot;%errorlevel%&quot;==&quot;2&quot; (set &quot;targetlabel=fast&quot;&amp;&amp;goto ac) if &quot;%errorlevel%&quot;==&quot;1&quot; (set &quot;targetlabel=full&quot;&amp;&amp;goto ac) pause&amp;exit :new echo 正在创建新的cmd实例... echo ------------------------------------------------ echo 命令提示： echo hexo clean echo hexo g echo hexo s echo hexo d echo ------------------------------------------------ start cmd echo 按任意键返回菜单... pause &gt;nul set &quot;targetlabel=start&quot;&amp;&amp;goto ac :local echo ------------------------------------------------ echo 本地预览模式 echo ------------------------------------------------ echo 启动预览... cmd /c &quot;hexo clean &amp; hexo g &amp; xcopy D:\\blog\\source\\_posts\\_resources D:\\blog\\public\\blog\\_resources\\ /e /s /y &amp; echo 2&gt;D:\\blog\\.deploy_git\\.nojekyll &amp; start http://localhost:4000/ &amp; hexo s&quot; echo 按任意键返回菜单... pause &gt;nul set &quot;targetlabel=start&quot;&amp;&amp;goto ac :fast echo ------------------------------------------------ echo 快速上载blog echo ------------------------------------------------ cmd /c &quot;hexo clean &amp; hexo g &amp; xcopy D:\\blog\\source\\_posts\\_resources D:\\blog\\public\\blog\\_resources\\ /e /s /y &amp; echo 2&gt;D:\\blog\\.deploy_git\\.nojekyll &amp; hexo d&quot; echo ------------------------------------------------ echo 完成，2秒后退出... ping localhost -n 3 &gt;nul exit :full echo ------------------------------------------------ echo 完整流程向导 echo 按0为确定，按1为跳过 echo ------------------------------------------------ goto clean :clean echo 第一步：清理缓存 choice /c 01 if &quot;%errorlevel%&quot;==&quot;2&quot; goto generate cmd /c &quot;hexo clean&quot; goto generate :generate echo ------------------------------------------------ echo 第二步：生成页面 choice /c 01 if &quot;%errorlevel%&quot;==&quot;2&quot; goto check cmd /c &quot;xcopy D:\\blog\\source\\_posts\\_resources D:\\blog\\public\\blog\\_resources\\ /e /s /y &amp; echo 2&gt;D:\\blog\\.deploy_git\\.nojekyll &amp; hexo g&quot; goto check :check echo ------------------------------------------------ echo 第三步：本地预览 choice /c 01 if &quot;%errorlevel%&quot;==&quot;2&quot; goto deploy start http://localhost:4000/ cmd /c &quot;hexo s&quot; goto deploy :deploy echo ------------------------------------------------ echo 第四步：上传到远程服务器 choice /c 01 if &quot;%errorlevel%&quot;==&quot;2&quot; goto done cmd /c &quot;hexo d&quot; goto done :done echo ------------------------------------------------ echo 流程已完成，按任意键返回菜单... pause &gt;nul set &quot;targetlabel=start&quot;&amp;&amp;goto ac 我自认为自己的批处理写得都算比较清晰的了，虽然注释很少，但结合文字应该能看懂每一步是在干什么。 如果要使用，请把里面所有的 D:\\blog\\source\\_posts\\_resources 替换为你 Joplin 每次导出时的资源目录，把所有的 D:\\blog\\public\\blog\\_resources\\ 替换为你的博客站点目录，注意不要动 \\public\\... 后面的内容。 如果要更换功能模块，也应按照这里的写法，使用 cmd /c 命令内容 &amp; 第二条命令 &amp; 后面的很多命令 来执行，除了 start 用于启动网页之外尽量不要直接在批处理中使用模块的命令，否则容易直接闪退。 创建 .nojekyll 文件的目的是防止 GitHub 忽略掉下划线开头的文件夹，即 _resources # 4. 工作流程 现在，我们可以愉快地写文章了。 打开 Joplin，新建笔记（记得都放在同一个笔记本下），笔记的名字是文件名，写上 Front-matter 内容，之后就如同在 word 中一样写稿。 图片直接粘贴即可，需要的话修改 [ ] 里的内容，这是属于 markdown 语法的一部分，不详细说明。 写完的文章直接往 blog\\source\\_posts 里面一存，然后打开脚本按个 2，等两分钟就部署到 Github Pages 上了。 愉快地工作吧！ 补充点内容，修改文章稍微有点麻烦，因为 Joplin 非常笨，它不会识别已有的文件，发现重名了直接加后缀，连带着里面的图片也都加后缀、重新复制到 _resources 里面了；对于我这种硬盘空间够、平时图片不多的人来说倒是无所谓，但部署了之后文章会重复显示好几篇。所以不能直接导出文章，需要手动删除旧的，然后再从 Joplin 中导出即可。","categories":[{"name":"学习","slug":"学习","permalink":"https://zjxdiu.github.io/categories/%E5%AD%A6%E4%B9%A0/"},{"name":"软件","slug":"学习/软件","permalink":"https://zjxdiu.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%BD%AF%E4%BB%B6/"}],"tags":[{"name":"软件","slug":"软件","permalink":"https://zjxdiu.github.io/tags/%E8%BD%AF%E4%BB%B6/"}]},{"title":"WPS word如何设置图片背景，如何解决图片变成平铺问题","slug":"blog/WPS-word","date":"2022-11-26T15:18:00.000Z","updated":"2023-12-10T12:20:19.151Z","comments":true,"path":"blog/WPS-word/","link":"","permalink":"https://zjxdiu.github.io/blog/WPS-word/","excerpt":"","text":"# WPS word 如何设置图片背景，如何解决图片变成平铺问题 问题描述：在 WPS word 中插入背景图片，导出为 PDF、打印后发现图片变成平铺，如图所示 1. 打开需要插入背景图片的文档 2. 点击：页面布局、背景、其它背景、纹理 3. 选择 “其它纹理”，选择图片后点击确定 4. 现在背景图片应该可以正常导出了。","categories":[{"name":"学习","slug":"学习","permalink":"https://zjxdiu.github.io/categories/%E5%AD%A6%E4%B9%A0/"},{"name":"软件","slug":"学习/软件","permalink":"https://zjxdiu.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%BD%AF%E4%BB%B6/"}],"tags":[{"name":"软件","slug":"软件","permalink":"https://zjxdiu.github.io/tags/%E8%BD%AF%E4%BB%B6/"}]},{"title":"傅里叶变换红外光谱技术原理详解","slug":"blog/FTIR原理详解","date":"2022-11-26T13:02:00.000Z","updated":"2023-12-10T12:20:19.153Z","comments":true,"path":"blog/FTIR原理详解/","link":"","permalink":"https://zjxdiu.github.io/blog/FTIR%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"# 目录 一、物理基础 1.1 红外光谱基本原理 1.2 FTIR 光谱仪构成与基本运行过程 1.3 干涉现象 1.3.1 波的叠加 二、信号与系统 2.1 数字、模拟信号 2.1.1 信号 2.1.2 模拟信号 2.1.3 数字信号 2.2 信号转换 2.2.1 采样与 A/D 转换 2.2.2 奈奎斯特采样定理 2.2.3 混叠 2.3 傅里叶变换（FT） 三、FT 在 FTIR 中的具体原理 3.1 仪器工作流程详解 3.2 信号检测与采样 3.3 数据处理 四、总结与展望 4.1 总结与心得 4.2 未来展望 # 傅里叶变换红外光谱技术原理详解 # 一、物理基础 # 1.1 红外光谱基本原理 当一束红外光射到物质上，可能发生：吸收、透过、反射、散射或者激发荧光。其中，我们需要的部分是吸收的量。然而，对于仪器来说，直接测量吸光度似乎并不现实；因此，我们一般采用已知强度的光源以及透过量来代替吸光度。 红外光，本质上是一段频率特殊、无法被人眼看见的电磁波，其波长一般为 0.75-1000nm，频率约为 300GHz~430THz。与之相似的包括微波（或 Wi-Fi、5G 网络的毫米波）、FM 广播等无线电波和其它。 对于红外光谱分析，我们一般选用其中的一段波长（或频率、波数）为目标光。采用色散元件，我们可以将光源发射的连续光谱（类似包含全部可见光波长而显白色的太阳光）分解为需要的单色光（只包含一种波长的光），然后让其通过样品、测定吸光度。 其余的红外光谱原理可查阅课本，此处不再赘述。 # 1.2 FTIR 光谱仪构成与基本运行过程 FTIR 光谱仪，即 Fourier Transform Infrared Radiation Spectrometer，傅里叶变换红外辐射光谱仪（以下简称 FTIR 或 FFTIR），就是一种用于红外光谱测定的仪器。与普通的红外光谱仪不同，FTIR 不具有单色器，而是以迈克尔逊干涉仪取代，并且对计算机系统尤为依赖、几乎不可能通过人力来计算其光谱图。 FTIR 的运行流程可以概括为：光源发射红外线 – 干涉仪动作产生干涉光 – 干涉光通过样品到达检测器 – 光电二极管或其它检测器将光强转换为电信号 – 传入计算机进行数据处理。其中，光源发射的红外线包括整个需要测定的频率范围，而干涉仪需要持续动作以产生需要的干涉光；干涉光的性质与检测器信号是一一对应且已知的。 # 1.3 干涉现象 1801 年，英国物理学家托马斯・杨在实验室里成功地观察到了光的干涉，以下就是经典的双缝干涉实验。 简而言之，同一束光线从不同的位置发出时，在后面的空间内就会发生干涉现象；或者说，当一束光 “碰到” 另一束光时，两束光发生干涉现象。通俗的例子是，当身边有一个持续频率的声音（例如蜂鸣器报警），人站在房间的不同位置就会听到音量大小不同，在某些角落时这个声音甚至会几乎完全消失，这也是干涉现象的一种体现。 # 1.3.1 波的叠加 我们都知道如何画 y=sin x 的函数图像，它是一个正弦曲线。但是，如果在同一个空间和时间内，有另一个波源发射了另一个正弦曲线，并且它的解析式是 y=sin (1.1x)，这时候两个波发生叠加，我们又如何画出 y= (sin x) + sin (1.1x) 的曲线图呢？ 使用现代化的图形计算器，我们可以很轻松地通过计算机画出上述叠加波的函数图像。很明显，叠加波的振幅（也就是一个周期内的最大 y 值）在周期性变化，但我们仍然可以看到 sin x 的痕迹；似乎就是 sin x 的振幅被周期性地 “压缩”，而这个压缩的方式仍然是一个正弦样子。 也许这些内容已经难以理解了，但我们只需要知道，多个波在叠加之后会产生新的波，而这个叠加波的形态与每个单独的波似乎没有太过直接的关联。 # 二、信号与系统 # 2.1 数字、模拟信号 # 2.1.1 信号 所谓信号，指的是能传递信息的某种载体。例如现在屏幕上显示的文字，就是一种传递文字信息的信号。这是一个抽象的概念，但有太多实际的例子。接下来的篇幅里，我们将大量使用声音，一种最常见的信号为例，讲解信号与系统的浅层内容。 # 2.1.2 模拟信号 所谓模拟信号，指的其实是连续的信号；例如我们听到的声音，实际上是声源产生的机械振动，导致空气被压缩和扩张，这个不断变化的气压传入耳朵，再通过复杂的器官系统，我们就能听到声音。这个过程中，物体的机械振动是连续的，它并不会突变。如果难以理解，那么可以想象一下，如果一个物体的振动发生了一次突变，这意味着它振动面上的分子发生了瞬间移动，也就是在 0 秒内产生了大于 0 的位移，其速度超过了光速；显然，这对于声波来说是不可能的。因此，我们听到的声音就是连续的信号。 # 2.1.3 数字信号 数字信号，也可以叫离散信号，是信号的一种类型。这个名词听上去很高级，但实际上它跟模拟信号没有太大的区别。它们都是信号，只不过形式不同。 我们知道，模拟信号是连续的信号。仍然以声波为例，如果我们将声音与时间的关系画在一张图上，这就是所谓的声波图。 现在，假设我们希望保存下来这一段声波，并希望它能在一定条件下重现出来。但是，模拟信号是连续的，这意味着它在时间上不存在断点，它包含的数值为无穷多个。显然，计算机无法记录无穷多个数据，实际上我们也没有必要全部记录下来。我们只需要每隔一段时间记录一个数据，这样就可以将无限的数据变成有限，并且似乎也有很大的希望能够重现出来（至少在能接受的损失范围内）。这个过程与逻辑将在下文介绍。 # 2.2 信号转换 # 2.2.1 采样与 A/D 转换 刚才我们提到了模拟信号转换到数字信号的过程。实际上，这就是 ADC（Analog to Digital Converter，模拟到数字转换）的工作原理。我们只需要在尽可能短的时间间隔内记录数据，这样至少主观上我们就可以重现它。 这张图展示的就是一个正弦波经过转换后的结果，每个圆圈代表一个数据点；这样，无限的信号变成了有限的数据点，我们也能通过点的走向看出来它是一个正弦波。这个过程，我们称之为 “采样”（Sampling）。采样的结果，就是将连续信号转换为有限个的采样点（Sample）。 反之，我们也可以通过 DAC 过程，将采样后的离散信号再次转换回模拟信号；这样，你存储在手机里的音乐就能再次变成连续的电信号，并通过扬声器的振膜再变成机械振动。由于这个过程涉及过多的电子工程学内容，并且对于本文所论述的信号处理而言没有太大价值，因此不在此处展开。 # 2.2.2 奈奎斯特采样定理 现在，我们知道了采样的过程，就是用大量的数据点来描述原信号。但是，这个大量到底是多少？我们说 “尽可能短的时间间隔内”，这个间隔到底是多少？ 在回答以上问题之前，我们先想象一下刚才的采样图：里面有很多的数据点，因此我们可以 “脑补” 出原来的信号。但是如果数据点太少，我们还能这样 “脑补” 吗？显然，可能就会有损失，甚至会丢失。 庆幸的是，我们有一个定理，它给出了这个最小数据点数的限制，它就叫奈奎斯特采样定理。 奈奎斯特定理的原文是：任何有限带宽的连续信号都可以被完美转换为数字信号，只要采样频率高于原信号中最高频率分量的 2 倍。 太长了看不懂，没关系，我们分别来解释一下它的含义。 首先，我们要知道采样率的定义。刚才说到的 “最小时间间隔”，其实就是指采样点的间隔；而它的倒数就是采样率。采样率的含义是，每秒的采样点数量，单位是 Hz（赫兹）。 然后，我们有一个信号频率的概念；我们知道，人耳能听到的声音频率范围是 20-20kHz，这里的频率指的是声源机械振动的频率。 现在，我们希望录音机能够回放的声音频率覆盖人耳的听觉频率范围，这样它录制的声音才跟最开始的声音能尽可能地一致。现在就轮到奈奎斯特定理上场了，我们的录音机采样率需要＞20kHz x 2 = 40kHz，才能保证它可以记录到人耳的听觉上限。 没错，奈奎斯特定理就是这么简单的应用。如果我们想将一个最高频率为 100Hz 的信号无损转换为数字信号，我们的采样率就要大于 200Hz，仅此而已。实际上，多数现代音频以 44.1kHz 或 48kHz 的采样频率进行采样，以保证完全覆盖人耳听觉频率范围。 这就结束了吗？奈奎斯特定理真的能如此简单和完美地指导我们开发电子设备吗？显然不是的。它只是一种理想情况下的描述，实际上我们的仪器采样率都是有限的，存储设备的空间也是有限的，这就意味着很多时候我们的采样率并不能达到要求的 2 倍于最高频率（我们称之为奈奎斯特频率，以下简称 Nf），而这时候，我们就遇到了采样过程的最大问题 —— 混叠。 这里还有一个小插曲，你可能会说，采样之后的数字信号是离散的数据点，它怎么能够无损转换回模拟信号呢？我难道不可以在数据点之间随便画我想要的图形吗？ 很抱歉，你确实不可以。这就是奈奎斯特采样定理的美丽之处了，它从数学上证明了，我们还原回去的那个信号，就是这一段数字信号转换到模拟信号时的唯一解。如果你试图在其中画更多的内容，那么它就会产生高于奈奎斯特频率的内容，那么在还原时由于频率的限制，这些内容就会丢失，最后仍然会变成原来的波形。 # 2.2.3 混叠 什么是混叠（Aliasing）？ 我们从一个生活中常见的例子来说明 —— 车轮效应。 如果你在电视上看节目，或者自己拍摄视频，然后画面里包含了汽车、自行车的车轮运动，你可能会注意到一个奇怪的现象：当车从停止开始加速时，你看到画面里的车轮逐渐加快；但当加速到一定水平后，不仅车轮没有更快，反而逐渐开始减速，直到某个时候车轮在画面里看起来跟静止一样；如果车继续加速，你甚至会看到车轮开始反方向旋转。 没错，这就是混叠；确切来说，是图像信息在时间域上的混叠。 发生车轮效应的原因是，摄像机的拍摄并不是记录连续的运动画面，而是相当于一个快速连拍的过程，它每秒拍摄一定数量（一般是 24 或 30）的照片，然后在你观看视频的时候以相同的速度快速播放照片；由于人眼的视觉暂留，我们就看到的连续的运动画面。 但是，你可能已经注意到了，这里摄像机并没有记录原始的连续画面，它的工作更像是一个 “采样” 的过程。是的，这确实是一种采样，并且我们看到了采样过程中最大的问题：混叠。它发生在采样速率小于 Nf 的时候，并且会导致一些严重的后果（例如车轮反转）。 理解起来也很容易。假设我们的手机每秒拍 30 张照片（在视频里称为 “帧”），这意味着相邻两帧的间隔是 1/30s=33.3ms。如果车轮的运动速度够快，那么就可能发生一个情况：在这 33.3ms 的时间间隔之内，车轮刚好转过了一圈（或 1/n 圈，取决于车轮形状），这意味着第二帧和第一帧的画面是完全一样的。以此类推，如果车速维持在这个水平，那么我们将看到车轮一直静止。 在信号领域，混叠的含义几乎是一样的，当我们的信号包含了大于采样率的频率，此时就会发生混叠现象，这会向已经采样的数据添加伪影，并且一旦它进入了数字信号，就无法消除。 * 更多信息和通俗的动画解释：点击查看 b 站视频 # 2.3 傅里叶变换（FT） * 本节部分内容源自原文地址，作者：韩昊 现在，我们已经获得了一些采样好的数字信号，假设这些信号非常完美，不会发生混叠。我们随时可以用 DAC 过程将其转换回模拟信号，也可以存储在硬盘里以便之后使用。那么，我们还要傅里叶变换干什么？傅里叶变换到底是个什么东西？ 我们用一个最直观的方式理解傅里叶变换。 在你的理解中，一段音乐是什么呢？ 这是我们对音乐最普遍的理解，一个随时间变化的振动。 但是，对于精通乐器的人来说，音乐更直观的理解也许是这样的： 好了，傅里叶变换到此结束，我们继续下一章的学习。 什么？这还不够吗？ 其实这是一个不太恰当的例子，但它通俗地解释了 FT（傅里叶变换）的过程：将一段随时间变化的声波（时域信息）转换为随时间变化的音调（频域信息）。FT 过程在无限的时间上识别信号，然后把其中的频率信息提取出来，并转换成有限的频率谱图。 不过，我们到底怎么实现 FT 呢，一段声波信号看起来那么复杂、毫无规律，我们怎么提取其中的频率信息？ 傅里叶变换认为，所有的叠加波，都可以由有限或无限个已知或已知规律的正弦波叠加而成。而处理正弦波是非常轻松的，只需要找到它的周期，就能知道它的频率，还能得知它的表达式，甚至将其替换为另一个不同频率的正弦波。 如果还不够直观，我们看一下两段音乐的声波图： 上图是电子音乐，包含强烈鼓点、贝斯（低频）声音，而下图则是钢琴曲，这些低频声音很少。 也许你已经看出来其中的区别了，低频声音占比高的声波，它的图像会呈现一个十分 “低频” 的起伏；而在同样的窗口内，低频占比小的声波则显得 “复杂” 很多，并且缺乏更大的起伏波浪。仔细观察上图，其实在起伏的过程中也包含很多小的尖刺，实际上这就是低频声音与高频声音叠加之后的结果。 现在，你已经掌握了用肉眼做傅里叶变换的能力（），但是这个计算精度很差，也只能区分少数的几个频率（这就是为什么人来算傅里叶变换几乎不可能的原因）。不过，计算机很擅长这个，让它来做 FT（确切来说是 FFT，快速傅里叶变换，是针对计算机的一种优化算法），我们就能得到音乐的频谱图（颜色越亮表示声音强度越高）： （准确地说，这张图是频谱随时间变化的图，因为音乐信号中的频率信息时刻变化） 这个图对于音频工程师来说简直就是一个神器；把声波转换为频率信息，我们可以发现很多原来不能发现的错误和问题；如果一些乐器声音太大导致刺耳的话，频谱图上就能看到高频部分的强度很高。 在其它需要分析信号的领域，FT 同样是好用的工具。它把复杂的信号做了简化，让我们能从另一个维度（视角）来观察信号。 * 如果还感有余力，则可以详细了解拉普拉斯变换，它又从另一个维度理解了信号。 # 三、FT 在 FTIR 中的具体原理 # 3.1 仪器工作流程详解 对于 FTIR 而言，我们有红外光源、干涉仪（包含两个反射镜，一个是动镜，一个是定镜），He-Ne 激光器，样品池，检测器，计算机系统。红外光源会持续发射连续的红外光谱，而动镜则利用激光校准、通过电机来调整位置，使之能够在确定的距离上进行移动；入射红外光在透镜作用下分成两束光，并在经过动镜和定镜后再次合为一束，在这个过程中两束光交汇即产生干涉现象，而其相位差就由动镜位置决定。动镜不断移动，干涉相位也在不断变化，这一束干涉光送入样品池后被吸收一部分，最后进入检测器和信号系统中。 这张图很好地解释了 FTIR 中各光线的走向。其中，Beamsplitter 是光波分束器，也叫半透半反射镜，它的作用是将红外光源发射的光线分为两束，一束为绿色实线，另一束为红色实线；它们分别到达定镜和动镜，并被反射回来（反射光用绿色、红色虚线表示）。反射光到达分束器时也会发生同样的现象，我们需要的光线是绿色穿透线和红色反射线（虚线），它们在分束器处就会发生干涉现象，最后干涉光到达样品。 # 3.2 信号检测与采样 通过前文信号与系统部分的学习，我们知道，仪器是不能处理连续信号的，必须通过采样、转换为数字信号才可以进行处理和储存。不过，与音频（和大多数）信号不同的是，FTIR 中信号并不是随时间变化，而是随动镜位置变化的。当动镜固定在一个位置时，得到的信号永远是同一个值。这就给了我们的仪器一些 “可乘之机”。 如果了解过示波器或相关产品，那么你一定会知道，现在的实验室示波器带宽一般不会超过 10GHz（最大带宽，指在这个频率以内的信号都能被较为准确地还原和记录），而红外光的频率在 300GHz 到 430THz 之间，它们之间的差距非常大；尽管这个对比并不恰当，但我们依然能发现，通过时间来采样显然是不合适的。 理解了这些，我们就能知道 FTIR 到底是如何采集数据的了；动镜每次移动很短的距离，然后两束光的相位会发生变化（光程差改变），进而引起干涉发生在不同的光频率上。这个动镜单次移动的距离非常短，以至于要单独用 He-Ne 激光来进行位置调整。具体是如何做到的，我并没有找到对应的资料，如果有同学知道可以在评论区告知。 # 3.3 数据处理 现在，动镜完整地移动了一个循环，其中每次停顿的时候检测器都记录了一个数值，这个数值代表动镜在这个位置的时候这种干涉光导致的透过程度。将这些数值与动镜位置的关系作图，即得干涉图。对干涉图作 FFT 运算，即得每个频率（波数）下的吸光度（透过率）。 如果难以理解，这里有一个解释的过程。 假设我们的红外光源只会发射两个频率的波（即两个单色光），它们的频率有一定的差异。现在，这两束光经过了一次完整的工作循环，则在干涉仪中，两束光会发生干涉现象，且这个干涉会随动镜位置的改变而变化。我们将动镜的位置类比到音频信号中的时间，将检测器的结果理解为量化后的强度值，则得到的干涉图实际上是一种强度 - 时间的时域图；FFT 可以将其转变为光谱图，实际上是一种强度 - 频率（波数）的频域图。只不过在音频信号中，频率指的是振动次数 / 秒，而光谱中频率指的是波数 / 厘米。 左图为干涉图，右图为光谱图。可以将干涉图类比为时域信号图（如声波图），将光谱图类比为频域信号图（频谱图）。 # 四、总结与展望 # 4.1 总结与心得 FTIR 是目前应用最多的红外光谱分析原理，因为它与标准的红外光谱分析法相比，具有检测速度快、灵敏度更高、信噪比更高等优势。但目前大学相关仪器分析教材中并未详细描述 FTIR 的原理，甚至网络上都很难直接搜索到 FTIR 的详细原理（大部分都是以某乎的回答形式，而那些回答要么直接抄教材、FFT 部分一笔带过，要么过于复杂、直接摆上一长串的变换公式，这对于想稍微深入理解但又没有学习过信号与系统的化学相关专业学生来说实在不友好）。因此，我在查找了大量的资料的情况下才有了撰写这篇文章的想法。 我并不是多学位、辅修第二专业的学生，但我对音频处理、电子工程都有所了解和学习。这一次在食品专业课程中看到了相关的技术，我几乎是瞬间就产生了浓厚的兴趣。尽管学习的过程十分艰难，这篇文章最终还是诞生了，以期有相同兴趣的同学可以得到帮助。 # 4.2 未来展望 由于大三时期学习事务繁多，本文从 2022 年 11 月 22 日开始编写，到 26 日了才勉强算接近尾声。因此，文章内仍然有很多错误没能及时发现与更正，若能指正，感激不尽。 实际上我还学习了更多的内容，例如旁瓣峰与窗函数、信号补零的影响等等，但最终都并未写入本文。若有兴趣了解，可联系我提供相关学习资料地址等。","categories":[{"name":"专业","slug":"专业","permalink":"https://zjxdiu.github.io/categories/%E4%B8%93%E4%B8%9A/"},{"name":"多学科","slug":"专业/多学科","permalink":"https://zjxdiu.github.io/categories/%E4%B8%93%E4%B8%9A/%E5%A4%9A%E5%AD%A6%E7%A7%91/"}],"tags":[{"name":"化学","slug":"化学","permalink":"https://zjxdiu.github.io/tags/%E5%8C%96%E5%AD%A6/"},{"name":"仪器分析","slug":"仪器分析","permalink":"https://zjxdiu.github.io/tags/%E4%BB%AA%E5%99%A8%E5%88%86%E6%9E%90/"},{"name":"信号处理","slug":"信号处理","permalink":"https://zjxdiu.github.io/tags/%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/"}]},{"title":"博客成功建立！","slug":"blog/blog建立完成！","date":"2022-11-24T13:27:00.000Z","updated":"2023-12-10T12:20:19.161Z","comments":true,"path":"blog/blog建立完成！/","link":"","permalink":"https://zjxdiu.github.io/blog/blog%E5%BB%BA%E7%AB%8B%E5%AE%8C%E6%88%90%EF%BC%81/","excerpt":"","text":"# 关于博客 这里已经改造为我的专属网络空间，欢迎访问！ 不定时发布各种博客文章，包括各类学习、爱好、生活和灌水内容等等。 # 个人资料 就读于长沙理工大学，今年大三。 什么领域都想涉及，软件、硬件、网络工程、音乐制作、音频处理、视频剪辑、游戏开发、平面设计… 但实际上并没有哪个是学得很好的。 外表是糙汉，内心世界却很单纯。不愿猜测叵测的人心，却总是被迫卷入一次次的纷争。 # 关于 zjxdiu 这是我的网络常用 id，一些平台里搜索这个 id 找到的大概都是我。 它的来源其实有点蠢（dumb） 这个 id 分成两部分，前面是 zjx，也就是我的名字首字母拼一起；后面是 diu，它是源于粤语里的一句脏话，然后初中的时候班上同学天天把 diu 挂在嘴边。 这还不是全部，当我辗转于各大 mc 服务器时，我意外地发现，diu 这个 id 被占用的概率很低，于是那段时间我的 minecraft 用户名一直叫 diu。 再长大一点，我觉得只叫 diu 也很容易听出一些低俗感，所以我把两部分拼起来，变成了 zjxdiu。 虽然还是很难通过英语来阅读这个词，但它确实是伴随着我到大学，一路走过来的 id。 # 联系方式等 可以通过以下方式联系我： 常用平台 id：zjxdiu QQ：2987631086 请在添加好友时说明你是从哪里找到我号码的，否则可能不会同意申请 E-mail：zjxdiu@qq.com 可以用于提交各种东西，向我提问，等等 友情链接功能还没调试好，暂时不开放…","categories":[{"name":"杂项","slug":"杂项","permalink":"https://zjxdiu.github.io/categories/%E6%9D%82%E9%A1%B9/"},{"name":"日志","slug":"杂项/日志","permalink":"https://zjxdiu.github.io/categories/%E6%9D%82%E9%A1%B9/%E6%97%A5%E5%BF%97/"}],"tags":[{"name":"开发","slug":"开发","permalink":"https://zjxdiu.github.io/tags/%E5%BC%80%E5%8F%91/"},{"name":"测试","slug":"测试","permalink":"https://zjxdiu.github.io/tags/%E6%B5%8B%E8%AF%95/"},{"name":"日常","slug":"日常","permalink":"https://zjxdiu.github.io/tags/%E6%97%A5%E5%B8%B8/"}]}],"categories":[{"name":"学习","slug":"学习","permalink":"https://zjxdiu.github.io/categories/%E5%AD%A6%E4%B9%A0/"},{"name":"计算机","slug":"学习/计算机","permalink":"https://zjxdiu.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"杂项","slug":"杂项","permalink":"https://zjxdiu.github.io/categories/%E6%9D%82%E9%A1%B9/"},{"name":"未分类","slug":"杂项/未分类","permalink":"https://zjxdiu.github.io/categories/%E6%9D%82%E9%A1%B9/%E6%9C%AA%E5%88%86%E7%B1%BB/"},{"name":"软件","slug":"学习/软件","permalink":"https://zjxdiu.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%BD%AF%E4%BB%B6/"},{"name":"专业","slug":"专业","permalink":"https://zjxdiu.github.io/categories/%E4%B8%93%E4%B8%9A/"},{"name":"多学科","slug":"专业/多学科","permalink":"https://zjxdiu.github.io/categories/%E4%B8%93%E4%B8%9A/%E5%A4%9A%E5%AD%A6%E7%A7%91/"},{"name":"日志","slug":"杂项/日志","permalink":"https://zjxdiu.github.io/categories/%E6%9D%82%E9%A1%B9/%E6%97%A5%E5%BF%97/"}],"tags":[{"name":"信号处理","slug":"信号处理","permalink":"https://zjxdiu.github.io/tags/%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/"},{"name":"深度学习","slug":"深度学习","permalink":"https://zjxdiu.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"音频","slug":"音频","permalink":"https://zjxdiu.github.io/tags/%E9%9F%B3%E9%A2%91/"},{"name":"开发","slug":"开发","permalink":"https://zjxdiu.github.io/tags/%E5%BC%80%E5%8F%91/"},{"name":"游戏引擎","slug":"游戏引擎","permalink":"https://zjxdiu.github.io/tags/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"},{"name":"软件","slug":"软件","permalink":"https://zjxdiu.github.io/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"化学","slug":"化学","permalink":"https://zjxdiu.github.io/tags/%E5%8C%96%E5%AD%A6/"},{"name":"仪器分析","slug":"仪器分析","permalink":"https://zjxdiu.github.io/tags/%E4%BB%AA%E5%99%A8%E5%88%86%E6%9E%90/"},{"name":"测试","slug":"测试","permalink":"https://zjxdiu.github.io/tags/%E6%B5%8B%E8%AF%95/"},{"name":"日常","slug":"日常","permalink":"https://zjxdiu.github.io/tags/%E6%97%A5%E5%B8%B8/"}]}